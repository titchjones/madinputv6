(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["Optimise`LuusJaakolaOptimise`"];


LuusJaakolaOptimise::usage="LuusJaakolaOptimise[Dimension of Problem, Ranges, No. Outer Iterations, No. Inner Iterations, Contraction Coefficient, Fitness Function]\nOptions:\n\tMaximise \[Rule] False\n\tConvergence \[Rule] -\[Infinity] (\[Infinity] if Maximise \[Rule] True)\n\tExpansion \[Rule] 0.5\n\tPrintDynamic \[Rule] True";


LuusJaakolaOptimiseBasic::usage="LuusJaakolaOptimise[Dimension of Problem, Ranges, No. Outer Iterations, No. Inner Iterations, Contraction Coefficient, Fitness Function]\nOptions:\n\tMaximise \[Rule] False\n\tConvergence \[Rule] -\[Infinity] (\[Infinity] if Maximise \[Rule] True)\n\tExpansion \[Rule] 0.5\n\tPrintDynamic \[Rule] True";


LuusJaakolaFinish::usage="LuusJaakolaFinish[]\nStops the current run and writes the output";


LuusJaakolaValues::usage="";


Begin["`Private`"];


CreateRandomSolution[no_,range_]/;Length[range]===no:=Block[{},RandomReal[{Min[#],Max[#]}]&/@range]


$LuusJaakolaStop=False;


LuusJaakolaFinish[]:=$LuusJaakolaStop=True;


Clear[LuusJaakolaOptimiseBasic];
LuusJaakolaOptimiseBasic[no_,range_,nout_,nin_,\[Epsilon]_,fitvalin_,opts___]:=Module[{finalans,compare,convergence,verbose,expansion,fitval,i,j=0,xstar,x,r,R,parallelx,parallelfitval,$parallel,xstarfit,LuusJaakolaValuestmp,startlj},
$LuusJaakolaStop=False;
Optimise`LuusJaakolaOptimise`LuusJaakolaValues={};
startlj=Global`StartLJ/.{opts}/.{Global`StartLJ->False};
Print[startlj];
If[Global`Maximise/.{opts}/.{Global`Maximise->False},
compare=Greater;
convergence=Global`Convergence/. {opts}/. {Global`Convergence->\[Infinity]};
xstarfit=-\[Infinity];,
compare=Less;
convergence=Global`Convergence/. {opts}/. {Global`Convergence->-\[Infinity]};
xstarfit=\[Infinity];];
expansion=Global`Expansion/. {opts}/. {Global`Expansion->0.5};
verbose=Global`PrintDynamic/. {opts}/. {Global`PrintDynamic->True};
$parallel=Global`Parallel/. {opts}/. {Global`Parallel->False};
If[$parallel,
Print["Running Parallel!"];
];
If[verbose,Print[Dynamic[i],"  ",Dynamic[fitval[xstar]],"   ",Dynamic[xstar],"\tEpsilon = ",Dynamic[\[Epsilon]],"\[Rule]",Dynamic[r]]];

r=Max[#]-Min[#]&/@range;
If[startlj=!=False&&Length[startlj]===no,
xstar=startlj,
xstar=CreateRandomSolution[no,range]
];
Catch[Block[{},i=#;
LuusJaakolaValuestmp={};
Clear[fitval];fitval[in_]:=fitval[in]=(AppendTo[LuusJaakolaValuestmp,{in,fitvalin[in]}];fitvalin[in]);
If[$parallel,
j++;
parallelx=(R=DiagonalMatrix[RandomReal[{-expansion,expansion},{no}]];
xstar+R.r)&/@Range[nin];
parallelfitval=fitval[parallelx];
(If[compare[#[[2]],xstarfit],xstarfit=#[[2]];xstar=#[[1]]];
If[#[[2]]>=convergence||$LuusJaakolaStop===True,Throw[Null]])&/@Transpose[{parallelx,parallelfitval}];
,
Block[{},
j++;
R=DiagonalMatrix[RandomReal[{-expansion,expansion},{no}]];
x=xstar+R.r;
If[compare[fitval[x],fitval[xstar]],xstar=x];
If[fitval[xstar]>=convergence||$LuusJaakolaStop===True,Throw[Null]];
]&/@Range[nin];
];
r=(1-\[Epsilon])r;
AppendTo[Optimise`LuusJaakolaOptimise`LuusJaakolaValues,LuusJaakolaValuestmp];
]&/@Range[nout]];
If[verbose,Print["Minimum Fitness: ",Min[fitval[xstar]],"\tRaw Value: ",xstar,"\tTotal No. Iterations: ",j]];
FinishDynamic[];
{fitval[xstar],xstar}
]


Clear[LuusJaakolaOptimise];
LuusJaakolaOptimise[no_,range_,nout_,nin_,\[Epsilon]_,fitvalin_,opts___]:=Module[{finalans,compare,convergence,verbose,expansion,fitval,i,j=0,k=0,xstar,x,x2,r,r2,R,seed,compareequal,minfit=\[Infinity],parallelx,parallelfitval,$parallel,LuusJaakolaValuestmp,startlj},
LuusJaakolaValues={};
startlj=Global`StartLJ/.{opts}/.{Global`StartLJ->False};
If[Global`Maximise/.{opts}/.{Global`Maximise->False},
compare=Greater;
compareequal=GreaterEqual;
convergence=Global`Convergence/. {opts}/. {Global`Convergence->\[Infinity]};
minfit=-\[Infinity];,
compare=Less;
compareequal=LessEqual;
convergence=Global`Convergence/. {opts}/. {Global`Convergence->-\[Infinity]};
minfit=\[Infinity];];
expansion=Global`Expansion/. {opts}/. {Global`Expansion->0.45};
verbose=Global`PrintDynamic/. {opts}/. {Global`PrintDynamic->True};
seed=Global`Seed/. {opts}/. {Global`Seed->True};
If[seed===True,SeedRandom[],SeedRandom[seed]];
$parallel=Global`Parallel/. {opts}/. {Global`Parallel->False};
If[$parallel,
Print["Running Parallel!"];
];
If[verbose,Print[Dynamic[i],"  ",Dynamic[minfit],"   ",Dynamic[xstar],"\tEpsilon = ",Dynamic[\[Epsilon]],"\[Rule]",Dynamic[r]]];

r=Max[#]-Min[#]&/@range;
If[startlj=!=False&&Length[startlj]===no,
xstar=startlj,
xstar=CreateRandomSolution[no,range]
];
Catch[
Block[{xstarold=xstar},i=#;LuusJaakolaValuestmp={};
Clear[fitval];fitval[in_]:=fitval[in]=(j++;AppendTo[LuusJaakolaValuestmp,{in,fitvalin[in]}];fitvalin[in]);
If[$parallel,
j+=nin;
parallelx=(R=DiagonalMatrix[RandomReal[{-expansion,expansion},{no}]];
xstar+R.r)&/@Range[nin];
parallelfitval=fitval[parallelx];
(If[compare[#[[2]],minfit],minfit=#[[2]];xstar=#[[1]]];
If[#[[2]]>=convergence||$LuusJaakolaStop===True,Throw[Null]])&/@Transpose[{parallelx,parallelfitval}];
,
Block[{},
(*j++;*)
R=DiagonalMatrix[RandomReal[{-expansion,expansion},{no}]];
x=xstar+R.r;
If[compare[fitval[x],minfit],
minfit=fitval[x];
r2=(1-\[Epsilon])r;x2=x;x=xstar;
While[compare[fitval[x2],fitval[x]],
k++;
x=x2;
x2=x+R.r2;
r2=(1-\[Epsilon])r2];
xstar=x;
minfit=fitval[x];];
If[compareequal[fitval[xstar],convergence]||$LuusJaakolaStop===True,Throw[Null]];
]&/@Range[nin];
];
r=(1-\[Epsilon])r;
AppendTo[LuusJaakolaValues,LuusJaakolaValuestmp];
]&/@Range[nout]
];
If[verbose,Print["Minimum Fitness: ",minfit,"\tRaw Value: ",xstar,"\tTotal No. Iterations: ",j,"\tTotal No. Secret Iterations: ",k]];
FinishDynamic[];
{minfit,xstar}
]


End[];


EndPackage[]
