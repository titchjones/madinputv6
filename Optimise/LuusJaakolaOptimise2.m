(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["Optimise`LuusJaakolaOptimise`"];


LuusJaakolaOptimise::usage="LuusJaakolaOptimise[Dimension of Problem, Ranges, No. Outer Iterations, No. Inner Iterations, Contraction Coefficient, Fitness Function]\nOptions:\n\tMaximise \[Rule] False\n\tConvergence \[Rule] -\[Infinity] (\[Infinity] if Maximise \[Rule] True)\n\tExpansion \[Rule] 0.5\n\tPrintDynamic \[Rule] True";


LuusJaakolaFinish::usage="LuusJaakolaFinish[]\nStops the current run and writes the output";


Begin["`Private`"];


CreateRandomSolution[no_,range_]/;Length[range]===no:=Block[{},RandomReal[{Min[#],Max[#]}]&/@range]


$LuusJaakolaStop=False;


LuusJaakolaFinish[]:=$LuusJaakolaStop=True;


Clear[LuusJaakolaOptimise];
LuusJaakolaOptimise[no_,range_,nout_,nin_,\[Epsilon]_,fitvalin_,opts___]:=Module[{finalans,compare,convergence,verbose,expansion,fitval,i,j=0,k=0,xstar,x,x2,r,r2,R},
$LuusJaakolaStop=False;
If[Global`Maximise/.{opts}/.{Global`Maximise->False},
compare=Greater;
convergence=Global`Convergence/. {opts}/. {Global`Convergence->\[Infinity]},
compare=Less;
convergence=Global`Convergence/. {opts}/. {Global`Convergence->-\[Infinity]}];
expansion=Global`Expansion/. {opts}/. {Global`Expansion->0.5};
verbose=Global`PrintDynamic/. {opts}/. {Global`PrintDynamic->True};

If[verbose,Print[Dynamic[i],"  ",Dynamic[fitval[xstar]],"   ",Dynamic[xstar],"\tEpsilon = ",Dynamic[\[Epsilon]],"\[Rule]",Dynamic[r]]];

r=Max[#]-Min[#]&/@range;
xstar=CreateRandomSolution[no,range];
Catch[
Block[{xstarold=xstar},i=#;
Clear[fitval];fitval[in_]:=fitval[in]=fitvalin[in];
Block[{},
j++;
R=DiagonalMatrix[RandomReal[{-expansion,expansion},{no}]];
x=xstar+R.r;
If[compare[fitval[x],fitval[xstar]],
r2=(1-\[Epsilon])r;x2=x;x=xstar;
While[compare[fitval[x2],fitval[x]],
k++;
x=x2;
x2=x+R.r2;
r2=(1-\[Epsilon])r2];
xstar=x];
If[fitval[xstar]>=convergence||$LuusJaakolaStop===True,Throw[Null]];
]&/@Range[nin];
r=(1-\[Epsilon])r;
]&/@Range[nout]
];
If[verbose,Print["Minimum Fitness: ",Min[fitval[xstar]],"\tRaw Value: ",xstar,"\tTotal No. Iterations: ",j,"\tTotal No. Secret Iterations: ",k]];
FinishDynamic[];
{fitval[xstar],xstar}
]


End[];


EndPackage[]
