(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



Print["GPT Input - Last Updated: Fri 19 Oct 2012 12:12:42"]


Needs["Units`"];
Needs["PhysicalConstants`"]


PadNumberString[str_]:=Block[{},
If[Sign[str]===1,"","-"]<>If[Abs[str]<10&&Abs[str]>=1,"0"<>ToString[Abs[str]],ToString[Abs[str]]]
]


HeadBlock[numpart_]:=Block[{},
"# Basic beam parameters
Eo = 0 ; \t\t\t# Energy [eV]
E1 = 8.35e6;
gamma = -q*E1/(m*c^2) + 1 ;     # corresponding gamma
beta  = sqrt(1-gamma^-2) ;      # corresponding beta 
vz    = beta*c ;  

initrad = "<>ToString[NumberRight[$initrad]]<>"e-3 ; \t\t# Bunch radius (NOT rms) [m]
Qtot = -"<>ToString[NumberRight[BunchCharge]]<>"e-12 ;\t\t# Bunch charge [C]
temit = "<>ToString[NumberRight[$laserpulselength]]<>"e-12 ;\t\t# Laser pulse [s]

# Simulation parameters
numpart = "<>ToString[NumberRight[numpart]]<>";\t\t# Number of particles

# Start bunch
setparticles(\"beam\",numpart,me,qe,Qtot) ;
setrxydist(\"beam\",\"u\",0.5*initrad,initrad) ;"<>
If[ValueQ[$laseroffset]&&Abs[$laseroffset]>0,
"settransform(\"wcs\","<>ToString[NumberRight[10^-3 $laseroffset,8]]<>",0,0,1,0,0,0,1,0,\"beam\");\n",
"\n"]<>
"setphidist(\"beam\",\"u\",0,2*pi) ;
settdist(\"beam\",\"u\",0,temit) ;"<>
If[$spacecharge==True,"

# Space-charge
spacecharge3Dmesh(\"BeamScale\",1e-2,1e+2,\"Cathode\",\"Boundaries\",\"AAAAAA\",\"MeshBoxAccuracy\",0.02,\"RestMaxGamma\",300000) ;\n\n",""]
]


HeadBlock[numpart_List]:=Block[{},
"# Basic beam parameters
Eo = 0 ; \t\t\t# Energy [eV]
E1 = 8.35e6;
gamma = -q*E1/(m*c^2) + 1 ;     # corresponding gamma
beta  = sqrt(1-gamma^-2) ;      # corresponding beta 
vz    = beta*c ;  

initrad = "<>ToString[NumberRight[$initrad]]<>"e-3 ; \t\t# Bunch radius (NOT rms) [m]
Qtot = -"<>ToString[NumberRight[BunchCharge]]<>"e-12 ;\t\t# Bunch charge [C]
temit = "<>ToString[NumberRight[$laserpulselength]]<>"e-12 ;\t\t# Laser pulse [s]

# Start bunch
"<>StringJoin@@Map["setstartpar(\"beam\","<>StringDrop[StringDrop[ToString[NumberRight[#]],-1],1]<>") ;\n"&,numpart]<>

If[$spacecharge==True,"

# Space-charge
spacecharge3Dmesh(\"BeamScale\",1e-2,1e+2,\"Cathode\",\"Boundaries\",\"AAAAAA\",\"MeshBoxAccuracy\",0.02,\"RestMaxGamma\",300000) ;\n\n",""]
]


HeadBlock[numpart_,DISTFILE]:=Block[{},
"# Basic beam parameters
Eo = 0 ; \t\t\t# Energy [eV]
E1 = 8.35e6;
gamma = -q*E1/(m*c^2) + 1 ;     # corresponding gamma
beta  = sqrt(1-gamma^-2) ;      # corresponding beta 
vz    = beta*c ;  
initrad = "<>ToString[NumberRight[$initrad]]<>"e-3 ; \t\t# Bunch radius (NOT rms) [m]
Qtot = -"<>ToString[NumberRight[BunchCharge]]<>"e-12 ;\t\t# Bunch charge [C]
temit = "<>ToString[NumberRight[$laserpulselength]]<>"e-12 ;\t\t# Laser pulse [s]

#time=6.546848972493966/vz;
position=5.2;
setfile(\"beam\",\"cresting_bc_out.gdf\");\n"<>
If[$spacecharge===True,"
# Space-charge
spacecharge3Dmesh() ;\n\n",""]
]


BoosterBlock[Buncherphase_,BC1Field_,BC1Phase_,BC2Field_,BC2Phase_]:=Block[{},
"# Set-up
map1D_E(\"wcs\",\"I\",\"alice_onaxis.gdf\",\"z\",\"Ez\","<>ToString[NumberRight[GunVoltage/350]]<>") ;
map1D_B(\"wcs\",\"z\",0.23,\"JLab_sol_smooth.gdf\",\"z\",\"Bz\","<>ToString[NumberRight[85$sol01,8]]<>"*1e-4) ;
map1D_TM(\"wcs\",\"z\",1.3,\"bun_ELBE.gdf\",\"z\",\"Ez\","<>ToString[NumberRight[1000(1.586/0.03)*Sqrt[$buncherpower],8]]<>","<>ToString[NumberRight[Buncherphase,8]]<>"*pi/180,2*pi*1.3e9) ;\n"<>
If[ValueQ[$corrfield]&&Abs[$corrfield]>0,
"rectmagnet(\"wcs\",\"z\",1.6744, 0.2,0.01,"<>ToString[NumberRight[10^-3 $corrfield,8]]<>",0,0,0);\n",""]<>
"map1D_B(\"wcs\",\"z\",1.67,\"JLab_sol_smooth.gdf\",\"z\",\"Bz\","<>ToString[NumberRight[85$sol02,8]]<>"*1e-4) ;
map1D_TM(\"wcs\",\"z\",2.85,\"teslacav13.gdf\",\"z\",\"Ez\","<>ToString[NumberRight[BC1Field,8]]<>"*1e6,"<>ToString[NumberRight[BC1Phase,4]]<>"*pi/180,2*pi*1.3e9) ;
map1D_TM(\"wcs\",\"z\",4.2,\"teslacav13.gdf\",\"z\",\"Ez\","<>ToString[NumberRight[BC2Field,8]]<>"*1e6,"<>ToString[NumberRight[BC2Phase,4]]<>"*pi/180,2*pi*1.3e9) ;\n"
]


DipoleBlock[injector_:True]:=Block[{(*dipolefield*)},
If[Length[$LATTICE]>1,
If[$dipolefield==={},dipolefield = Flatten[Block[{lat=#[[1]],en=#[[2]]},Table[en,{Length[Select[MADFlatten[lat], #[[2]] === "SectorBend" || #[[2]] === "RectBend" &][[All, 1]]]}]]&/@Transpose[{Split[MADFlatten[$LATTICE],#1[[1]]=!="TCAVITY2A"&&#2[[1]]=!="TCAVITY1D"&],
If[Length[Split[MADFlatten[$LATTICE],#1[[1]]=!="TCAVITY2A"&&#2[[1]]=!="TCAVITY1D"&]]===4,
{"BCEnergy","LC12Energy","LC12Energy","BCEnergy"},
If[MemberQ[MADFlatten[$LATTICE][[All,1]],"TCAVITY2A"],
If[MemberQ[MADFlatten[$LATTICE][[All,1]],"TCAVITY1D"],{"BCEnergy","LC12Energy","BCEnergy"},{"BCEnergy","LC12Energy"}],If[MemberQ[MADFlatten[$LATTICE][[All,1]],"TCAVITY1D"],{"LC12Energy","BCEnergy"},{"BCEnergy"}]]]}]],dipolefield=$dipolefield];
If[Length[Select[MADFlatten[$LATTICE],#[[2]]==="SectorBend"||#[[2]]==="RectBend"&]]=!=Length[dipolefield],
Print["Length Dipoles ",Length[Select[MADFlatten[$LATTICE],#[[2]]==="SectorBend"||#[[2]]==="RectBend"&]]," - Length Bfield ",Length[dipolefield]];,
"# dipoles\n"<>StringJoin@@
MapIndexed[Block[{maindip=#[[2]],offset},
offset=If[#[[1,1]]===#[[2,1]],If[injector,-5.2,0],#[[1,3]]+#[[1,1,3]]];
"bnd"<>maindip[[1,1]]<>" = 2*"<>ToString[NumberRight[If[Abs[maindip[[1,6]]]<0.001,0,Abs[maindip[[1,3]]/maindip[[1,6]]/2]]]]<>"*tan("<>ToString[NumberRight[Abs[maindip[[1,6]]]]]<>"/2) ;\t# distance between intersect and edge of dip1
ccs( "<>If[#2[[1]]>1,"\"bend"<>ToString[#2[[1]]-1]<>"\"","\"wcs\""]<>", 0, 0, "<>ToString[NumberRight[maindip[[3]]-offset,10]]<>If[#[[1,1]]===#[[2,1]],"+bnd"<>maindip[[1,1]],"+bnd"<>maindip[[1,1]]<>"+bnd"<>#[[1,1,1]]]<>", cos("<>ToString[NumberRight[maindip[[1,6]]]]<>"), 0, -sin("<>ToString[NumberRight[maindip[[1,6]]]]<>"), 0, 1, 0, \"bend"<>ToString[#2[[1]]]<>"\" ) ;
"<>If[Abs[maindip[[1,6]]]>0.001,"sectormagnet"<>"( "<>If[#2[[1]]>1,"\"bend"<>ToString[#2[[1]]-1]<>"\"","\"wcs\""]<>", "<>"\"bend"<>ToString[#2[[1]]]<>"\""<>", "<>ToString[NumberRight[Abs[maindip[[1,3]]/maindip[[1,6]]]]]<>", "<>
ToString[NumberRight[
If[NumberQ[#[[2,2]]],
Abs@ToExpression["currentToField["<>maindip[[1,1]]<>","<>ToString[maindip[[2]]]<>"]"],
If[#[[2,2]]==="BCEnergy",
Abs@ToExpression["Convert[ElectronMass*SpeedOfLight*$BetaInjector $GammaInjector/ElectronCharge/"<>ToString[NumberRight[Abs[maindip[[1,3]]/maindip[[1,6]]]]]<>"/Meter/Tesla,1]"],Abs@ToExpression["Convert[ElectronMass*SpeedOfLight*$BetaLinac $GammaLinac/ElectronCharge/"<>ToString[NumberRight[Abs[maindip[[1,3]]/maindip[[1,6]]]]]<>"/Meter/Tesla,1]"]]
]
]]
<>", "<>If[maindip[[1,2]]=="RectBend",ToString[NumberRight[Abs[maindip[[1,6]]/2]+ToExpression[maindip[[1,1]]<>"Extra"][[5]]]],ToString[NumberRight[ToExpression[maindip[[1,1]]<>"Extra"][[5]]]]]<>", "<>If[maindip[[1,2]]=="RectBend",ToString[NumberRight[Abs[maindip[[1,6]]/2]+ToExpression[maindip[[1,1]]<>"Extra"][[6]]]],ToString[NumberRight[ToExpression[maindip[[1,1]]<>"Extra"][[6]]]]]<>", "<>ToString[NumberRight[Round[ToExpression[maindip[[1,1]]<>"Extra"][[12]],10^-9]]]<>", "<>ToString[NumberRight[If[ToExpression[maindip[[1,1]]<>"Extra"][[10]]>0,Round[ToExpression[maindip[[1,1]]<>"Extra"][[10]],0.01],"0"]]]<>", "<>ToString[NumberRight[If[ToExpression[maindip[[1,1]]<>"Extra"][[11]]>0,0Round[ToExpression[maindip[[1,1]]<>"Extra"][[11]],0.01],"0"]]]<>" ) ;\n",""]]&,Partition[Prepend[#,#[[1]]]&@Transpose[{Select[MADFlatten[$LATTICE],#[[2]]==="SectorBend"||#[[2]]==="RectBend"&],dipolefield,Sort@MADGetLengths[$LATTICE][[Join[Position[MADFlatten[$LATTICE],"SectorBend"],Position[MADFlatten[$LATTICE],"RectBend"]][[All,1]]-1]]}],2,1]]
],""]]


QuadBlock[injector_:True]:=Block[{(*bfieldsort,quadfield*)},
If[Length[$LATTICE]>1,
If[$quadfield==={},quadfield =Flatten[Block[{lat=#[[1]],en=#[[2]]},
If[ToExpression["Abs["<>#<>"\[LeftDoubleBracket]1,4\[RightDoubleBracket]]"]>0,
If[en==="BCEnergy",
Convert[ToExpression[""<>#<>"\[LeftDoubleBracket]1,4\[RightDoubleBracket]"]*$GammaInjector ElectronMass SpeedOfLight/ElectronCharge/Tesla/Meter,1],
Convert[ToExpression[""<>#<>"\[LeftDoubleBracket]1,4\[RightDoubleBracket]"]*$GammaLinac ElectronMass SpeedOfLight/ElectronCharge/Tesla/Meter,1]],
0] & /@ Select[MADFlatten[lat], #[[2]] === "Quadrupole"&][[All, 1]]]&/@Transpose[{Split[MADFlatten[$LATTICE],#1[[1]]=!="TCAVITY2A"&&#2[[1]]=!="TCAVITY1D"&],
If[Length[Split[MADFlatten[$LATTICE],#1[[1]]=!="TCAVITY2A"&&#2[[1]]=!="TCAVITY1D"&]]===4,
{"BCEnergy","LC12Energy","LC12Energy","BCEnergy"},
If[MemberQ[MADFlatten[$LATTICE][[All,1]],"TCAVITY2A"],
If[MemberQ[MADFlatten[$LATTICE][[All,1]],"TCAVITY1D"],{"BCEnergy","LC12Energy","BCEnergy"},{"BCEnergy","LC12Energy"}],If[MemberQ[MADFlatten[$LATTICE][[All,1]],"TCAVITY1D"],{"LC12Energy","BCEnergy"},{"BCEnergy"}]]]}]],quadfield=$quadfield];
bfieldsort=Select[Transpose[{Select[MADFlatten[$LATTICE],#[[2]]==="Quadrupole"&][[All,1]],quadfield}],Abs[#[[2]]]>0&];
StringJoin@@MapIndexed[Block[{no=#2[[1]],bndedge,offset},
If[#[[1,1,2]]=!="Quadrupole",offset=#[[1,2]];bndedge="bnd"<>#[[1,1,1]],offset=0;If[injector,bndedge="5.2",bndedge=""]];

Map[Block[{name=#[[1,1]]},
If[Length[Select[bfieldsort,#[[1]]===name&]]>0&&Abs[Select[bfieldsort,#[[1]]===name&][[1,2]]]>0,"quadrupole( "<>If[no>1,"\"bend"<>ToString[no-1]<>"\"","\"wcs\""]<>", \"z\", "<>bndedge<>"+"<>ToString[NumberRight[#[[2]]-offset-#[[1,3]]/2,10]]<>", "<>ToString[NumberRight[#[[1,3]]]]<>", "<>If[Abs[Select[bfieldsort,#[[1]]===name&][[1,2]]]>0,ToString[NumberRight[-1*Select[bfieldsort,#[[1]]===name&][[1,2]],6]],"0"]<>" ) ;\n",""]]&,Select[#,#[[1,2]]==="Quadrupole"&]]]&,Split[Select[Transpose[{MADFlatten[$LATTICE],RotateLeft[MADGetLengths[$LATTICE],0]}],#[[1,2]]==="SectorBend"||#[[1,2]]==="RectBend"||#[[1,2]]==="Quadrupole"&],#2[[1,2]]==="Quadrupole"&]],""]
]


SextBlock[]:=Block[{(*bfieldsort,quadfield*)},
If[Length[$LATTICE]>1,
If[$sextfield==={},sextfield =Flatten[Block[{lat=#[[1]],en=#[[2]]},If[ToExpression["Abs["<>#<>"\[LeftDoubleBracket]1,4\[RightDoubleBracket]]"]>0,Abs@ToExpression[#][[1, 4]],0] & /@ Select[MADFlatten[lat], #[[2]] === "Sextupole"&][[All, 1]]]&/@Transpose[{Split[MADFlatten[$LATTICE],#1[[1]]=!="TCAVITY2A"&&#2[[1]]=!="TCAVITY1D"&],
If[Length[Split[MADFlatten[$LATTICE],#1[[1]]=!="TCAVITY2A"&&#2[[1]]=!="TCAVITY1D"&]]===4,
{"BCEnergy","LC12Energy","LC12Energy","BCEnergy"},
If[MemberQ[MADFlatten[$LATTICE][[All,1]],"TCAVITY2A"],
If[MemberQ[MADFlatten[$LATTICE][[All,1]],"TCAVITY1D"],{"BCEnergy","LC12Energy","BCEnergy"},{"BCEnergy","LC12Energy"}],If[MemberQ[MADFlatten[$LATTICE][[All,1]],"TCAVITY1D"],{"LC12Energy","BCEnergy"},{"BCEnergy"}]]]}]],sextfield=$sextfield];
bfieldsort=Select[Transpose[{Select[MADFlatten[$LATTICE],#[[2]]==="Sextupole"&][[All,1]],sextfield}],Abs[#[[2]]]>0&];
StringJoin@@MapIndexed[Block[{no=#2[[1]]+1,bndedge,offset},
If[#[[1,1,2]]=!="Sextupole",offset=#[[1,2]];bndedge="bnd"<>#[[1,1,1]],offset=0;bndedge="5.2"];

Map[Block[{name=#[[1,1]]},
If[Length[Select[bfieldsort,#[[1]]===name&]]>0&&Abs[Select[bfieldsort,#[[1]]===name&][[1,2]]]>0,"sextupole( "<>If[no>1,"\"bend"<>ToString[no-1]<>"\"","\"wcs\""]<>", \"z\", "<>bndedge<>"+"<>ToString[NumberRight[#[[2]]-offset-#[[1,3]]/2,8]]<>", "<>ToString[NumberRight[#[[1,3]]]]<>", "<>If[Abs[Select[bfieldsort,#[[1]]===name&][[1,2]]]>0,(*ToString[NumberRight[-1*ToExpression["currentToField["<>#[[1,1]]<>","<>ToString[NumberRight[Select[bfieldsort,#[[1]]===name&][[1,2]]]]<>"]"],6]]*)ToString[NumberRight[Select[bfieldsort,#[[1]]===name&][[1,2]]]],"0"]<>" ) ;\n",""]]&,Select[#,#[[1,2]]==="Sextupole"&]]]&,Split[Select[Transpose[{MADFlatten[$LATTICE],RotateLeft[MADGetLengths[$LATTICE],0]}],#[[1,2]]==="SectorBend"||#[[1,2]]==="RectBend"||#[[1,2]]==="Sextupole"&],#2[[1,2]]==="Sextupole"&]],""]
]


LCAVBlock[lcav_List]:=Block[{bfieldsort,i=1},
If[Length[$LATTICE]>1,
bfieldsort=Transpose[{Select[MADFlatten[$LATTICE],#[[2]]==="LCAV"&][[All,1]],lcav}];
StringJoin@@MapIndexed[Block[{no=#2[[1]],bndedge,offset,field,phase},
If[#[[1,1,2]]=!="LCAV"&&Position[#,"LCAV"]=!={},
offset=#[[1,2]];bndedge="bnd"<>#[[1,1,1]];,
offset=0;bndedge="5.2"];

Map[Block[{name=#[[1,1]]},
{field,phase}=bfieldsort[[i,2]];i++;
"map1D_TM( "<>If[no>1,"\"bend"<>ToString[no]<>"\"","\"wcs\""]<>", \"z\", "<>bndedge<>"+"<>ToString[NumberRight[#[[2]]-offset-#[[1,3]]/2,5]]<>", \"teslacav13.gdf\",\"z\",\"Ez\","<>ToString[NumberRight[field]]<>","<>ToString[NumberRight[phase]]<>"*pi/180,2*pi*1.3e9) ;\n"]&,Select[#,#[[1,2]]==="LCAV"&]]]&,Split[Select[Transpose[{MADFlatten[$LATTICE],RotateLeft[MADGetLengths[$LATTICE],0]}],#[[1,2]]==="SectorBend"||#[[1,2]]==="RectBend"||#[[1,2]]==="LCAV"&],#2[[1,2]]==="LCAV"&]],""]
]


ScreenBlock[spacing_,startingoffset_:0]:=Block[{},If[Length[$LATTICE]>1,
StringJoin@@
MapIndexed[Block[{maindip=#[[2]],offset},
offset=If[#[[1,1]]===#[[2,1]],#[[2,2]],If[(#[[2,1,2]]=!="SectorBend"&&#[[2,1,2]]=!="RectBend"),#[[2,2]]-#[[1,2]]+#[[2,1,3]],#[[2,2]]-#[[1,2]]]];
"screen( "<>If[#2[[1]]>1,"\"bend"<>ToString[#2[[1]]-1]<>"\"","\"wcs\""]<>", \"I\","<>ToString[NumberRight[Round[startingoffset,0.01],5]]<>
If[#[[1,1]]===#[[2,1]],"",
If[(#[[2,1,2]]=!="SectorBend"&&#[[2,1,2]]=!="RectBend"),
"+bnd"<>#[[1,1,1]],
"+bnd"<>#[[1,1,1]]
]
]<>", "<>
ToString[NumberRight[offset-startingoffset,5]]<>
If[#[[1,1]]===#[[2,1]],"-bnd"<>#[[2,1,1]],
If[(#[[2,1,2]]=!="SectorBend"&&#[[2,1,2]]=!="RectBend"),
"",
"-bnd"<>#[[2,1,1]]
]
]<>","<>ToString[NumberRight[Round[spacing,0.01],5]]<>If[$WCS,",\"wcs\"",If[#2[[1]]>1,",\"bend"<>ToString[#2[[1]]-1]<>"\"",",\"wcs\""]]<>");\n"]&,Partition[Prepend[#,#[[1]]]&@Transpose[{Join[Select[MADFlatten[$LATTICE],#[[2]]==="SectorBend"||#[[2]]==="RectBend"&],MADFlatten[$LATTICE][[{-1}]]],Sort@MADGetLengths[$LATTICE][[Join[Position[MADFlatten[$LATTICE],"SectorBend"],Position[MADFlatten[$LATTICE],"RectBend"],{{-1,2}}][[All,1]]-1]]}],2,1]],""]
]


OutputBlock[text_]:=Block[{no=1},If[Length[$LATTICE]>1,
StringJoin@@MapIndexed[Block[{bndedge,offset},
If[!StringMatchQ[#[[1,1,1]],"*YAG*"]&&!StringMatchQ[#[[1,1,1]],"*OTR*"],offset=#[[1,2]];bndedge=bndedge="bnd"<>#[[1,1,1]],offset=0;bndedge="5.2"];
If[#[[1,1,2]]==="SectorBend"||#[[1,1,2]]==="RectBend",no++;];
Map[Block[{name=#[[1,1]]},
"screen( "<>If[no>1,"\"bend"<>ToString[no-1]<>"\"","\"wcs\""]<>", \"I\", "<>bndedge<>"+"<>ToString[NumberRight[#[[2]]-offset,5]]<>If[$WCS,",\"wcs\"",""]<>") ;\n"]&,Select[#,StringMatchQ[#[[1,1]],"*YAG*"]||StringMatchQ[#[[1,1]],"*OTR*"]&]]]&,Split[Select[Transpose[{MADFlatten[$LATTICE],RotateLeft[MADGetLengths[$LATTICE],0]}],#[[1,2]]==="SectorBend"||#[[1,2]]==="RectBend"||((StringMatchQ[#[[1,1]],"*YAG*"]||StringMatchQ[#[[1,1]],"*OTR*"])(*&&#[[1,2]]==="Marker"*))&],(StringMatchQ[#2[[1,1]],"*YAG*"]||StringMatchQ[#2[[1,1]],"*OTR*"])&]],""]<>text
]


OutputBlockFEL[text_]:=Block[{no=1},If[Length[$LATTICE]>1,
StringJoin@@MapIndexed[Block[{bndedge,offset},
If[!StringMatchQ[#[[1,1,1]],"*YAG*"]&&!StringMatchQ[#[[1,1,1]],"*OTR*"],offset=#[[1,2]];bndedge=bndedge="bnd"<>#[[1,1,1]],offset=0;bndedge=""];
If[#[[1,1,2]]==="SectorBend"||#[[1,1,2]]==="RectBend",no++;];
Map[Block[{name=#[[1,1]]},
"screen( "<>If[no>1,"\"bend"<>ToString[no-1]<>"\"","\"wcs\""]<>", \"I\", "<>bndedge<>"+"<>ToString[NumberRight[#[[2]]-offset,5]]<>If[$WCS,",\"wcs\"",""]<>") ;\n"]&,Select[#,StringMatchQ[#[[1,1]],"*YAG*"]||StringMatchQ[#[[1,1]],"*OTR*"]&]]]&,Split[Select[Transpose[{MADFlatten[$LATTICE],RotateLeft[MADGetLengths[$LATTICE],0]}],#[[1,2]]==="SectorBend"||#[[1,2]]==="RectBend"||((StringMatchQ[#[[1,1]],"*YAG*"]||StringMatchQ[#[[1,1]],"*OTR*"])(*&&#[[1,2]]==="Marker"*))&],(StringMatchQ[#2[[1,1]],"*YAG*"]||StringMatchQ[#2[[1,1]],"*OTR*"])&]],""]<>text
]


Clear[WriteGPTFile];
Clear[WriteGPTFileInjector];


WriteGPTFileInjector[Buncherphase_,BC1Field_,BC1Phase_,BC2Field_,BC2Phase_,lcav_,numpart_Integer,text_,opts___]:=Block[{file},
If[(NewFile/.{opts}/.{NewFile->True})===True,
file=OpenWrite["Cresting_BC.in"];
WriteString[file,
StringJoin[
HeadBlock[numpart],
BoosterBlock[Buncherphase,BC1Field,BC1Phase,BC2Field,BC2Phase],
DipoleBlock[],
QuadBlock[],
SextBlock[],
LCAVBlock[lcav],
OutputBlock["
ns = 1.0e-9 ;
dzmax = 10e-3 ;
dtmax = dzmax/c ;

screen(\"wcs\",\"I\",0.1,5.1,0.1,\"wcs\");
screen(\"wcs\",\"I\",5.2,\"wcs\");
#tout(0,6.546848972493966/vz, 1*ns,\"wcs\" ) ;
"]]];
Close[file];
Import["!cresting_BC.bat","Table"];
GetGPTdata[EmitBooster];
If[(UpdateGamma/.{opts}/.{UpdateGamma->True})===True,
$BetaInjector=avgBz[[Ordering[avgt]]][[-1]];
$GammaInjector=avgG[[Ordering[avgt]]][[-1]];
BCEnergy=Convert[($GammaInjector-1) ElectronMass SpeedOfLight^2/Mega/ElectronVolt,1];
];
]
]


WriteGPTFile[Buncherphase_,BC1Field_,BC1Phase_,BC2Field_,BC2Phase_,lcav_,numpart_Integer,text_,opts___]:=Module[{file,$FULLLATTICE,machinespacecharge,spacecharge},
$spacecharge=SpaceCharge/.{opts}/.{SpaceCharge->True};
$FULLLATTICE=MADFlatten[$LATTICE];
(*RUN GPT UP TO THE BOOSTER*)
$LATTICE={};
WriteGPTFileInjector[Buncherphase,BC1Field,BC1Phase,BC2Field,BC2Phase,lcav,numpart,text,opts];
(*Print[$GammaInjector];*)
$LATTICE=$FULLLATTICE;
If[(machinespacecharge=MachineSpaceCharge/.{opts}/.{MachineSpaceCharge->$spacecharge})=!=(spacecharge=$spacecharge),$spacecharge=machinespacecharge];
file=OpenWrite["Running_BC.in"];
WriteString[file,
StringJoin[
HeadBlock[numpart,DISTFILE],
DipoleBlock[],
QuadBlock[],
SextBlock[],
LCAVBlock[lcav],
OutputBlock[text]]];
Close[file];
Import["!Running_BC.bat","Table"];
$LATTICE=$FULLLATTICE;
$spacecharge=spacecharge;
]


WriteGPTFileInjector[Buncherphase_,BC1Field_,BC1Phase_,BC2Field_,BC2Phase_,lcav_,numpart_List,text_,opts___]:=Block[{file},
If[(NewFile/.{opts}/.{NewFile->True})===True,
file=OpenWrite["Cresting_BC.in"];
WriteString[file,
StringJoin[
HeadBlock[numpart],
BoosterBlock[Buncherphase,BC1Field,BC1Phase,BC2Field,BC2Phase],
DipoleBlock[],
QuadBlock[],
SextBlock[],
LCAVBlock[lcav],
OutputBlock["
ns = 1.0e-9 ;
dzmax = 10e-3 ;
dtmax = dzmax/c ;

screen(\"wcs\",\"I\",0.1,5.1,0.1,\"wcs\");
screen(\"wcs\",\"I\",5.2,\"wcs\");
#tout(0,6.546848972493966/vz, 1*ns,\"wcs\" ) ;
"]]];
Close[file];
Import["!cresting_BC.bat","Table"];
GetGPTdata[EmitBooster];
If[(UpdateGamma/.{opts}/.{UpdateGamma->True})===True,
$BetaInjector=avgBz[[Ordering[avgt]]][[-1]];
$GammaInjector=avgG[[Ordering[avgt]]][[-1]];
BCEnergy=Convert[($GammaInjector-1) ElectronMass SpeedOfLight^2/Mega/ElectronVolt,1];
];
]
]


WriteGPTFile[Buncherphase_,BC1Field_,BC1Phase_,BC2Field_,BC2Phase_,lcav_,numpart_List,text_,opts___]:=Module[{file,$FULLLATTICE,machinespacecharge,spacecharge},
$spacecharge=SpaceCharge/.{opts}/.{SpaceCharge->True};
$FULLLATTICE=MADFlatten[$LATTICE];
(*RUN GPT UP TO THE BOOSTER*)
$LATTICE={};
WriteGPTFileInjector[Buncherphase,BC1Field,BC1Phase,BC2Field,BC2Phase,lcav,numpart,text,opts];
(*Print[$GammaInjector];*)
$LATTICE=$FULLLATTICE;
If[(machinespacecharge=MachineSpaceCharge/.{opts}/.{MachineSpaceCharge->$spacecharge})=!=(spacecharge=$spacecharge),$spacecharge=machinespacecharge];
file=OpenWrite["Running_BC.in"];
WriteString[file,
StringJoin[
HeadBlock[numpart,DISTFILE],
DipoleBlock[],
QuadBlock[],
SextBlock[],
LCAVBlock[lcav],
OutputBlock[text]]];
Close[file];
Import["!Running_BC.bat","Table"];
$LATTICE=$FULLLATTICE;
$spacecharge=spacecharge;
]


GetGPTData[]:=Block[{},
Off[Transpose::"nmtx"];
Off[Set::"shape"];
Check[data=Import["cresting_BC_out.txt","Table"];
datanumbers=Select[Drop[data,5],Length[#]==14&&And@@Map[NumberQ[#]&,#]&];
Clear[Evaluate[Sequence@@Select[Drop[data,4],Length[#]==14&][[1]]]];
Evaluate[Map[Symbol,Select[Drop[data,4],Length[#]==14&][[1]]]]=Transpose[datanumbers];
On[Transpose::"nmtx"];
On[Set::"shape"];
Mean[x],5]
]


meanfunc[in_]:=If[Length[in]>0,Mean[in],0]


Clear[GetGPTdata]


GetGPTdata[Time]:=Block[{testdata,timedata,data},
data =If[True&&Length[$LATTICE]>1,Join[ReadList["booster_out.txt", Record],ReadList["cresting_BC_out.txt", Record]],ReadList["cresting_BC_out.txt", Record]];
GetGPTdata[Time,data];
]


GetGPTdata[Time,data_]:=Block[{testdata,timedata,timedatareal,timedatarealsorted,labels,timedatarealsort},
testdata=Rest[Split[Select[data,#=!={}&],(!StringMatchQ[#2,"time*"]&&!StringMatchQ[#2,"position*"]&&!StringMatchQ[#2,"@logo*"])&]];
labels=ImportString[Select[testdata,StringMatchQ[#[[1]],"time*"]&][[1,2]],"Table"][[1]];
timedata=Select[testdata,StringMatchQ[#[[1]],"time*"]&];
timedatareal=Map[First[ImportString[StringJoin[#],"Table"]]&,timedata];
timedatarealsorted=Partition[Drop[#,Length[labels]+2],Length[labels]]&/@(timedatarealsort=Sort[timedatareal,#1[[2]]<#2[[2]]&]);
timet=timedatarealsort[[All,2]];
If[Length[timedata]>0,
Clear[Evaluate[Sequence @@ Map[StringJoin[#,"t"]&,labels]]];
Evaluate[Map[Symbol,Map[StringJoin[#,"t"]&,labels]]] = Table[timedatarealsorted[[All,All,i]],{i,1,Length[labels]}]
]
];


GetGPTdata[Position]:=Block[{testdata,positiondata,data},
data =If[True&&Length[$LATTICE]>1,Join[ReadList["booster_out.txt", Record],ReadList["cresting_BC_out.txt", Record]],ReadList["cresting_BC_out.txt", Record]];
GetGPTdata[Position,data];
]


GetGPTdata[Position,data_]:=Block[{testdata,positiondata,positiondatareal,positiondatarealsorted,labels,positiondatarealsort},
testdata=Rest[Split[Select[data,#=!={}&],(!StringMatchQ[#2,"time*"]&&!StringMatchQ[#2,"position*"]&&!StringMatchQ[#2,"@logo*"])&]];
labels=ImportString[Select[testdata,StringMatchQ[#[[1]],"position*"]&][[1,2]],"Table"][[1]];
If[$GPTVerbose,Print[labels]];
positiondata=Select[testdata,StringMatchQ[#[[1]],"position*"]&];
positiondatareal=Map[First[ImportString[StringJoin[#],"Table"]]&,positiondata];
positiondatarealsorted=Partition[Drop[#,Length[labels]+2],Length[labels]]&/@(positiondatarealsort=Sort[positiondatareal,#1[[2]]<#2[[2]]&]);
positionp=positiondatarealsort[[All,2]];
If[Length[positiondata]>0,
Clear[Evaluate[Sequence @@ Map[StringJoin[#,"p"]&,labels]]];
Evaluate[Map[Symbol,Map[StringJoin[#,"p"]&,labels]]] = Table[positiondatarealsorted[[All,All,i]],{i,1,Length[labels]}]
]
];


GetGPTdata[Emit]:=Block[{testdata,positiondata,data},
data =Select[If[True&&Length[$LATTICE]>1,Join[Import["booster_out_emit.txt", "Table"],Import["cresting_BC_emit.txt", "Table"]],Import["cresting_BC_emit.txt", "Table"]],Length[#]>2&];
datanumbers = Select[data, Length[#] == Length[data[[1]]] && And @@ Map[NumberQ[#] &, #] &];
Clear[Evaluate[Sequence @@ data[[1]]]];
Evaluate[Map[Symbol, data[[1]]]] = Transpose[datanumbers];
];


GetGPTdata[EmitBooster]:=Block[{testdata,positiondata,data},
data =Import["cresting_BC_emit.txt", "Table"];
datanumbers = Select[data, Length[#] == Length[data[[1]]] && And @@ Map[NumberQ[#] &, #] &];
Clear[Evaluate[Sequence @@ data[[1]]]];
Evaluate[Map[Symbol, data[[1]]]] = Transpose[datanumbers];
];


GetGPTdata[]:=Block[{data,testdata,timedata,positiondata,datanumbers},
data =If[True&&Length[$LATTICE]>1,Join[ReadList["booster_out.txt", Record],ReadList["cresting_BC_out.txt", Record]],ReadList["cresting_BC_out.txt", Record]];
GetGPTdata[Time,data];
GetGPTdata[Position,data];
GetGPTdata[Emit];
]


Clear[\[Gamma]v];


\[Gamma]v[\[Gamma]_]:=(299792458 Sqrt[ (-1+\[Gamma]^2)])/ \[Gamma]


Clear[SortedData];
ClearAttributes[SortedData,Listable];
SortedData[datain_,scale_:1,offset_:0]:=Block[{},
Map[Block[{t,g,d},
{t,g,d}=Transpose[Sort[#]];
Transpose[{offset+Accumulate[Differences[Sort@Prepend[t,0]]*\[Gamma]v[g]],scale*d}]]&,datain]
]


Clear[SortedBunchLength];
ClearAttributes[SortedBunchLength,Listable];
SortedBunchLength[datain_,scale_:1,offset_:0]:=Block[{},
Map[Block[{t,g,d},
{t,g,d}=Transpose[Sort[#]];
Transpose[{offset+Accumulate[Differences[Sort@Prepend[t,0]]*\[Gamma]v[g]],scale*\[Gamma]v[g]*d}]]&,datain]
]


Clear[SortedMeanData];
ClearAttributes[SortedMeanData,Listable];
SortedMeanData[datain_,scale_:1,offset_:0]:=Block[{},
Map[Block[{t,g,d},
{t,g,d}=Map[Mean,Transpose[#],{2}];
Transpose[{offset+Accumulate[Differences[Sort@Prepend[t,0]]*\[Gamma]v[g]],scale*d}]]&,Sort[Select[datain,Length[#[[1]]]>4&],Mean[#1[[1]]]<Mean[#2[[1]]]&]]
]


Clear[SortedStandardDeviationData];
ClearAttributes[SortedStandardDeviationData,Listable];
SortedStandardDeviationData[datain_,scale_:1,offset_:0]:=Block[{},
Map[Block[{t,g,d},
{t,g,d}={Map[Mean,#[[1]]],Map[Mean,#[[2]]],Map[StandardDeviation[#]&,#[[3]]]}&[Transpose[#]];
Transpose[{offset+Accumulate[Differences[Sort@Prepend[t,0]]*\[Gamma]v[g]],scale*d}]]&,{Sort[Select[datain,Length[#[[1]]]>4&],Mean[#1[[1]]]<Mean[#2[[1]]]&]}]
]


Clear[SortedStandardDeviationBunchLength];
ClearAttributes[SortedStandardDeviationBunchLength,Listable];
SortedStandardDeviationBunchLength[datain_,scale_:1,offset_:0]:=Block[{},
Map[Block[{t,g,d},
{t,g,d}={Map[Mean,#[[1]]],Map[Mean,#[[2]]],Map[StandardDeviation[#]&,#[[3]]]}&[Transpose[#]];
Transpose[{offset+Accumulate[Differences[Sort@Prepend[t,0]]*\[Gamma]v[g]],scale*\[Gamma]v[g]*d}]]&,{Sort[Select[datain,Length[#[[1]]]>4&],Mean[#1[[1]]]<Mean[#2[[1]]]&]}]
]
