(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



fmtbinrules={"double"->"Real64","long"->"Integer32"}


$namereplacerules={"/"->""}


BeginPackage["sddsBinaryInterpret`"];


sddsBinaryInterpret::usage="sddsBinaryInterpret[\"filename\"] interprets an SDDS Binary-Formatted File";


Begin["`Private`"]


fmtbinrules={"double"->"Real64","long"->"Integer32"}


$namereplacerules={"/"->""}


parseparametertype[col_]:=If[Length[Select[StringSplit[col,{","," "}],StringMatchQ[#1,"*fixed_value=*"]&]]>0,assignparameterdata[StringCases[Select[StringSplit[col],StringMatchQ[#1,"type=*"]&],"type="~~type:(WordCharacter..)~~","...:>type][[1,1]],StringCases[Select[StringSplit[col,{","," "}],StringMatchQ[#1,"*fixed_value=*"]&],"fixed_value="~~type:((WordCharacter|"-"|WhitespaceCharacter|"\"")..):>type][[1,1]]];{},StringCases[Select[StringSplit[col],StringMatchQ[#1,"type=*"]&],"type="~~type:(WordCharacter..)~~","...:>type][[1,1]]];


parseparametername[col_]:=(StringCases[Select[StringSplit[col],StringMatchQ[#1,"name=*"]&],"name="~~name:(WordCharacter|"/")..~~","...:>StringReplace[name,$namereplacerules]][[1,1]])


parsecolumntype[col_]:=StringCases[Select[StringSplit[col],StringMatchQ[#1,"type=*"]&],"type="~~type:(WordCharacter..)~~","...:>type][[1,1]]


parsecolumnname[col_]:=StringCases[Select[StringSplit[col],StringMatchQ[#1,"name=*"]&],"name="~~name:(WordCharacter..|"/")~~","...:>StringReplace[name,$namereplacerules]][[1,1]]


Clear[sddsBinaryInterpret]


sddsBinaryInterpret[filein_String,opts___]:=Block[{file},
file=OpenRead[filein,BinaryFormat->True];
sddsBinaryInterpretFunction[file,opts];
Close[file];
]


sddsBinaryInterpret[file_InputStream,opts___]:=Block[{},
sddsBinaryInterpretFunction[file,opts];
Close[file];
]


sddsBinaryInterpret[string_String,opts___]/;StringMatchQ[string,"!*"]:=Block[{file},
sddsBinaryInterpretFunction[file=StringToStream[Import[string,"String"]],opts];
Close[file];
]


sddsBinaryInterpretFunction[file_InputStream,opts___]:=Block[{verbose,$headers={},pages=0,parametertypes,parameternames,columnnames,columntypes,prefix,append},
verbose=Global`sddsVerbose/.{opts}/.{Global`sddsVerbose->False};
prefix=Global`sddsPrefix/.{opts}/.{Global`sddsPrefix->""};
append = Global`sddsPostfix /. {opts} /. {Global`sddsPostfix -> ""};
(*file=OpenRead[filein,BinaryFormat\[Rule]True]*);

AppendTo[$headers,ans=Read[file,Record]];

While[!StringMatchQ[ans,"&data mode=* &end"],
AppendTo[$headers,ans=Read[file,Record]]
];

parametertypes=Flatten[parseparametertype[#]&/@Select[$headers,StringMatchQ[#,"&parameter*"]&]];
parameternames=prefix<>parseparametername[#]<>append&/@Select[$headers,StringMatchQ[#,"&parameter*"]&&!StringMatchQ[#,"*fixed_value*"]&];
columnnames=prefix<>parsecolumnname[#]<>append&/@Select[$headers,StringMatchQ[#,"&column*"]&];
columntypes=parsecolumntype[#]&/@Select[$headers,StringMatchQ[#,"&column*"]&];

BinaryRead[file,"Byte"];
columns=parameters={};
norows=BinaryRead[file,"Integer32"];
While[norows=!=EndOfFile,
pages++;
parameters={Sequence@@parameters,Switch[#,
"string",strlen=BinaryRead[file,"Integer32"];StringJoin@@BinaryReadList[file,"Character8",strlen],
"double",BinaryRead[file,"Real64"],
"long",BinaryRead[file,"Integer32"]
]&/@parametertypes};
columns={Sequence@@columns,If[MemberQ[columntypes,"string"],
Table[
Switch[#,
"string",strlen=BinaryRead[file,"Integer32"];StringJoin@@BinaryReadList[file,"Character8",strlen],
"double",BinaryRead[file,"Real64"],
"long",BinaryRead[file,"Integer32"]
]&/@columntypes,{norows}],
columntypesbin=columntypes/.fmtbinrules;
BinaryReadList[file,columntypesbin,norows]
]};
norows=BinaryRead[file,"Integer32"];
];
Clear[Evaluate[#]]&/@parameternames;
If[Length[Dimensions[parameters]]>1,
Evaluate[Map[Symbol,parameternames]]=Transpose[parameters];,
Evaluate[Map[Symbol,parameternames]]=parameters];
Clear[Evaluate[#]]&/@columnnames;
If[Dimensions[columns][[1]]===1,
Evaluate[Map[Symbol,columnnames]]=Transpose[Map[Transpose,columns]][[All,1]];,
Evaluate[Map[Symbol,columnnames]]=Transpose[Map[Transpose,columns]];]
(*Close[file];*)
If[verbose,
Print["Number of Pages: "<>ToString[pages]];
Print["Variables (Re)Assigned: "<>ToString[columnnames]];
Print["Parameters (Re)Assigned: "<>ToString[parameternames]]
]
]


End[]


EndPackage[]



