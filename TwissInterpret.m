(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
BeginPackage["TwissInterpret`"];


(* ::Input::Initialization:: *)
<<ASTRAInterpret`


(* ::Input::Initialization:: *)
<<sddsInterpret`


(* ::Input::Initialization:: *)
<<gdfbinaryinterpret`


(* ::Input::Initialization:: *)
TwissInterpret::usage="TwissInterpret[\"filename\"] interprets Twiss SimFrame Formatted Files (ASTRA or Elegant)";


(* ::Input::Initialization:: *)
Begin["`Private`"]


(* ::Input::Initialization:: *)
speedoflight=QuantityMagnitude[UnitConvert[Quantity["SpeedOfLight"]]];


(* ::Input::Initialization:: *)
E0eV=QuantityMagnitude[UnitConvert[Quantity["ElectronMass"]Quantity["SpeedOfLight"]^2/Quantity["ElementaryCharge"]]];


(* ::Input::Initialization:: *)
TwissInterpret[file__String,opts___Rule]:=TwissInterpret[{file},opts];
TwissInterpret[{infiles__String},opts___Rule]:=Block[{verbose,cols,prepend,append,files={},paramnames,allbetax,allbetay,alletax,allSx,allSy,alls,allecnx,allecny,allsdelta,allsz,allG},
verbose=Global`TwissVerbose/.{opts}/.{Global`TwissVerbose->False};
prepend = Global`TwissPrefix /. {opts} /. {Global`TwissPrefix -> ""};
append = Global`TwissPostfix /. {opts} /. {Global`TwissPostfix -> ""};
allbetax={};
allbetay={};
alletax={};
allSx={};
allSy={};
alls={};
allecnx={};
allecny={};
allsdelta={};
allsz={};
allG={};
If[FileExistsQ[#~~".Xemit.001"]||FileExistsQ[#~~".twi"]||FileExistsQ[#~~"_emit.gdf"],AppendTo[files,#],AppendTo[files,False]]&/@{infiles};
files=Split[files,#2=!=False&][[1]];
Which[FileExistsQ[#~~".Xemit.001"],
If[verbose,Print["Found ASTRA Twiss: ",#~~".Xemit.001"]];
{allbetax,allbetay,alletax,allSx,allSy,alls,allecnx,allecny,allsdelta,allsz,allG}=ASTRATwissInterpret[#~~".Xemit.001",{allbetax,allbetay,alletax,allSx,allSy,alls,allecnx,allecny,allsdelta,allsz,allG}],
FileExistsQ[#~~".twi"],
If[verbose,Print["Found Elegant Twiss: ",#~~".twi"]];
{allbetax,allbetay,alletax,allSx,allSy,alls,allecnx,allecny,allsdelta,allsz,allG}=ElegantTwissInterpret[#~~".twi",{allbetax,allbetay,alletax,allSx,allSy,alls,allecnx,allecny,allsdelta,allsz,allG}],
FileExistsQ[#~~"_emitt.gdf"],
If[verbose,Print["Found GPT Twiss: ",#~~"_emit.gdf"]];
{allbetax,allbetay,alletax,allSx,allSy,alls,allecnx,allecny,allsdelta,allsz,allG}=GPTTwissInterpret[#~~"_emit.gdf",{allbetax,allbetay,alletax,allSx,allSy,alls,allecnx,allecny,allsdelta,allsz,allG}]
]&/@files;
paramnames=prepend~~#~~append&/@{"betax","betay","etax","Sx","Sy","s","ecnx","ecny","Sdelta","Sz","G"};
Clear[Evaluate[StringReplace[#1,{"_"->"\[Sterling]","-"->"$"}]]]&/@paramnames;
MapThread[(Evaluate[Symbol@StringReplace[#1,{"_"->"\[Sterling]","-"->"$"}]]=#2)&,{paramnames,{allbetax,allbetay,alletax,allSx,allSy,alls,allecnx,allecny,allsdelta,allsz,allG}}];
If[verbose,
Print["Variables(s) Assigned: ",paramnames];
];
]


(* ::Input::Initialization:: *)
ASTRATwissInterpret[filename_,lists_]:=Block[{gamma,allbetax,allbetay,alletax,allSx,allSy,alls,allecnx,allecny,allsdelta,allsz,allG,beta},
{allbetax,allbetay,alletax,allSx,allSy,alls,allecnx,allecny,allsdelta,allsz,allG}=lists;
ASTRAemitInterpret[filename,ASTRAVerbose->False];
gamma=1+(10^6 Global`Ekin/E0eV);
beta=\[Sqrt](1-gamma^-2);
allG=Join[allG,gamma];
allbetax=Join[allbetax,Global`xrms^2/Global`\[Epsilon]xnorm gamma];
allbetay=Join[allbetay,Global`yrms^2/Global`\[Epsilon]ynorm gamma];
alletax=Join[alletax,Table[0,Length[Global`xrms]]];
allSx=Join[allSx,Global`xrms];
allSy=Join[allSy,Global`yrms];
allecnx=Join[allecnx,10^-6 Global`\[Epsilon]xnorm];
allecny=Join[allecny,10^-6 Global`\[Epsilon]ynorm];
allsdelta=Join[allsdelta,10^-3 Global`\[CapitalDelta]Erms/Global`Ekin];
allsz=Join[allsz,10^-3 Global`zrms/(beta speedoflight)];
alls=Join[alls,Global`z];
{allbetax,
allbetay,
alletax,
allSx,
allSy,
alls,
allecnx,
allecny,
allsdelta,
allsz,
allG}
]


(* ::Input::Initialization:: *)
GPTTwissInterpret[filename_,lists_]:=Block[{gamma,allbetax,allbetay,alletax,allSx,allSy,alls,allecnx,allecny,allsdelta,allsz,allG,offset,gpts,gptorder,gptErms,ans},
{allbetax,allbetay,alletax,allSx,allSy,alls,allecnx,allecny,allsdelta,allsz,allG}=lists;
gdfBinaryInterpret[filename,gdfVerbose->False];
allG=Join[allG,Sort[Transpose[{Global`avgtp[[1]],Global`avgGp[[1]]}],#1[[1]]<#2[[1]]&][[All,2]]];
allbetax=Join[allbetax,Sort[Transpose[{Global`avgtp[[1]],Global`CSbetaxp[[1]]}],#1[[1]]<#2[[1]]&][[All,2]]];
allbetay=Join[allbetay,Sort[Transpose[{Global`avgtp[[1]],Global`CSbetayp[[1]]}],#1[[1]]<#2[[1]]&][[All,2]]];
alletax=Join[alletax,Table[0,Length[Global`avgtp[[1]]]]];
allSx=Join[allSx,10^3 Sort[Transpose[{Global`avgtp[[1]],Global`stdxp[[1]]}],#1[[1]]<#2[[1]]&][[All,2]]];
allSy=Join[allSy,10^3 Sort[Transpose[{Global`avgtp[[1]],Global`stdyp[[1]]}],#1[[1]]<#2[[1]]&][[All,2]]];
allecnx=Join[allecnx,Sort[Transpose[{Global`avgtp[[1]],Global`nemixrmsp[[1]]}],#1[[1]]<#2[[1]]&][[All,2]]];
allecny=Join[allecny,Sort[Transpose[{Global`avgtp[[1]],Global`nemiyrmsp[[1]]}],#1[[1]]<#2[[1]]&][[All,2]]];
gptorder=Ordering[Global`avgtp[[1]]];
gptErms=Join[allecny,Sort[Transpose[{Global`avgtp[[1]],Global`avgGp[[1]]}],#1[[1]]<#2[[1]]&][[All,2]]];
allsz=Join[allsz,Sort[Transpose[{Global`avgtp[[1]],Global`stdtp[[1]]}],#1[[1]]<#2[[1]]&][[All,2]]];
allsdelta=Join[allsdelta,Global`stdGp[[1]]/Global`avgGp[[1]]];
offset=0;
gpts=If[#[[2]]<#[[1]],ans=#[[1]]+offset;offset=#[[1]]+offset;ans,#[[1]]+offset]&/@Partition[Sort[Transpose[{Global`avgtp[[1]],Global`positionp[[1]]}],#1[[1]]<#2[[1]]&][[All,2]],2,1,1];
alls=Join[alls,gpts];
{allbetax,
allbetay,
alletax,
allSx,
allSy,
alls,
allecnx,
allecny,
allsdelta,
allsz,
allG}
]


(* ::Input::Initialization:: *)
ElegantTwissInterpret[filename_,lists_]:=Block[{allbetax,allbetay,alletax,allSx,allSy,alls,allecnx,allecny,allsdelta,allsz,allG},
{allbetax,allbetay,alletax,allSx,allSy,alls,allecnx,allecny,allsdelta,allsz,allG}=lists;
sddsInterpret[filename,SDDSVerbose->False];
sddsInterpret[StringReplace[filename,{".twi"->".sig"}],SDDSVerbose->False];
sddsInterpret[StringReplace[filename,{".twi"->".flr"}],SDDSVerbose->False];
allG=Join[allG,Global`p];
allbetax=Join[allbetax,Global`betax];
allbetay=Join[allbetay,Global`betay];
alletax=Join[alletax,Global`etax];
allSx=Join[allSx,10^3 Global`Sx];
allSy=Join[allSy,10^3 Global`Sy];
allecnx=Join[allecnx,Global`ecnx];
allecny=Join[allecny,Global`ecny];
allsdelta=Join[allsdelta,Global`Sdelta];
allsz=Join[allsz,Global`St];
alls=Join[alls,Global`Z];
{allbetax,
allbetay,
alletax,
allSx,
allSy,
alls,
allecnx,
allecny,
allsdelta,
allsz,
allG}
]


(* ::Input::Initialization:: *)
End[]


(* ::Input::Initialization:: *)
EndPackage[]
