(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



Date[]


Needs["Madtomma`Mfs`Mfs`"]


Needs["Madtomma`MadLanguage`MADinput`"]


Needs["Madtomma`Mfs`OpticsUtilities`"]


Needs["Graphics`Graphics`"]


Needs["Graphics`MultipleListPlot`"]


Needs["Statistics`DescriptiveStatistics`"]


runMAD[madfile_String]:=
	Module[{cmdline="mad -new < " <>madfile},
		If[$OperatingSystem=="Unix",
		ReadList["!"<>cmdline,String],
		(Print["MAD is not available on this operating system. You need to run the command:\n",cmdline ,"\non a system where it is available."];
		Print[File/.FileInformation[madfile]/.File->"File "<>madfile<>" not found ?"];
				Null
		)
	]]


runMAD::usage="runMAD[madfile] runs MAD, taking input from madfile, returning the console output as a list of strings.  If MAD is not available, a message is printed and Null is returned.";


getOptics[madinput_,cols_List,selectspec:{_String...},fstub_String:"getOptics"]:=
	Module[
		{madfile=fstub<>".mad",
			tfsfile=fstub<>".tfs",
			printfile=fstub<>".mou",MadRC
		},
		bumpFile/@{madfile,tfsfile};
		makeMADfile[madfile,
			{"assign,print=\""<>printfile<>"\"",
				"assign,echo=\""<>printfile<>"\"",
				madinput,
				"OPTION,DOUBLE",
				("select,optics,"<># &)/@ selectspec,
				MADoptics[tfsfile,columns->cols]
			}];
			Print[TableForm[MadRC=runMAD[madfile]]];
		If[MadRC=!=Null,tfsRead[tfsfile],Null]
	]


getOptics[madinput_,cols_List,selectspec_String:"FULL",fstub_String:"getOptics"]:=getOptics[madinput,cols,{selectspec},fstub]


getOptics::usage="getOptics[madinput,cols,selectspec,fstub] returns an mfs object obtained by running MAD's OPTICS command on the machine generated by the MadInput obect madinput.\nThe argument cols specifies the columns of interest, e.g., {\"NAME\",\"BETX\"}.\nThe optional argument selectspec (default \"FULL\") is a string or list of strings defining the elements to be selected, e.g., {\"RANGE=IP2/IP3,CLASS=QUADRUPOLE\",\"CLASS=SEXTUPOLE\"}.\nThe optional argument fstub is a string controlling the naming of files created for and by MAD.";


removeDrifts[seq_mfs]:=mfsSelect[seq,(Not[StringMatchQ[mfsColumnValue[seq,#,"NAME"],"[*]"]])&];


removeDrifts::usage="removeDrifts[opt] removes all MAD-generated drift spaces from the optics opt, given as an mfs object.";


switchLineQ[madline_String]:=StringMatchQ[ToUpperCase[madline],"*ON_*:=*"]


arcQFQ[qname_String]:=
	If[StringLength[qname]>=4,
		With[{qfd=StringTake[qname,2],
				qn=StringTake[qname,{3,4}]},
			(qfd=="QF" ) && If[DigitQ[qn],ToExpression[qn]>=13,False]
		],
		False]


arcQDQ[qname_String]:=
	If[StringLength[qname]>=4,
		With[{qfd=StringTake[qname,2],
				qn=StringTake[qname,{3,4}]},
			(qfd=="QD" ) && If[DigitQ[qn],ToExpression[qn]>=13,False]
		],
		False]


betaBeatCases={{"QF","BETX"},{"QF","BETY"},{"QD","BETX"},{"QD","BETY"}}



