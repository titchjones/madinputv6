(************** Content-type: application/mathematica **************
                     CreatedBy='Mathematica 4.2'

                    Mathematica-Compatible Notebook

This notebook can be used with any Mathematica-compatible
application, such as Mathematica, MathReader or Publicon. The data
for the notebook starts with the line containing stars above.

To get the notebook into a Mathematica-compatible application, do
one of the following:

* Save the data starting with the line of stars above into a file
  with a name ending in .nb, then open the file inside the
  application;

* Copy the data starting with the line of stars above to the
  clipboard, then use the Paste menu command inside the application.

Data for notebooks contains only printable 7-bit ASCII and can be
sent directly in email or through ftp in text mode.  Newlines can be
CR, LF or CRLF (Unix, Macintosh or MS-DOS style).

NOTE: If you modify the data for this notebook not in a Mathematica-
compatible application, you must delete the line below containing
the word CacheID, otherwise Mathematica-compatible applications may
try to use invalid cache data.

For more information on notebooks and Mathematica-compatible 
applications, contact Wolfram Research:
  web: http://www.wolfram.com
  email: info@wolfram.com
  phone: +1-217-398-0700 (U.S.)

Notebook reader applications are available free of charge from 
Wolfram Research.
*******************************************************************)

(*CacheID: 232*)


(*NotebookFileLineBreakTest
NotebookFileLineBreakTest*)
(*NotebookOptionsPosition[    185876,       5550]*)
(*NotebookOutlinePosition[    191534,       5708]*)
(*  CellTagsIndexPosition[    191026,       5691]*)
(*WindowFrame->Normal*)



Notebook[{
Cell[BoxData[""], "Input"],

Cell["CERN SL Note 99-XXX  (AP)", "Text",
  TextAlignment->Right],

Cell["", "Text"],

Cell["Higher-level MAD input", "Title"],

Cell[TextData[{
  ButtonBox["John M. Jowett.",
    ButtonData:>{
      URL[ "http://wwwslap.cern.ch/~jowett/"], None},
    ButtonStyle->"Hyperlink"],
  " , Rachel T. Burgess\n1/10/1997, Latest Revision 8/5/2002 "
}], "Author"],

Cell[TextData[{
  "Working on AFS.  Attempting to make this compatible with MADX via an \
option of ",
  StyleBox["MADcommand", "Input"],
  ".  Saved a copy  of previous version dated 5/2/2002 in case this becomes \
too messy.."
}], "SmallText"],

Cell[CellGroupData[{

Cell["Introduction", "Section"],

Cell[TextData[{
  "This note documents a ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " [",
  ButtonBox["1",
    ButtonData:>"Wolfram book",
    ButtonStyle->"Hyperlink"],
  ",",
  ButtonBox["2",
    ButtonData:>"Maeder book",
    ButtonStyle->"Hyperlink"],
  "] package that implements objects corresponding to the commands of the  ",
  ButtonBox["MAD",
    ButtonData:>{
      URL[ "http://wwwslap.cern.ch/~fci/mad/mad.html"], None},
    ButtonStyle->"Hyperlink"],
  " input language.  It allows the user to generate instructions for MAD at a \
higher level using the power of ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  ". "
}], "Text"],

Cell["\<\
Later in the note, two non-trivial applications of this package \
will be given:\
\>", "Text"],

Cell["\<\
Quick and easy insertion of a number of beam-beam elements \
representing parasitic encounters into the LEP sequence.  Some of these occur \
inside magnets which must be split at arbitrary points using the MAD sequence \
editor.  Anybody who has constructed such a sequence editor script knows how \
tedious and error-prone the process can be.\
\>", "Text",
  CellDingbat->"\[FivePointedStar]",
  CellMargins->{{84, Inherited}, {Inherited, Inherited}}],

Cell["\<\
An interactive interface to MAD's tracking allowing \"point and \
click\" definition of initial conditions on a phase-space plot and many kinds \
of analysis of the tracked orbits.\
\>", "Text",
  CellDingbat->"\[FivePointedStar]",
  CellMargins->{{84, Inherited}, {Inherited, Inherited}}],

Cell["\<\
In more general terms, the use of this higher-level interface to \
MAD has a number of advantages:\
\>", "Text"],

Cell["\<\
Some MAD input files are difficult or tedious to prepare by hand.  \
See the first application.\
\>", "Text",
  CellDingbat->"\[FilledDiamond]",
  CellMargins->{{84, Inherited}, {Inherited, Inherited}}],

Cell[TextData[{
  "Since the ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " code defining the implementation of the MAD language is very small, it is \
easily changed to reflect changes in MAD syntax.  The functions in the \
package are presently defined for MAD Version 8.18 onwards.  It should be \
rather easy to upgrade it to accommodate any further  changes to the MAD 8 \
language or the transition to MAD 9."
}], "Text",
  CellDingbat->"\[FilledDiamond]",
  CellMargins->{{84, Inherited}, {Inherited, Inherited}}],

Cell["\<\
Complicated problems can be structured better.  Instead of saving a \
MAD file, one can save a multiply-nested  list of  MADInput objects or simply \
 a function which generates them.  See the second application example.\
\>", \
"Text"],

Cell[TextData[{
  "Within the ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " environment, MAD calculations may be just a part of some other \
calculation where the emphasis is not on the optics of a machine.  The \
technical business of running MAD need not loom so large in the conceptual \
view of a problem.  It is easy to write functions which  generate input, run \
MAD itself and return values.  ",
  StyleBox["  ",
    FontSlant->"Italic"],
  "Such a function might just be one term in a physical formula embedded in \
the natural language text of a notebook. "
}], "Text",
  CellDingbat->"\[FilledDiamond]",
  CellMargins->{{84, Inherited}, {Inherited, Inherited}}],

Cell[TextData[{
  "The objects representing the MAD instructions can be processed in other \
ways inside ",
  StyleBox["Mathematica.",
    FontSlant->"Italic"]
}], "Text",
  CellDingbat->"\[FilledDiamond]",
  CellMargins->{{84, Inherited}, {Inherited, Inherited}}],

Cell[TextData[{
  "In future, MAD9 will provide a framework in which users can add their own \
modules for new calculations written in C++.   This will require expertise, \
discipline and effort.  If these are not available or not deemed worthwhile \
in a given case, the programming might never get done.  Since programming in \
the interactive ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " environment is easier and faster (for some of us, at least), it might \
provide an alternative approach.   It could also serve as a prototyping  \
environment for something later coded in a compiled language."
}], "Text",
  CellDingbat->"\[FilledDiamond]",
  CellMargins->{{84, Inherited}, {Inherited, Inherited}}],

Cell[TextData[{
  "This present description shows the basic building blocks and a few simple \
examples only.  Only  a fraction of the MAD input language (corresponding to \
rather common needs) has been implemented in the package so far.  However ",
  StyleBox["any MAD input file can still be constructed ",
    FontSlant->"Italic"],
  "since any  commands that have not yet  been implemented in the package can \
be specified directly at any point.  This package will certainly evolve to \
encompass a greater fraction of the MAD input language and has been designed \
with this in mind."
}], "Text"],

Cell[TextData[{
  "The package described here does not in itself deal with the process of \
getting results back from MAD into ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  ".  Other packages REF TO MFS  etc exist to facilitate this and their use \
will be illustrated later."
}], "Text"],

Cell["\<\
Having done it countless times myself over the years, I am aware \
that a scripting language or a good text editor can go some way towards the \
generation of complicated MAD input files.  Within CERN, this approach has a \
long history, starting with Wylbur \"Execs\" and with scripts written in \
languages like Rexx and Perl.  However, I find the present approach \
preferable since it deals more closely with physical  or mathematical objects \
than the syntax of text files in a computer.\
\>", "Text"],

Cell[TextData[{
  "This packags and others relating to the use of ",
  ButtonBox["MAD"],
  " are available in the context ",
  StyleBox["Madtomma", "Input"],
  "  (the word context is used in a special sense in Mathematica).  "
}], "Text"],

Cell[TextData[{
  "Paragraphs or sections marked with a warning sign, ",
  StyleBox["\[WarningSign],",
    FontSize->20],
  " contain material that is more technical or not essential for most \
applications  and can be skipped in a first reading.  Material that is \
flagged with two such signs, ",
  StyleBox["\[WarningSign]\[WarningSign],",
    FontSize->20],
  " is the  implementation of the package itself and is only of interest if \
you want to know how it works.  Such material is generally hidden in printed \
versions."
}], "Text"],

Cell[CellGroupData[{

Cell["Structure of this notebook", "Subsection"],

Cell[TextData[{
  "This notebook adheres to the conventions for ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " package structure and documentation set out in [2].  As such it serves as \
the development medium for the package itself.  ",
  StyleBox["For this reason , some sections of the printed versions of this \
document are hidden.  ",
    FontWeight->"Bold"],
  "They contain the definitions (\"code\") of the functions.  The visible \
sections contain the documentation and examples of interest to users."
}], "Text"],

Cell[TextData[{
  "To make the package available, you need only copy a couple of commands \
from the \"Setup\" section.  The ",
  ButtonBox["\"Examples\"",
    ButtonData:>"Examples section",
    ButtonStyle->"Hyperlink"],
  " section illustrates basic use of the package.  A final section \
illustrating some less useful features is hidden."
}], "Text"],

Cell["The latest version is available on-line at", "Text"],

Cell[TextData[ButtonBox["http://wwwslap.cern.ch/~jowett/Madtomma/",
  ButtonData:>{
    URL[ "http://wwwslap.cern.ch/~jowett/Madtomma/"], None},
  ButtonStyle->"Hyperlink"]], "Program"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
  StyleBox["\[WarningSign]",
    FontSize->20],
  " ",
  "Technical remarks"
}], "Subsection"],

Cell[TextData[{
  "This implementation of the MAD language is very similar to the relation \
between high-level graphics command (like ",
  StyleBox["Plot3D", "Input"],
  ") and the graphics primitives in ",
  StyleBox["Mathematica. ",
    FontSlant->"Italic"],
  "A high-level command generates a list of graphics primitives (like ",
  StyleBox["Line", "Input"],
  ", ",
  StyleBox["Polygon", "Input"],
  ") which are converted to Postscript by the graphics renderer.   Similarly, \
a high level command here can generate a list of ",
  "MADInput",
  " objects (one might call them \"MAD primitives\" if that did not sound \
cheeky) that are converted into a stream of explicit MAD commands that can be \
interpreted by MAD itself."
}], "Text"],

Cell[TextData[{
  "A ",
  "MADInput",
  " object such as ",
  StyleBox["MADoptics", "Input"],
  " is defined by the action of the function ",
  StyleBox["MADcommand", "Input"],
  " on it, i.e., by its \"UpValues\" in the sense of ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  ".  This is analogous to the effect of ",
  StyleBox["Show[Graphics[..]]", "Input"],
  " on a ",
  StyleBox["Line", "Input"],
  " or ",
  StyleBox["Polygon", "Input"],
  " object."
}], "Text"],

Cell["\<\
The MAD Version 8 language is itself a programming language, \
containing procedural constructs such as basic DO loops and subroutines so \
some of the things that might be done with the MADInput package could be done \
using these. MAD Version 9 will replace these with improved constructs but I \
think it fair to say that the approach followed in the present package will \
allow the user to go far beyond what is possible in the MAD9 language.\
\>", \
"Text"],

Cell["\<\
Anyone familiar with the principles and terminology of \
Object-Oriented Programming will be able to describe what goes on here in \
those terms.  So I won't press the point.\
\>", "Text"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
  StyleBox["\[WarningSign]",
    FontSize->20],
  " ",
  "Reference"
}], "Section",
  CellTags->"Reference section"],

Cell[CellGroupData[{

Cell["Title", "Subsubsection"],

Cell[TextData[StyleBox["Higher-level MAD input",
  FontSlant->"Italic"]], "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Author", "Subsubsection"],

Cell["John M. Jowett, Rachel T. Burgess", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Summary", "Subsubsection"],

Cell["\<\
This notebook is a template for package and notebook development.\
\
\>", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Copyright", "Subsubsection"],

Cell[TextData[{
  "\[Copyright] ",
  ButtonBox["Copyright CERN.1997",
    ButtonData:>{
      URL[ 
      "http://www.cern.ch/CERN/Divisions/DSU/Legal/Notices/Copyright.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n\nThe copyright and all other rights relating to this computer software, \
in whatever form, including but not limited to the source code, the object \
code and user documentation, are vested in CERN. \n\nCERN, on a royalty-free \
and non-exclusive basis, hereby grants permission to use, copy, change, \
modify, translate, display, distribute and make available this computer \
software, subject to the following conditions:\n\n(1) this computer software \
is provided on an as-is basis and CERN provides no express or implied \
warranties of any kind, including but not limited to those of \
merchantability, fitness for a particular purpose and non-infringement of the \
proprietary rights, such as copyrights, patents and trade secrets, of third \
parties. CERN accepts no liability whatsoever for or in connection with the \
use of this computer software; \n\n(2) all copies made of this computer \
software or of parts thereof shall include  his copyright statement in full; \
\n\n(3) however, if this computer software or parts thereof are made \
available in any other form than their original form, or are included in any \
other computer software, the following short acknowledgement only must be \
mentioned in the copyright statement and in the user documentation (or, in \
the absence thereof, in any other appropriate place) concerning the computer \
software thus made available or created: \n\n\"This product includes computer \
software created and made available by CERN. This acknowledgement shall be \
mentioned in full in any product which includes the CERN computer software \
included herein or parts thereof.\" "
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Notebook Version", "Subsubsection"],

Cell["1.7", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " Version"
}], "Subsubsection"],

Cell["3.0 or later", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["History", "Subsubsection"],

Cell["\<\
Version 1.0, from ideas developed in InteractiveTracking and \
CollisionSchedule notebooks.\
\>", "Text"],

Cell["\<\
Version 1.1, with MADassign, MADset and MADsetDelayed.  Some bugs \
to be ironed out, mainly related to quotes.\
\>", "Text"],

Cell["\<\
Version 1.2, fixed problem with quotes being left in on right hand \
sides of MAD commands involving MADrule.\
\>", "Text"],

Cell["\<\
Version 1.3, added MADstartAA command, to allow definition of \
initial conditions in terms of action angle coordinates.\
\>", "Text"],

Cell["Version 1.4 5/2/2002, added MADtag, MADsystem.", "Text"],

Cell["\<\
Version 1.5 8/7/2002, added MADuse, MADtwiss for MADX, improved \
MADrule, MADselect.   MADtwiss probably does not work for MAD8.
Version 1.6 20/7/2002added misalignments, selection of monitors and \
correctors for orbit correction.
Version 1.7 29/10/2002 MADselect drastically revised to simplify, same for \
other selection commands, MADuse, etc.\
\>", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Keywords", "Subsubsection"],

Cell["MAD  Mfs  language tracking optics", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Warnings", "Subsubsection"],

Cell[TextData[StyleBox["description of global effects, incompatibilities",
  FontSlant->"Italic"]], "Text"],

Cell["\<\
Note: all cells marked as \"InitializationCell\" will be written to \
the Auto-Save package. Cells not intended to belong to the package should not \
have this property.\
\>", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Limitation", "Subsubsection"],

Cell[TextData[StyleBox["special cases not handled, known problems",
  FontSlant->"Italic"]], "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Discussion", "Subsubsection"],

Cell[TextData[StyleBox["description of algorithm, information for experts",
  FontSlant->"Italic"]], "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Requirements", "Subsubsection"],

Cell[TextData[StyleBox["\"JMJUtils`BumpEtc`\"", "Input"]], "Text"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Setup", "Section",
  CellTags->"Setup section"],

Cell[TextData[{
  "This section contains commands needed to load the corresponding package \
file.  The contents of this file are equivalent to the following sections \
(Interface, Implementation, Epilog) in which the package is developed.  These \
sections are hidden when this notebook is used as the package documentation \
but may be inspected in the online copy of this notebook that can be found in \
the appropriate  sub-directory of the directory added to the ",
  StyleBox["$Path", "Input"],
  " variable below."
}], "Text"],

Cell[CellGroupData[{

Cell["Search Path (ESSENTIAL!)", "Subsection",
  CellTags->"Setup section"],

Cell["\<\
To have access to my packages, you may need to add my packages \
directory to your search path.  This is system-dependent and the latest \
information about arranging it on CERN computer systems can be found at\
\>", \
"Text"],

Cell[TextData[{
  ButtonBox["http://cern.ch/jowett/Madtomma/AboutFiles.htm",
    ButtonData:>{
      URL[ "http://cern.ch/jowett/Madtomma/AboutFiles.html"], None},
    ButtonStyle->"Hyperlink"],
  "l"
}], "Program"],

Cell[TextData[{
  "and is not reproduced here.  I strongly recommend that you modify your \
kernel initialisation file once and for all as explained on this page.  Then \
all my packages will be found as easily as the Standard Packages that come \
with ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  "."
}], "Text",
  CellTags->"Setup section"],

Cell[CellGroupData[{

Cell["Read in the Package", "Subsubsection"],

Cell[TextData[{
  "Once the package directory is on your search path, the ",
  StyleBox["Mfs", "Input"],
  " package can be loaded by evaluating the following cell. ",
  StyleBox["If you are using a copy of this notebook in order to work through \
the examples and you are invited to  evaluate all the initialisation cells in \
it, you should click \"NO\" and then go straight to the ",
    FontSlant->"Italic",
    FontColor->RGBColor[1, 0, 0]],
  StyleBox["\"",
    FontSlant->"Italic"],
  StyleBox[ButtonBox["User's Guide and Examples",
    ButtonData:>"Examples section",
    ButtonStyle->"Hyperlink"],
    FontSlant->"Italic"],
  StyleBox["\" ",
    FontSlant->"Italic"],
  StyleBox["without evaluating the intermediate sections.",
    FontSlant->"Italic",
    FontColor->RGBColor[1, 0, 0]]
}], "Text",
  CellTags->"Setup section"],

Cell[TextData[{
  StyleBox["Needs[", "Input"],
  "\"Madtomma`MadLanguage`",
  "MADInput",
  "`\"",
  StyleBox["]", "Input"]
}], "Input"],

Cell["\<\
This is all you need to start using the package in your own \
applications.\
\>", "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
  StyleBox["\[WarningSign]\[WarningSign]",
    FontSize->20],
  " ",
  "Interface"
}], "Section",
  InitializationCell->True,
  CellTags->"Interface section"],

Cell["\<\
This part declares the publicly  visible functions, options, and \
values.\
\>", "Text",
  InitializationCell->True,
  CellTags->"Interface section"],

Cell[CellGroupData[{

Cell["Set up the package context, including public imports", "Subsection",
  InitializationCell->True,
  CellTags->"Interface section"],

Cell[CellGroupData[{

Cell[BoxData[
    RowBox[{
      StyleBox["BeginPackage",
        "Input"], 
      StyleBox["[",
        "Input"], \("\<Madtomma`MadLanguage`MADInput`\>", \
"\<JMJUtils`BumpEtc`\>"\), 
      StyleBox["]",
        "Input"]}]], "Input",
  InitializationCell->True],

Cell[BoxData[
    \("Madtomma`MadLanguage`MADInput`"\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Usage messages for the exported functions and the context \
itself\
\>", "Subsection",
  InitializationCell->True,
  CellTags->"Interface section"],

Cell["\<\
MADInput::usage = \"MADInput.m is a package defining objects \
corresponding to elements of the MAD input language.\";\
\>", "Input",
  InitializationCell->True,
  CellTags->"Interface section"],

Cell[BoxData[
    \(\(MADcommand::usage = "\<MADcommand[mlist] converts the MADInput \
objects in mlist to corresponding MAD command strings. If mlist is a string \
then it is simply reproduced.  Note its option MADXsyntax.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(makeMADfile::usage = "\<makeMADfile[\"filename\",mlist] converts  the \
MADInput objects in mlist to a MAD input file.  If filename exists, a copy is \
saved before it is overwritten.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADcomment::usage = "\<MADcomment[string] is a MADInput object \
representing a comment.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADtag::usage = "\<MADtag[tagtext,madinput] is a MADInput object \
representing a structured comment wrapped around a MADInput object.\>";\)\)], \
"Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADtagNaked::usage = "\<MADtagNaked is an option of MADtag.  If True \
structure comments are not generated; the default is False.\>";\)\)], "Input",\

  InitializationCell->True],

Cell[BoxData[
    \(\(MADtitle::usage = "\<MADtitle[string] is a MADInput object \
representing a title.\>";\)\)], "Input",
  InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?MADtwiss\)\)], "Input"],

Cell[BoxData[
    \("\<MADtwiss[filename,sequence,{columns},{{elementSelection1},{ \
elementSelection2},...},{twissOptions}] is a MAD input object that creates a  \
TFS file containing the results of a TWISS calculation on the named sequence. \
\n{columns} is typically {\"NAME\",\"S\",\"BETX\"}.\n Each {elementSelection} \
 should be a valid element selection for the MADselect function.\n\
twissOptions  can be any other valid options of MAD's TWISS command given in \
forms like,  e.g., \"BETX\"->20.,\"DELTAP\"->{-0.001,0.001,0.0002}, \
\"CENTRE\"->\"True\".\n Quotation marks around the variables on the LHS and \
RHS of a rule like \"BETX \"->99.2 are strongly recommended.  They are \
essential when ValueQ[BETX] is  True or for logical values.\>"\)], "Print",
  GeneratedCell->False,
  CellAutoOverwrite->False,
  CellTags->"Info3246200723-8101007"]
}, Open  ]],

Cell[BoxData[
    \(\(MADtwiss::usage = \
"\<MADtwiss[filename,sequence,{columns},{{elementSelection1},{\
elementSelection2},...},{surveyOptions}] is a MAD input object that creates a \
TFS file containing the results of a TWISS calculation on the named sequence.\
\n{columns} is typically {\"NAME\",\"S\",\"BETX\"}.\n Each {elementSelection} \
should be a valid element selection for the MADselect function.\ntwissOptions \
can be any other valid options of MAD's TWISS command given in forms like, \
e.g., \"BETX\"->20.,\"DELTAP\"->{-0.001,0.001,0.0002}, \"CENTRE\"->\"True\".\n\
Quotation marks around the variables on the LHS and RHS of a rule like \"BETX\
\"->99.2 are strongly recommended.  They are essential when ValueQ[BETX] is \
True or for logical values.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \({\*"\\\"" NAME \*"\\\"", \*"\\\"" S \*"\\\"", \*"\\\"" 
        L \*"\\\"", \*"\\\"" ANGLE \*"\\\"", \*"\\\"" X \*"\\\"", \*"\\\"" 
        Y \*"\\\"", \*"\\\"" Z \*"\\\"", \*"\\\"" THETA \*"\\\"", \*"\\\"" 
        PHI \*"\\\"", \*"\\\"" PSI \*"\\\""}\)], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(ToString@{"\<NAME\>", "\<S\>", "\<L\>", "\<ANGLE\>", "\<X\>", "\<Y\>", \
"\<Z\>", "\<THETA\>", "\<PHI\>", "\<PSI\>"} // InputForm\)], "Input"],

Cell["\"{NAME, S, L, ANGLE, X, Y, Z, THETA, PHI, PSI}\"", "Output"]
}, Open  ]],

Cell[BoxData[
    \(\(MADsurvey::usage = \
"\<MADsurvey[filename,sequence,{columns},{{elementSelection1},{\
elementSelection2},...},{twissOptions}] is a MAD input object that creates a \
TFS file containing the results of a SURVEY (geometry) calculation on the \
named sequence.\n{columns} is a subset of {\"NAME\",\"S\",\"L\",\"ANGLE\",\"X\
\",\"Y\",\"Z\",\"THETA\",\"PHI\",\"PSI\"}.\n Each {elementSelection} should \
be a valid element selection for the MADselect function.\nsurveyOptions can \
be any other valid options of MAD's TWISS command given in forms like, e.g., \
\"X0\"->\"20.\",\"THETA0\"->\"PI/2\".\nQuotation marks around the variables \
on the LHS and RHS of a rule like \"X0\"->\"20.\" are strongly recommended.  \
They are essential when ValueQ[X0] is True or for logical values.\>";\)\)], \
"Input",
  InitializationCell->True],

Cell[BoxData[
    RowBox[{
      RowBox[{\(MADtwissColumns::usage\), "=", 
        "\"\<\!\(InputForm\`MADtwissColumns\)[tag] returns convenient sets of \
columns for MADtwiss; to find out what is available use ??MADtwissColumns or \
domain[MADtwissColumns]; you can define further sets.\>\""}], ";"}]], "Input",\

  InitializationCell->True],

Cell[BoxData[
    RowBox[{
      RowBox[{\(MADsurveyColumns::usage\), "=", 
        "\"\<\!\(InputForm\`MADsurveyColumns\)[tag] returns convenient sets \
of columns for MADsurvey; to find out what is available use ??MADtwissColumns \
or domain[MADtwissColumns]; you can define further sets.\>\""}], 
      ";"}]], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MAD8NamesCorrected::usage = "\<MAD8NamesCorrected is an option of \
MADtwissColumns.  When True, it specifies that the inconsistent MAD8 names \
for optics tables are to be corrected (\"X\" replaced by \"XC\", etc.).\>";\)\
\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADstart::usage = "\<MADstart[x,px,y,py,t,pt] is a MADInput object \
representing an initial condition for tracking specified in terms of absolute \
particle positions.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADstartN::usage = "\<MADstart[Fx,phix,Fy,phiy,Ft,phit] is a MADInput \
object representing an initial condition for tracking specified in terms of \
normalised particle positions.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADstartAA::usage = "\<MADstart[Ix,phix,Iy,phiy,It,phit] is a \
MADInput object representing an initial condition for tracking specified in \
terms of action angle coordinates of the particle.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADrun::usage = "\<MADrun[turns] is a MADInput object defining \
tracking for a given number of turns.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADtrack::usage = "\<MADtrack[trackcmds,options] is a MADInput object \
representing the tracking of the initial conditions  (usually MADstart \
objects) and number of turns  (usually MADrun objects) defined in \
trackcmds.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(Damp::usage = "\<Damp is an option for MADtrack which specifies \
whether radiation damping is to be switched on.  The default is \
Damp->False.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(OnePass::usage = "\<OnePass is an option for MADtrack which specifies \
whether tracking is to be for a single turn.  The default is \
OnePass->False.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(Quantum::usage = "\<Quantum is an option for MADtrack which specifies \
whether tracking is to be done with quantum fluctuations.  The default is \
Quantum->False.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(Deltap::usage = "\<Deltap is an option for MADtrack which specifies a \
momentum error on the TRACK command itself.  The default is none. N.B. this \
option is not used in some versions of MAD.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADarchive::usage = "\<MADarchive[tbl,\"filename\"]is a MADInput \
object representing the saving of a MAD table in a file called filename.  The \
table type tbl can be TRACK, EIGEN, TWISS, etc.  It is safer to put it in \
quotes.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADnewElement::usage = \
"\<MADnewElement[newel,{oldel,attrib1->val1,attrib2->val2}] defines a new \
element on the basis of an old one (or a \"class\" in MAD) with new values \
for some of its attributes.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADpoolLoad::usage = "\<MADpoolLoad[\"filename\"] is a MADInput \
object representing the loading of a pool file.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADpoolDump::usage = "\<MADpoolDump[\"filename\"] is a MADInput \
object representing the saving of a pool file.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADsystem::usage = "\<MADsystem[\"cmd\"] is a MADInput object \
representing an external system command.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADuse::usage = "\<MADuse[sequence] or MADuse[sequence,MADrange[...]] \
is a MADInput object representing MAD's USE command for a beam line or \
sequence. An optional argument MADrange[] can be given to restrict the range \
of elements provided that s2>s1 (see MADrange).\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADoptics::usage = \
"\<MADoptics[\"filename\",columns->{\"col1\",\"col1\",...}] is a MADInput \
object representing the generation of an OPTICS table file.\>";\)\)], "Input",\

  InitializationCell->True],

Cell[BoxData[
    \(\(MADcall::usage = "\<MADcall[\"filename\"] is a MADInput object \
representing the switch to an alternative input file.\>"\ ;\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADseqedit::usage = "\<MADseqedit[sequence,edits] is a MADInput \
object representing a complete sequence-editor script where edits is a list \
of MADInput objects corresponding the editing operations.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADinstall::usage = \
"\<MADinstall[newelement,AT->svalue,FROM->element] is a MADInput object \
representing an INSTALL command in the sequence-editor.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADremove::usage = "\<MADremove[element] is a MADInput object \
representing an REMOVE command in the sequence-editor.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADcycle::usage = "\<MADcycle[seq,el] is a MADinput object \
representing the cycling of a sequence to move its starting point to the \
element el.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADreflect::usage = "\<MADreflect[seq] is a MADinput object \
representing the reflection of a sequence.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADset::usage = "\<MADset[var,val] is a MADInput object representing \
a SET of the variable var to the value val.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADassign::usage = "\<MADassign[var,val] is a MADInput object \
representing the assignment (=)  of the value val to the variable \
var.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADsetDelayed::usage = "\<MADsetDelayed[var,val] is a MADInput object \
representing the delatyed assignment (:=)  of the value val to the variable \
var.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADXsyntax::usage = "\<MADXsyntax is an option of MADcommand that \
causes MAD commands to be generated with the syntax of MADX rather than the \
default MAD8.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADselect::usage = "\<MADselect[flag,{sel1,sel2,...}] is a MADInput \
object representing the MAD SELECT command, where sel1, sel2 are MAD \
selection objects (see MADclass, MADrange, MADpattern, MADfull, MADclear). \
Element selections are defined by  the first valid selection object of a \
given type, all taken together.  Further occurrences are ignored.  \nThe form \
MADselect[flag,{{sel11,sel12,..},{sel21,sel22,...}} generates multiple \
selections and the form MADselect[flag,sel] is equivalent to \
MADselect[flag,{sel}].\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADuseMonitor::usage = "\<MADuseMonitor[switch,selectopts] is a \
MADInput object representing the MAD USEMONITOR command.  Switch should be \
True or False and selected monitors must satisfy all of the selectopts. These \
are similar to those of MADselect except that the FULL and CLEAR selections \
are not allowed.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADuseKick::usage = "\<MADuseKick[switch,selectopts] is a MADInput \
object representing the MAD USEMONITOR command.  Switch should be True or \
False and selected correctors must satisfy all of the selectopts. These are \
similar to those of MADselect except that the FULL and CLEAR selections are \
not allowed.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADselectionQ::usage = "\<MADselectionQ[sel] returns True if sel can \
be considered a valid selection option for MADselect.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADrange::usage = "\<MADrange[el1] or MADrange[{el1,el2}]  or \
MADrange[{{el1,s1},{el2,s2}}] is a MADInput object that can be used to \
specify a single element or a range or elements in MADselect (or similar) \
commands; if s2<s1 in the last form of the command a range overlapping the \
start/end of the ring sequence will be generated.  The arguments el1, el2 \
must be strings.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADclass::usage = "\<MADrange[class] is a MADInput object that can be \
used to specify a single element or a range or elements in a MADselect \
command.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADpattern::usage = "\<MADpattern[patt] is a MADInput object that can \
be used to specify selection pattern in a MADselect command.  The argument is \
a regular expression string in the limited sense used in MAD, typed exactly \
as in a MAD input file, e.g., MADpattern[\"MQ\\.*\"].\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADclear::usage = "\<MADclear[] is a MADInput object that can be used \
to specify clearing the selection in a MADselect command.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADfull::usage = "\<MADfull[] is a MADInput object that can be used \
to specify the selection of everything in a MADselect command.\>";\)\)], \
"Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADealign::usage = "\<MADealign[{\[Delta]x,\[Delta]y,\[Delta]s},{\
\[Delta]\[Phi],\[Delta]\[Theta],\[Delta]\[Psi]},{MREX,MREY},{MSCALX,MXCALY}] \
is a MadInput object corresponding to MAD's EALIGN command. Arguments may be \
omitted on the right at either level, e.g. MADealign[{1},{0},{2}] corresponds \
to the MAD command EALIGN,DX=1,MREX=2;\>";\)\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["Error messages for the exported objects", "Subsection",
  InitializationCell->True,
  CellTags->"Interface section"],

Cell["MADInput::badarg = \"You called `1` with argument `2`!\";", "Input",
  InitializationCell->True,
  CellTags->"Interface section"],

Cell[BoxData[
    \(\(MADrange::invalid = "\<Invalid range specification `1`\>";\)\)], \
"Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADselect::unused = "\<Invalid or redundant selection objects\n`1`\n\
are being ignored.\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADuse::cycling = "\<Range `1` overlaps end of machine. It is \
probably necessary to cycle sequence `2` to start at `3`.\>";\)\)], "Input",
  InitializationCell->True]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
  StyleBox["\[WarningSign]\[WarningSign]",
    FontSize->20],
  " ",
  "Implementation"
}], "Section",
  InitializationCell->True,
  CellTags->"Implementation section"],

Cell["\<\
This part contains the actual definitions and any auxiliary \
functions that should not be visible outside.\
\>", "Text",
  CellTags->"Implementation section"],

Cell[CellGroupData[{

Cell["Begin the private context (implementation part)", "Subsection",
  InitializationCell->True,
  CellTags->"Implementation section"],

Cell[CellGroupData[{

Cell["Begin[\"`Private`\"]", "Input",
  InitializationCell->True,
  CellTags->"Implementation section"],

Cell[BoxData[
    \("Madtomma`MadLanguage`MADInput`Private`"\)], "Output"]
}, Open  ]]
}, Closed]],

Cell["Read in any hidden imports", "Subsection",
  InitializationCell->True,
  CellTags->"Implementation section"],

Cell[CellGroupData[{

Cell["\<\
Definition of auxiliary  functions and local (static) \
variables\
\>", "Subsection",
  InitializationCell->True,
  CellTags->"Implementation section"],

Cell[CellGroupData[{

Cell[TextData[{
  "MAD analogue of ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " ",
  StyleBox["rule", "Text"]
}], "Subsubsection",
  CellTags->"Implementation section"],

Cell[TextData[{
  "The StringReplace operation on the right hand side of the rule allows for \
lists  of MAD names  (e.g\n ",
  StyleBox["COLUMN->{\"NAME\",\"BETX\"}", "Input"],
  " )."
}], "Text"],

Cell["The order of these rules is important.", "Text"],

Cell[BoxData[{
    \(\(MADrule[] = "\<\>";\)\), "\[IndentingNewLine]", 
    \(\(MADrule[{}] = "\<\>";\)\)}], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADrule[a_ /; AtomQ[a] && \(! NumberQ[a]\) \[Rule] b_?StringQ] := 
      ToUpperCase[ToString[a]] <> "\<=\>" <> b\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADrule[a_ /; \((AtomQ[a] && \(! NumberQ[a]\))\) \[Rule] b_Symbol] := 
      MADrule[a, ToString[b]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADrule[a_ /; \((AtomQ[a] && \(! NumberQ[a]\))\) \[Rule] b_?NumberQ] := 
      MADrule[a \[Rule] ToString[FortranForm[b]]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADrule[a_ /; \((AtomQ[a] && \(! NumberQ[a]\))\) \[Rule] b_List] := 
      MADrule[a \[Rule] 
          StringReplace[
            ToString[
              FortranForm[
                N[b]]], {"\<List(\>" \[Rule] "\<\>", "\<)\>" \[Rule] "\<\>", \
"\<\"\>" \[Rule] "\<\>"}]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADrule[a_ /; \((AtomQ[a] && \(! NumberQ[a]\))\) \[Rule] b_] := 
      MADrule[a \[Rule] ToString[FortranForm[b]]]\)], "Input",
  InitializationCell->True],

Cell[TextData[{
  "Make it recursive to deal with sequences of rules (N.B. this is not the \
same as making it ",
  StyleBox["Listable", "Input"],
  ")."
}], "Text",
  InitializationCell->True],

Cell[BoxData[
    \(MADrule[r_Rule, rs__Rule] := 
      MADrule[r] <> "\<,\>" <> MADrule[rs]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADrule[rl_List] := 
      StringReplace[
        ToString[
          MADrule /@ 
            rl], {"\<{\>" \[Rule] "\<\>", "\<}\>" \[Rule] "\<\>"}]\)], "Input",\

  InitializationCell->True],

Cell["Matching up lists of rules", "Text"],

Cell["\<\
Used, e.g. in MADealign.  Allows for some element of a list being \
missing.\
\>", "Text"],

Cell[BoxData[
    \(whileRules[lhss_List, xys_List] := 
      Module[{maxl = Min[Length /@ {xys, lhss}]}, 
        MapThread[Rule, {Take[lhss, maxl], Take[xys, maxl]}]]\)], "Input",
  InitializationCell->True]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Definition of the exported functions", "Subsection",
  InitializationCell->True,
  CellTags->"Implementation section"],

Cell[TextData[{
  "Define the MADInput objects by the action of MADcommand on them (via their \
",
  StyleBox["UpValues", "Input"],
  ").  The names of the following subsection mimic those in the MAD manual."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Options[MADcommand] = {MADXsyntax \[Rule] False}\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \({MADXsyntax \[Rule] False}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Comments and titles", "Subsubsection"],

Cell["MAD8 comment syntax is OK for MADX.", "Text"],

Cell[BoxData[
    \(MADcommand[
        MADcomment[c_String]] ^:= {"\<! \>" <> 
          ToString[c] <> "\<;\>"}\)], "Input",
  InitializationCell->True],

Cell["\<\
MAD8  does not allow titles that are too long.  Truncate to avoid \
problems with MADstringbreak.  Added 6/12/2001.\
\>", "Text"],

Cell["\<\
This is how to arrange options in functions that work with \
UpValues, see Wagner p. 177 for useful hints even though he doesn't explain \
this.\
\>", "Text"],

Cell[BoxData[
    \(MADtitle /: MADcommand[MADtitle[c_String], opts___?OptionQ] := 
      Module[{madxs}, \[IndentingNewLine]madxs = \(MADXsyntax /. 
              Flatten[{opts}]\) /. 
            Options[MADcommand]; \[IndentingNewLine]{"\< \>", "\<TITLE,\"\>" \
<> \[IndentingNewLine]If[
              madxs || StringLength[c] < 
                  75, \[IndentingNewLine]c, \[IndentingNewLine]StringTake[
                ToString[c], 
                75]\[IndentingNewLine]] <> "\<\";\>"}\[IndentingNewLine]]\)], \
"Input",
  InitializationCell->True],

Cell["\<\
This is a good idea: it wraps the sections of MAD jobs in \
pseudo-XML tags.  It may be used to group what are logically composite \
commands. Provide MADtagNaked option for those who don't like that.\
\>", \
"Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Options[MADtag] = {MADtagNaked \[Rule] False}\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \({MADtagNaked \[Rule] False}\)], "Output"]
}, Open  ]],

Cell[BoxData[
    \(MADcommand[MADtag[tag_, madin_, opts___?OptionQ]] ^:= 
      Module[{nkd}, \[IndentingNewLine]nkd = \(MADtagNaked /. 
              Flatten[{opts}]\) /. Options[MADtag]; \[IndentingNewLine]If[
          nkd, \[IndentingNewLine]MADcommand[
            madin], \[IndentingNewLine]MADcommand[{"\<\>", 
              MADcomment["\<<\>" <> tag <> "\<>\>"], madin, 
              MADcomment["\<</\>" <> 
                  tag <> "\<>\>"], "\<\>"}]\[IndentingNewLine]]\
\[IndentingNewLine]]\)], "Input",
  InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["Setting and assigning MAD variables and parameters", "Subsubsection"],

Cell["\<\
Try allowing the variable name to be a symbol  or a string.  If \
this does not work use var_String\
\>", "Text"],

Cell[BoxData[
    \(MADset /: MADcommand[MADset[var_, value_], opts___?OptionQ] := 
      Module[{madxs}, 
        madxs = \(MADXsyntax /. \[InvisibleSpace]Flatten[{opts}]\) \
/. \[InvisibleSpace]Options[MADcommand]; 
        If[madxs, 
          MADcommand[MADassign[var, value]], "\<SET,\>" <> 
            ToString[var] <> "\<,\>" <> 
            ToString[value] <> "\<;\>"]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADcommand[MADassign[var_, value_]] ^:= 
      ToString[var] <> "\<=\>" <> ToString[value] <> "\<;\>"\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADcommand[MADsetDelayed[var_, value_]] ^:= 
      ToString[var] <> "\<:=\>" <> ToString[value] <> "\<;\>"\)], "Input",
  InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["Physical elements and markers", "Subsubsection"],

Cell["Define a new element based on an old one or a class", "Text"],

Cell[BoxData[
    \(MADcommand[MADnewElement[newel_, {el_, newval__Rule}]] ^:= 
      ToString[newel] <> "\<: \>" <> ToString[el] <> "\<,\>" <> 
        MADrule[newval] <> "\<;\>"\)], "Input",
  InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["Beam lines and sequences", "Subsubsection"],

Cell[BoxData[
    \(MADseqedit /: 
      MADcommand[
        MADseqedit[seq_, edits_]] := {\n\t\t"\<seqedit,sequence=\>" <> 
          ToString[seq] <> "\<;\>", \n\t\tMADcommand[
          edits], \n\t\t"\<endedit;\>"\n\t}\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADcommand[
        MADinstall[el_, 
          rules__Rule]] ^:= \(("\<install,element=\>" <> 
            ToString[el] <> "\<,\>" <> 
            MADrule[rules])\) <> "\<;\>"\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADcommand[
        MADremove[
          el_]] ^:= \(("\<remove,element=\>" <> 
            ToString[el])\) <> "\<;\>"\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADcycle /: MADcommand[MADcycle[seq_String, el_String]] := 
      MADcommand[
        MADtag["\<Cycle \>" <> seq <> "\< to move start point to \>" <> 
            el, \[IndentingNewLine]\((MADseqedit[
              seq, "\<CYCLE,start=\>" <> el])\)]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADreflect /: MADcommand[MADreflect[seq_String]] := 
      MADcommand[
        MADtag["\<Reflect \>" <> 
            seq, {MADseqedit[seq, "\<REFLECT\>"]}]]\)], "Input",
  InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["Selection of various kinds", "Subsubsection"],

Cell[TextData[{
  "The SELECT command is the same in ",
  ButtonBox["MAD8",
    ButtonData:>{
      URL[ "http://hansg.home.cern.ch/hansg/mad/mad8/user/new_select.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  " and ",
  ButtonBox["MADX",
    ButtonData:>{
      URL[ 
      "http://hansg.home.cern.ch/hansg/Xdoc/control/general.html#select"], 
      None},
    ButtonStyle->"Hyperlink"],
  ".  However in MADX the COLUMNS selection for TWISS tables is done on the \
SELECT command unlike MAD8 where it is done on the OPTICS command. So we need \
to be able to handle lists like ",
  StyleBox["{\"BETX\",\"DX\"}", "Input"]
}], "Text"],

Cell[TextData[{
  "Actually we don't.  I sem to have made the decision to limit MADselect to \
",
  StyleBox["element selection",
    FontSlant->"Italic"],
  " only.  The selection of columns for a TWISS is done with the MADtwiss  \
function."
}], "Text"],

Cell[BoxData[
    \( (*\ Old\ version\  - \ to\ delete\[IndentingNewLine]MADselect /: 
        MADcommand[MADselect[flag_, opts___?OptionQ]] := 
        Module[{selopts}, \[IndentingNewLine]"\<SELECT,FLAG=\>" <> 
            ToString[flag] <> "\<,\>" <> 
            MADrule[opts]\[IndentingNewLine]]\[IndentingNewLine]*) \)], \
"Input",
  InitializationCell->True],

Cell["\<\
It is convenient to have a predicate that tests for all the \
possible ways to give a MAD selection, that will work with MADselect\
\>", \
"Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADselectionHeads = {MADclear, MADclass, MADfull, MADrange, MADpattern, 
        madSelectSplit}\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \({MADclear, MADclass, MADfull, MADrange, MADpattern, 
      madSelectSplit}\)], "Output"]
}, Open  ]],

Cell[BoxData[
    \(MADselectionQ[sel_] := MemberQ[MADselectionHeads, Head[sel]]\)], "Input",\

  InitializationCell->True],

Cell[BoxData[
    \( (*\ MADselectionQ[
          sel : \((_MADclear | _MADclass | _MADfull | _MADrange | \
_MADpattern)\)] := True\ *) \)], "Input"],

Cell[BoxData[
    \( (*\ MADselectionQ[sel_Rule] := 
        MemberQ[{"\<CLASS\>", "\<RANGE\>", "\<PATTERN\>"}, \ 
          First[sel]]\ *) \)], "Input"],

Cell[BoxData[
    \( (*\ MADselectionQ[] = True; 
      MADselectionQ["\<CLEAR\>"] = True\ *) \)], "Input"],

Cell["\<\
Use an \"internal\" version of MADcommand since these are only \
parts of MAD statements.\
\>", "Text"],

Cell[BoxData[
    \(\(madcommand[MADrange[el1_String]] ^:= "\<RANGE=\>" <> 
          el1;\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(madcommand[MADrange[{el1_String, el2_String}]] ^:= "\<RANGE=\>" <> 
          el1 <> "\</\>" <> el2;\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADrange[{{el1_String, s1_?NumberQ}, {el2_String, s2_?NumberQ}} /; 
            s2 \[GreaterEqual] s1] := MADrange[{el1, el2}];\)\)], "Input",
  InitializationCell->True],

Cell["\<\
Do not use madcommand here.  It makes the implementation of \
MADselect  easier.\
\>", "Text"],

Cell[BoxData[
    \(\(MADrange[{{el1_String, s1_?NumberQ}, {el2_String, s2_?NumberQ}} /; 
            s2 < s1] := 
        madSelectSplit[MADrange[{el1, "\<#E\>"}], 
          MADrange[{"\<#S\>", el2}]];\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(madcommand[MADclass[cl_String]] ^:= "\<CLASS=\>" <> cl;\)\)], "Input",\

  InitializationCell->True],

Cell["\<\
Patterns are a little tricky.  We would like to type  a pattern in \
exactly the same way as in raw MAD input.   Otherwise the user has to \
understand to include quoted quotation marks and doubled backslashes as in:\
\
\>", "Text"],

Cell["\<\
 So we need to add explicit quotation marks and deal with backslash \
characters.  At first I thought this would need this first form but in fact \
it doesn't.\
\>", "Text"],

Cell[BoxData[
    \(\(madcommand[MADpattern[patt_String]] ^:= "\<PATTERN=\>" <> "\<\"\>" <> 
          patt <> "\<\"\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(madcommand[MADclear[]] ^:= "\<CLEAR\>"\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(madcommand[MADfull[]] ^:= "\<RANGE=#S/#E\>"\)], "Input",
  InitializationCell->True],

Cell[TextData[{
  "Special cases should come first to make sure that MADrule never applies to \
things like \"FULL\" or MADclear[] (which satisfy the MADselectionQ  test).   \
 Annoying that MAD has this inconsistent syntax.\nUse a rule pattern rather \
than ",
  StyleBox["OptionQ", "Input"],
  " which does not work when the LHS of the rule is a string, as it needs to \
be for e.g.,\n ",
  StyleBox["\"RANGE\"->\"IP1/IP2\"", "Input"],
  "  (obsolete).\n1/10/2002: redefining MADfull so that we never use the \
\"FULL\" syntax.\n25/10/2002: fresh implementation of MADselect to avoid the \
pseudso-rules altogether.   Restrict it to work only with the 5 types of \
object in MADselectionHeads"
}], "Text"],

Cell[BoxData[
    \( (*\ old\ stuff\ \[IndentingNewLine]MADselect /: 
        MADcommand[MADselect[flag_, opts___Rule]] := 
        Module[{selopts}, "\<SELECT,FLAG=\>" <> ToString[flag] <> "\<,\>" <> 
            MADrule[opts] <> "\<;\>"]; \n
      MADselect /: MADcommand[MADselect[flag_, sel_?MADselectionQ]] := 
        Module[{selopts}, "\<SELECT,FLAG=\>" <> ToString[flag] <> "\<,\>" <> 
            MADcommand[sel] <> "\<;\>"]\ \[IndentingNewLine]*) \)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADselect /: MADcommand[MADselect[flag_, sel_?MADselectionQ]] := 
        MADcommand[MADselect[flag, {sel}]];\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADselect /: MADcommand[MADselect[flag_, {}]] := 
        MADcommand[MADselect[flag, MADclear[]]];\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADselect /: 
      MADcommand[MADselect[flag_, {a___, madSelectSplit[r1_, r2_], b___}]] := 
      MADcommand /@ {MADselect[flag, {a, r1, b}], 
          MADselect[flag, {a, r2, b}]}\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADselect /: MADcommand[MADselect[flag_, sell : {__?MADselectionQ}]] := 
      Module[{selsep}, 
        selsep = \(\(\(\(\({{}, 
                        sell} /. \[InvisibleSpace]{{x___}, {a___, 
                            MADclass[y_String], b___}} \[Rule] {{x, 
                            MADclass[y]}, {a, 
                            b}}\) /. \[InvisibleSpace]{{x___}, {a___, 
                          MADpattern[y_String], b___}} \[Rule] {{x, 
                          MADpattern[y]}, {a, 
                          b}}\) /. \[InvisibleSpace]{{x___}, {a___, 
                        MADrange[y_String], b___}} \[Rule] {{x, 
                        MADrange[y]}, {a, 
                        b}}\) /. \[InvisibleSpace]{{x___}, {a___, 
                      MADrange[{y1_String, y2_String}], b___}} \[Rule] {{x, 
                      MADrange[{y1, y2}]}, {a, 
                      b}}\) /. \[InvisibleSpace]{{x___}, {a___, MADfull[], 
                    b___}} \[Rule] {{x, MADfull[]}, {a, 
                    b}}\) /. \[InvisibleSpace]{{x___}, {a___, MADclear[], 
                  b___}} \[Rule] {{x, MADclear[]}, {a, b}}; 
        If[Last[selsep] \[NotEqual] {}, 
          Message[MADselect::"\<redundant\>", Last[selsep]]]; 
        StringJoin[
          Flatten[{"\<SELECT,FLAG=\>", 
              ToString[flag], \(({"\<,\>", madcommand[#1]} &)\) /@ 
                First[selsep], "\<;\>"}]]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADselect /: 
        MADcommand[
          MADselect[flag_, 
            selll : {{__?
                      MADselectionQ} .. }]] \
:= \[IndentingNewLine]\(MADcommand[MADselect[flag, #]] &\) /@ 
          selll;\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADselect /: 
        MADcommand[
          MADselect[flag_, 
            specialword_ /; ToUpperCase[specialword] == "\<FULL\>"]] := 
        MADcommand[
          MADselect[flag, MADrange[{"\<#S\>", "\<#E\>"}]]];\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADselect /: 
      MADcommand[
        MADselect[flag_, 
          specialword_ /; 
            ToUpperCase[specialword] == "\<CLEAR\>"]] := "\<SELECT,FLAG=\>" <> 
        ToString[flag] <> "\<,CLEAR;\>"\)], "Input",
  InitializationCell->True],

Cell["\<\
The commands for switching orbit correctors and monitors on and off \
are very similar to SELECT, so implement them here with modified copies of \
the MADselect code.  If MADselect is ever modified, check whether there \
should be similar modifications to these. They  do not take the FULL and \
CLEAR arguments.\
\>", "Text"],

Cell[BoxData[
    \( (*\ old\ stuff\ \[IndentingNewLine]MADuseMonitor /: 
        MADcommand[
          MADuseMonitor[switch_ /; switch \[Element] Booleans, opts___Rule]] := 
        Module[{selopts}, "\<USEMONITOR,STATUS=\>" <> 
            If[switch, "\<ON\>", "\<OFF\>"] <> "\<,\>" <> 
            MADrule[opts] <> "\<;\>"]; \n\[IndentingNewLine]MADuseMonitor /: 
        MADcommand[
          MADuseMonitor[switch_ /; switch \[Element] Booleans, 
            opts : {__Rule}]] := 
        MADcommand[\((MADuseMonitor[switch, #] &)\) /@ 
            opts]; \[IndentingNewLine]\[IndentingNewLine]MADuseMonitor /: 
        MADcommand[
          MADuseMonitor[switch_ /; switch \[Element] Booleans, opts_]] := 
        MADcommand[
          MADuseMonitor[switch, MADcommand[opts]]]; \[IndentingNewLine]\n
      MADuseKick /: 
        MADcommand[
          MADuseKick[switch_ /; switch \[Element] Booleans, opts___Rule]] := 
        Module[{selopts}, "\<USEKICK,STATUS=\>" <> 
            If[switch, "\<ON\>", "\<OFF\>"] <> "\<,\>" <> 
            MADrule[opts] <> "\<;\>"]; \n\n
      MADuseKick /: 
        MADcommand[
          MADuseKick[switch_ /; switch \[Element] Booleans, 
            opts : {__Rule}]] := 
        MADcommand[\((MADuseKick[switch, #] &)\) /@ 
            opts]; \n\[IndentingNewLine]MADuseKick /: 
        MADcommand[MADuseKick[switch_ /; switch \[Element] Booleans, opts_]] := 
        MADcommand[
          MADuseKick[switch, 
            MADcommand[opts]]];\[IndentingNewLine]*) \)], "Input",
  FontSize->10],

Cell[BoxData[
    \(\(MADuseMonitor /: 
        MADcommand[
          MADuseMonitor[switch_ /; switch \[Element] Booleans, 
            sel_?MADselectionQ]] := 
        MADcommand[MADuseMonitor[switch, {sel}]];\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADuseMonitor /: 
      MADcommand[
        MADuseMonitor[
          switch_ /; switch \[Element] Booleans, {a___, 
            madSelectSplit[r1_, r2_], b___}]] := 
      MADcommand /@ {MADuseMonitor[switch, {a, r1, b}], 
          MADuseMonitor[switch, {a, r2, b}]}\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADuseMonitor /: 
      MADcommand[
        MADuseMonitor[switch_ /; switch \[Element] Booleans, 
          sell : {__?MADselectionQ}]] := 
      Module[{selsep}, \[IndentingNewLine]selsep = \(\(\({{}, 
                    sell} /. \[InvisibleSpace]{{x___}, {a___, 
                        MADclass[y_String], b___}} \[Rule] {{x, 
                        MADclass[y]}, {a, 
                        b}}\) /. \[InvisibleSpace]{{x___}, {a___, 
                      MADpattern[y_String], b___}} \[Rule] {{x, 
                      MADpattern[y]}, {a, 
                      b}}\) /. \[InvisibleSpace]{{x___}, {a___, 
                    MADrange[y_String], b___}} \[Rule] {{x, MADrange[y]}, {a, 
                    b}}\) /. \[InvisibleSpace]{{x___}, {a___, 
                  MADrange[{y1_String, y2_String}], b___}} \[Rule] {{x, 
                  MADrange[{y1, y2}]}, {a, b}}; \[IndentingNewLine]If[
          Last[selsep] \[NotEqual] {}, 
          Message[MADselect::"\<redundant\>", Last[selsep]]]; 
        StringJoin[
          Flatten[{"\<USEMONITOR\>", \(({"\<,\>", madcommand[#1]} &)\) /@ 
                First[selsep], "\<,STATUS=\>", 
              If[switch, "\<ON\>", "\<OFF\>"], "\<;\>"}]]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADuseMonitor /: 
        MADcommand[
          MADuseMonitor[switch_ /; switch \[Element] Booleans, 
            selll : {{__?
                      MADselectionQ} .. }]] \
:= \[IndentingNewLine]\(MADcommand[MADuseMonitor[switch, #]] &\) /@ 
          selll;\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADuseKick /: MADcommand[MADuseKick[x__]] := 
      Map[StringReplace[#, "\<USEMONITOR\>" -> "\<USEKICK\>"] &, 
        MADcommand@MADuseMonitor[x], \(-1\)]\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["Beam line expansion ", "Subsubsection"],

Cell["\<\
This  seems OK for both MAD8 and MADX.  Remember that it serves to \
expand out the sequence.  \
\>", "Text"],

Cell["\<\
When the MADrange object is of a form known to span the end of the \
sequence and which will have been splict by MADrange, the sequence should \
have been cycled appropriately. so give a warning.  Note that this relies on \
a special form of the evaluation of MADrange.\
\>", "Text"],

Cell[BoxData[
    \( (*\ this\ gives\ too\ much\ trouble\ in\ too\ many\ places, \ 
      especially\ for\ LHCmodules\ \[IndentingNewLine]MADuse /: 
        MADcommand[
          MADuse[period_String, 
            madSelectSplit[MADrange[{el1_String, _}], 
              MADrange[{_, el2_String}]]]] := \((Message[
            MADuse::"\<cycling\>", {el1, el2}, period, el1]; 
          MADcommand[
            MADtag["\<Automatic cycling of sequence by MADuse\>", \
{MADcommand[{MADcycle[period, el1], 
                    MADuse[period, 
                      MADrange[{el1, 
                          el2}]]}]}]])\)\[IndentingNewLine]*) \)], "Input"],

Cell[BoxData[
    \(MADuse /: 
      MADcommand[
        MADuse[period_String, 
          madSelectSplit[MADrange[{el1_String, _}], 
            MADrange[{_, el2_String}]]]] := \((Message[
          MADuse::"\<cycling\>", {el1, el2}, period, el1]; 
        MADcommand[
          MADtag["\<MADuse: has the sequence been cycled to \>" <> 
              el1 <> "\< ?\>", {MADcommand[
                MADuse[period, MADrange[{el1, el2}]]]}]])\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADuse /: 
        MADcommand[
          MADuse[period_String, 
            MADrange[
              rng : {_String, _String}]]] \
:= \[IndentingNewLine]StringJoin["\<USE,PERIOD=\>", period, "\<,\>", 
          madcommand[MADrange[rng]], "\<;\>"];\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADuse /: MADcommand[MADuse[period_String]] := 
        StringJoin["\<USE,PERIOD=\>", period, "\<;\>"];\)\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["Optics calculations", "Subsubsection"],

Cell["\<\
The following was developed for MADX.   It should also work as a \
better OPTICS command for MAD8 but this may require some more work.
Implementation of the TWISS command includes the asociated SELECT statements \
that are required for MADX.  They are really a way to specify  options for \
TWISS.  This leads to a somewhat complicated set of arguments but this \
implementation is much more consistent than that in the MADX language.  \
\
\>", "Text"],

Cell["\<\
I also wanted to include the USE command in madTwiss but this does \
not allow for things that have to be done between USE and TWISS, e.g., error \
assignments.   So always remember to do a MADuse before MADtwiss.\
\>", \
"SmallText"],

Cell["\<\
The implementation of the BEAM command in MADX is confusing.  In \
reality it is a complicated way to specify  attributes of a sequence.  To \
make the output clear we include the SHOW statement for the sequence.\
\>", \
"Text"],

Cell["\<\
The main definition allows for several SELECT statements that add \
further sets of elements to the selection (so it  is a doubly-nested list).  \
The second definition allows the user to give a single-level list when he \
only wants to specify a single set of elements.   The last one takes care of \
the case where no additional TWISS options are given.\
\>", "Text"],

Cell[TextData[{
  "There has to be at least one selection option to select some kind of \
element.  This helps to ensure that the TFS output file can be converted to a \
complete ",
  StyleBox["mfs", "Input"],
  " object."
}], "Text"],

Cell[TextData[{
  "The initial design did not enclose the additional \"options\" for TWISS ",
  StyleBox["twopts", "Input"],
  " in a list.  I decided to do this so that a set of such options (typically \
initial values for optical functions) could be conveniently kept  in a \
variable.  I then had to use ",
  StyleBox["Apply", "Input"],
  " with ",
  StyleBox["MADrule", "Input"],
  "."
}], "Text"],

Cell["\<\
I also made the mistake of including the \"COLUMN\"->cols inside \
the MADselect.  This weird inconsistency of MADX causes problems with the \
\"FULL\" and \"CLEAR\" selections.  Hence do not treat it with MADselect but \
we are forced to do something ugly to patch it onto the SELECT command.\
\>", \
"Text"],

Cell["\<\
30/9/2002 Adding MAD8  case: have to do both TWISS and OPTICS to be \
sure we have table for MAD  plotting  and TFS file.\
\>", "Text"],

Cell[BoxData[
    \( (*\ old\ version\ \[IndentingNewLine]\(MADtwiss /: 
            MADcommand[
              MADtwiss[filename_String, seq_String, cols : {_String .. }, 
                selectopts : {{__?MADselectionQ} ... }, twopts : {___Rule}]] := 
            If[MADXsyntax /. 
                Options[
                  MADcommand], \[IndentingNewLine]Module[{twoptstr}, \
\[IndentingNewLine]twoptstr = 
                  MADrule @@ Flatten[{twopts}]; \[IndentingNewLine]twoptstr = 
                  If[StringLength[twoptstr] > 0, "\<,\>" <> 
                      twoptstr, "\<\>"]; \[IndentingNewLine]MADcommand[
                  MADtag[\(("\<MADtwiss for sequence: \>" <> 
                        seq <> "\<, making file: \>" <> 
                        filename)\), \[IndentingNewLine]{"\<SHOW,BEAM%\>" <> 
                        seq, \[IndentingNewLine]MADselect["\<TWISS\>", 
                        MADclear[]], \
\[IndentingNewLine]\((\[IndentingNewLine]\(StringReplace[\[IndentingNewLine]\
MADcommand[MADselect["\<TWISS\>", 
                                    Sequence @@ #]], \
\[IndentingNewLine]"\<;\>" -> "\<,\>"] \
<> \[IndentingNewLine]MADrule["\<COLUMN\>" \[Rule] cols] &\) /@ 
                          selectopts\[IndentingNewLine])\), \
\[IndentingNewLine]"\<TWISS,SEQUENCE=\>" <> seq <> "\<,file=\"\>" <> 
                        filename <> "\<\"\>" <> 
                        twoptstr}\[IndentingNewLine]]]\[IndentingNewLine]], \
\[IndentingNewLine]Module[{}, \[IndentingNewLine]MADcommand[
                  MADtag[\(("\<MADtwiss for sequence: \>" <> 
                        seq <> "\<, making file: \>" <> 
                        filename)\), \[IndentingNewLine]{"\<SHOW,BEAM\>", \
\[IndentingNewLine]MADselect["\<OPTICS\>", 
                        MADclear[]], \[IndentingNewLine]MADcommand[
                        MADselect["\<OPTICS\>", 
                          Sequence @@ 
                            Flatten[
                              selectopts]]], \[IndentingNewLine]MADoptics[
                        filename, 
                        Sequence @@ 
                          Flatten[{"\<COLUMNS\>" \[Rule] cols, 
                              twopts}]], \
\[IndentingNewLine]"\<TWISS,SAVE=twiss,\>" <> 
                        MADrule[
                          twopts]\[IndentingNewLine]}\[IndentingNewLine]]]\
\[IndentingNewLine]]\[IndentingNewLine]];\)\[IndentingNewLine]*) \)], "Input",\

  InitializationCell->True,
  FontSize->10],

Cell[BoxData[
    \(\(MADtwiss /: 
        MADcommand[
          MADtwiss[filename_String, seq_String, cols : {_String .. }, 
            selectopts : {{__?MADselectionQ} ... }, twopts : {___Rule}]] := 
        If[MADXsyntax /. 
            Options[MADcommand], \[IndentingNewLine]Module[{twoptstr}, \
\[IndentingNewLine]twoptstr = 
              MADrule @@ Flatten[{twopts}]; \[IndentingNewLine]twoptstr = 
              If[StringLength[twoptstr] > 0, "\<,\>" <> 
                  twoptstr, "\<\>"]; \[IndentingNewLine]MADcommand[
              MADtag[\(("\<MADtwiss for sequence: \>" <> 
                    seq <> "\<, making file: \>" <> 
                    filename)\), \[IndentingNewLine]{"\<SHOW,BEAM%\>" <> 
                    seq, \[IndentingNewLine]MADselect["\<TWISS\>", 
                    MADclear[]], \
\[IndentingNewLine]\((Map[\[IndentingNewLine]StringReplace[#, "\<;\>" -> "\<,\
\>" <> \[IndentingNewLine]MADrule["\<COLUMN\>" \[Rule] cols]] &, 
                      MADcommand[
                        MADselect["\<TWISS\>", 
                          selectopts]], \(-1\)]\[IndentingNewLine])\), \
\[IndentingNewLine]StringJoin[
                    Flatten[{"\<TWISS,SEQUENCE=\>", seq, "\<,file=\"\>", 
                        filename, "\<\"\>", 
                        twoptstr}]]}\[IndentingNewLine]]]\[IndentingNewLine]],\
 \[IndentingNewLine]Module[{}, \[IndentingNewLine]MADcommand[
              MADtag[\(("\<MADtwiss for sequence: \>" <> 
                    seq <> "\<, making file: \>" <> 
                    filename)\), \[IndentingNewLine]{"\<SHOW,BEAM\>", \
\[IndentingNewLine]MADselect["\<OPTICS\>", 
                    MADclear[]], \[IndentingNewLine]MADcommand[
                    MADselect["\<OPTICS\>", 
                      selectopts]], \[IndentingNewLine]MADoptics[filename, 
                    Sequence @@ 
                      Flatten[{"\<COLUMNS\>" \[Rule] cols, 
                          twopts}]], \[IndentingNewLine]StringJoin[
                    Flatten[{"\<TWISS,SAVE=twiss\>", \({"\<,\>", 
                              MADrule[#]} &\) /@ 
                          twopts}]]\[IndentingNewLine]}\[IndentingNewLine]]]\
\[IndentingNewLine]]\[IndentingNewLine]];\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADtwiss[filename_String, seq_String, cols : {_String .. }, 
          selectopts : {__?MADselectionQ}, twopts : \({___Rule} : {}\)] := 
        MADtwiss[filename, seq, cols, {selectopts}, twopts];\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADtwiss[filename_String, seq_String, cols : {_String .. }, 
          selectopts_] := 
        MADtwiss[filename, seq, cols, selectopts, {}];\)\)], "Input",
  InitializationCell->True],

Cell["Pre-packaged sets of columns for TWISS", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Options[
        MADtwissColumns] = {MAD8NamesCorrected \[Rule] False}\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \({MAD8NamesCorrected \[Rule] False}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(\(MADtwissColumns["\<Classic\>"] = {"\<NAME\>", "\<S\>", "\<BETX\>", \
"\<BETY\>", "\<ALFX\>", "\<ALFY\>", "\<DX\>", "\<DPX\>", "\<X\>", "\<PX\>", "\
\<Y\>", "\<PY\>", "\<MUX\>", "\<MUY\>"};\)\(\[IndentingNewLine]\)
    \)\), "\n", 
    \(\(\(MADtwissColumns["\<Basic\>"] = {"\<NAME\>", "\<KEYWORD\>", "\<S\>", \
"\<BETX\>", "\<BETY\>", "\<MUX\>", "\<MUY\>", "\<DX\>", "\<X\>", \
"\<Y\>"};\)\(\n\)
    \)\), "\[IndentingNewLine]", 
    \(\(\(MADtwissColumns["\<Orbit\>"] = {"\<NAME\>", "\<S\>", "\<X\>", "\<PX\
\>", "\<Y\>", "\<PY\>", "\<T\>", "\<PT\>"};\)\(\[IndentingNewLine]\)
    \)\), "\n", 
    \(\(\(MADtwissColumns["\<Strength\>"] = {"\<NAME\>", "\<S\>", "\<L\>", \
"\<K0L\>", "\<K1L\>", "\<K2L\>", "\<K3L\>", \
"\<K4L\>"};\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(MADtwissColumns[x_] = {"\<NAME\>", "\<S\>"}\)}], "Input",
  InitializationCell->True],

Cell[BoxData[
    \({"NAME", "S"}\)], "Output"]
}, Open  ]],

Cell[BoxData[
    \(MADtwissColumns[tag_String, opts___?OptionQ] := 
      Module[{m8corr}, \[IndentingNewLine]m8corr = \(MAD8NamesCorrected /. 
              Flatten[{opts}]\) /. 
            Options[MAD8NamesCorrected]; \[IndentingNewLine]tc = 
          MADtwissColumns[tag]; \[IndentingNewLine]If[m8corr, 
          tc /. {"\<X\>" \[Rule] "\<XC\>", "\<PX\>" \[Rule] "\<PXC\>", \
"\<Y\>" \[Rule] "\<YC\>", "\<PY\>" \[Rule] "\<PYC\>", "\<T\>" \[Rule] \
"\<TC\>", \[IndentingNewLine]"\<DELTAP\>" \[Rule] "\<PTC\>"}, \
\[IndentingNewLine]tc]\[IndentingNewLine]]\)], "Input",
  InitializationCell->True],

Cell["\<\
Note that the following allows all the optional arguments of MAD8's \
  OPTICS command (DELTAP, initial values of optical functions, etc.). \
\>", \
"Text"],

Cell["\<\
OPTICS is only valid for MAD8.  In MADX,  OPTICS is replaced by \
TWISS with a file argument and the column selection has to be done in a \
preceding SELECT command.  \
\>", "Text"],

Cell[BoxData[
    \(MADoptics /: 
      MADcommand[MADoptics[file_String, opticsopts__Rule], opts___?OptionQ] := 
      Module[{madxs}, \[IndentingNewLine]Print["\<MADoptics \>", 
          file]; \[IndentingNewLine]Print[
          opticsopts]; \[IndentingNewLine]Print[
          opts]; \[IndentingNewLine]madxs = \(MADXsyntax /. 
              Flatten[{opts}]\) /. Options[MADcommand]; \[IndentingNewLine]If[
          madxs, \[IndentingNewLine]{MADcomment["\<MADoptics not available \
for MADX.\>"], "\<STOP\>"}, \
\[IndentingNewLine]"\<OPTICS,CENTRE,filename=\"\>" <> 
            toUnixFileName[file] <> "\<\",\>"\[IndentingNewLine] <> 
            StringReplace[
              MADrule[opticsopts], {"\<{\>" \[Rule] "\<\>", "\<}\>" \[Rule] "\
\<\>"}] <> "\<;\>"\[IndentingNewLine]]\[IndentingNewLine]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADoptics /: 
      MADcommand[MADoptics[file_String, opticsopts__Rule], opts___?OptionQ] := 
      MADcommand[MADoptics[file, opticsopts], opts]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADoptics /: 
      MADcommand[MADoptics[file_String, opticsopts__Rule], 
        opts___?OptionQ, {}] := 
      MADcommand[MADoptics[file, opticsopts], opts]\)], "Input",
  InitializationCell->True],

Cell["\<\
For themoment, MADoptics  will only work for MAD8 and we should \
create a newly designed MADtwiss command for MADX when it is clear how it \
should work.  It should probably handle MAD8 (but using the OPTICS command) \
and MADX. \
\>", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Survey", "Subsubsection"],

Cell["\<\
13/11/2002 Creating this by copying MADtwiss.  As far as I can \
tell, they are very similar, at least in MAD-X.  Not sure about how this \
works for MAD8. since it was made for MAD-X but I had a quick go at the \
implementation.\
\>", "Text"],

Cell[BoxData[
    \(\(MADsurvey /: 
        MADcommand[
          MADsurvey[filename_String, seq_String, cols : {_String .. }, 
            selectopts : {{__?MADselectionQ} ... }, twopts : {___Rule}]] := 
        If[MADXsyntax /. 
            Options[MADcommand], \[IndentingNewLine]Module[{twoptstr}, \
\[IndentingNewLine]twoptstr = 
              MADrule @@ Flatten[{twopts}]; \[IndentingNewLine]twoptstr = 
              If[StringLength[twoptstr] > 0, "\<,\>" <> 
                  twoptstr, "\<\>"]; \[IndentingNewLine]MADcommand[
              MADtag[\(("\<MADsurvey for sequence: \>" <> 
                    seq <> "\<, making file: \>" <> 
                    filename)\), \[IndentingNewLine]{"\<SHOW,BEAM%\>" <> 
                    seq, \[IndentingNewLine]MADselect["\<SURVEY\>", 
                    MADclear[]], \
\[IndentingNewLine]\((Map[\[IndentingNewLine]StringReplace[#, "\<;\>" -> "\<,\
\>" <> \[IndentingNewLine]MADrule["\<COLUMN\>" \[Rule] cols]] &, 
                      MADcommand[
                        MADselect["\<SURVEY\>", 
                          selectopts]], \(-1\)]\[IndentingNewLine])\), \
\[IndentingNewLine]StringJoin[
                    Flatten[{"\<SURVEY,SEQUENCE=\>", seq, "\<,file=\"\>", 
                        filename, "\<\"\>", 
                        twoptstr}]]}\[IndentingNewLine]]]\[IndentingNewLine]],\
 \[IndentingNewLine]Module[{}, \[IndentingNewLine]MADcommand[
              MADtag[\(("\<MADsurvey for sequence: \>" <> 
                    seq <> "\<, making file: \>" <> 
                    filename)\), \[IndentingNewLine]{MADselect["\<SURVEY\>", 
                    MADclear[]], \[IndentingNewLine]MADcommand[
                    MADselect["\<SURVEY\>", 
                      selectopts]], \[IndentingNewLine]MADoptics[filename, 
                    Sequence @@ 
                      Flatten[{"\<COLUMNS\>" \[Rule] cols, 
                          twopts}]], \[IndentingNewLine]StringJoin[
                    Flatten[{"\<SURVEY\>", \({"\<,\>", MADrule[#]} &\) /@ 
                          twopts, "\<,TAPE=\>", 
                        filename}]]\[IndentingNewLine]}\[IndentingNewLine]]]\
\[IndentingNewLine]]\[IndentingNewLine]];\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADsurvey[filename_String, seq_String, cols : {_String .. }, 
          selectopts : {__?MADselectionQ}, twopts : \({___Rule} : {}\)] := 
        MADsurvey[filename, seq, cols, {selectopts}, twopts];\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MADsurvey[filename_String, seq_String, cols : {_String .. }, 
          selectopts_] := 
        MADsurvey[filename, seq, cols, selectopts, {}];\)\)], "Input",
  InitializationCell->True],

Cell["\<\
Pre-packaged sets of columns for SURVEY.  The question of what the \
rightupper case MAD names for the global coordinates X,Y,Z is not yet dealt \
with so keep the following option False.  If it ever becomes True, note the \
choice of XG etc. in the code below.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Options[
        MADsurveyColumns] = {MAD8NamesCorrected \[Rule] False}\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \({MAD8NamesCorrected \[Rule] False}\)], "Output"]
}, Open  ]],

Cell[BoxData[{
    \(\(MADsurveyColumns[] = 
        MADsurveyColumns["\<Classic\>"];\)\[IndentingNewLine]\), "\
\[IndentingNewLine]", 
    \(\(MADsurveyColumns["\<Classic\>"] = {"\<NAME\>", "\<S\>", "\<L\>", \
"\<ANGLE\>", "\<X\>", "\<Y\>", "\<Z\>", "\<THETA\>", "\<PHI\>", "\<PSI\>"};\)\
\[IndentingNewLine]\), "\n", 
    \(\(MADsurveyColumns["\<Basic\>"] = {"\<NAME\>", "\<S\>", "\<X\>", \
"\<Y\>", "\<Z\>"};\)\n\), "\[IndentingNewLine]", 
    \(\(MADsurveyColumns["\<Geometric\>"] = {"\<NAME\>", "\<S\>", "\<X\>", \
"\<Y\>", "\<Z\>", "\<THETA\>", "\<PHI\>", "\<PSI\>"};\)\[IndentingNewLine]\), \
"\[IndentingNewLine]", 
    \(\(MADsurveyColumns[x_] = {"\<NAME\>", "\<S\>"};\)\)}], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADsurveyColumns[tag_String, opts___?OptionQ] := 
      Module[{m8corr}, \[IndentingNewLine]m8corr = \(MAD8NamesCorrected /. 
              Flatten[{opts}]\) /. 
            Options[MAD8NamesCorrected]; \[IndentingNewLine]tc = 
          MADsurveyColumns[tag]; \[IndentingNewLine]If[m8corr, 
          tc /. {"\<X\>" \[Rule] "\<XG\>", "\<Y\>" \[Rule] "\<YG\>", "\<Z\>" -> \
"\<ZG\>"}, \[IndentingNewLine]tc]\[IndentingNewLine]]\)], "Input",
  InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["Misalignments", "Subsubsection"],

Cell[BoxData[{
    \(\(MADealign /: 
        MADcommand[MADealign[dxys_: {}, dangles_: {}, mre_: {}, mscal_: {}]] := 
        StringJoin[
          Flatten[{"\<EALIGN,\>", \[IndentingNewLine]MADrule[
                Select[\[IndentingNewLine]{whileRules[{"\<DX\>", "\<DY\>", \
"\<DS\>"}, 
                      dxys], \[IndentingNewLine]whileRules[{"\<DPHI\>", \
"\<DTHETA\>", "\<DPSI\>"}, 
                      dangles], \[IndentingNewLine]whileRules[{"\<MREX\>", \
"\<MREY\>"}, 
                      mre], \[IndentingNewLine]whileRules[{"\<MSCALX\>", \
"\<MSCALY\>"}, mscal]}, # =!= {} &]]\[IndentingNewLine]}]];\)\), "\n", 
    \(\(MADealign[{}] = "\<\>";\)\)}], "Input",
  InitializationCell->True]
}, Closed]],

Cell["Field errors", "Subsubsection"],

Cell[CellGroupData[{

Cell["Orbit correction", "Subsubsection"],

Cell["\<\
The USEKICK and USEMONITOR commands are implemented in the \
Selection section.  Still have to implement the CORRECT command itself.\
\>", \
"Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Tracking", "Subsubsection"],

Cell["Still to be modified for MADX.", "Text"],

Cell[BoxData[
    \(MADcommand[
        MADstart[x_ /; NumericQ[x], px_ /; NumericQ[px], y_ /; NumericQ[y], 
          py_ /; NumericQ[py], t_ /; NumericQ[t], 
          pt_ /; NumericQ[
              pt]]] ^:= \[IndentingNewLine]Module[{tp}, \[IndentingNewLine]tp \
= If[MADXsyntax /. 
              Options[MADcommand], \
"\<start,X=``,PX=``,Y=``,PY=``,T=``,PT=``\>", \
"\<start,X=``,PX=``,Y=``,PY=``,T=``,DELTAP=``\>"]; \
\[IndentingNewLine]ToString[
            StringForm["\<start,X=``,PX=``,Y=``,PY=``,T=``,DELTAP=``\>", 
              Sequence @@ \((FortranForm /@ 
                    N[{x, px, y, py, t, pt}])\)]] <> "\<;\>"]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADcommand[\n\t
        MADstartN[\n\t\tfx_ /; NumericQ[fx], \n\t\tphix_ /; 
            NumericQ[phix], \n\t\tfy_ /; NumericQ[fy], \n\t\tphiy_ /; 
            NumericQ[phiy], \n\t\tft_ /; NumericQ[ft], \n\t\tphit_ /; 
            NumericQ[phit]\n\t\t]\n] ^:= 
      ToString[StringForm["\<start,FX=``,PHIX=``,FY=``,PHIY=``,FT=``,PHIT=``\>\
", Sequence @@ \((FortranForm /@ \ 
                  N[{fx, phix, fy, phiy, ft, 
                      phit}])\)]] <> "\<;\>"\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADcommand[\n\t
        MADstartAA[\n\t\tix_ /; NumericQ[ix], \n\t\tphix_ /; 
            NumericQ[phix], \n\ \ \tiy_ /; NumericQ[iy], \n\t\tphiy_ /; 
            NumericQ[phiy], \n\t\tit_ /; NumericQ[it], \n\t\tphit_ /; 
            NumericQ[phit]\n\t\t]\n] ^:= 
      ToString[StringForm["\<start,FX=``,PHIX=``,FY=``,PHIY=``,FT=``,PHIT=``\>\
", Sequence @@ \((FortranForm /@ \ 
                  N[{\[Sqrt]\((2*ix)\), phix, \[Sqrt]\((2*iy)\), 
                      phiy, \[Sqrt]\((2*it)\), 
                      phit}])\)]] <> "\<;\>"\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADcommand[
        MADrun[turns_Integer]] ^:= {"\<RUN,TURNS=\>" <> 
          ToString[turns] <> "\<,table=TRACK\>"}\)], "Input",
  InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
    \(Options[MADtrack] = {OnePass \[Rule] False, Damp \[Rule] False, 
        Quantum \[Rule] False, Deltap \[Rule] 0}\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \({OnePass \[Rule] False, Damp \[Rule] False, Quantum \[Rule] False, 
      Deltap \[Rule] 0}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADcommand[MADtrack[trackcmds_, opts___Rule]] ^:= 
      Module[{onepass, damp, quantum, dpspec, deltap}, \n\t\tonepass = 
          If[\(OnePass /. {opts}\)\  /. \ 
              Options[MADtrack], "\<,ONEPASS\>", "\<,-ONEPASS\>"]; \n\t\tdamp \
= If[\(Damp /. {opts}\)\  /. \ 
              Options[MADtrack], "\<,DAMP\>", "\<,-DAMP\>"]; \n\t\tquantum = 
          If[\(Quantum /. {opts}\)\  /. \ 
              Options[MADtrack], "\<,QUANTUM\>", "\<,-QUANTUM\>"]; \
\[IndentingNewLine]deltap = \(Deltap /. {opts}\) /. 
            Options[MADtrack]; \[IndentingNewLine]dpspec = 
          If[deltap =!= 0, "\<,DELTAP=\>" <> 
              ToString[deltap], "\<\>"]; \[IndentingNewLine]{ToString[
            StringForm["\<TRACK `` `` `` ``;\>", damp, quantum, onepass, 
              dpspec]], \n\t\tMADcommand[
            trackcmds], "\<ENDTRACK;\>"}\n\t\t\t\t]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(General::"spell1" \(\(:\)\(\ \)\) 
      "Possible spelling error: new symbol name \"\!\(damp\)\" is similar to \
existing symbol \"\!\(Damp\)\"."\)], "Message"],

Cell[BoxData[
    \(General::"spell1" \(\(:\)\(\ \)\) 
      "Possible spelling error: new symbol name \"\!\(quantum\)\" is similar \
to existing symbol \"\!\(Quantum\)\"."\)], "Message"],

Cell[BoxData[
    \(General::"spell1" \(\(:\)\(\ \)\) 
      "Possible spelling error: new symbol name \"\!\(deltap\)\" is similar \
to existing symbol \"\!\(Deltap\)\"."\)], "Message"],

Cell[BoxData[
    \(General::"stop" \(\(:\)\(\ \)\) 
      "Further output of \!\(General :: \"spell1\"\) will be suppressed \
during this calculation."\)], "Message"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["File and Memory Utilities, System Commands", "Subsubsection"],

Cell[TextData[{
  "Always use ",
  StyleBox["toUnixFileName", "Input"],
  " on file names so that we can use this package under Windows NT but \
generate MAD files with explicit Unix syntax in them.  This function comes \
from the ",
  StyleBox["BumpEtc", "Input"],
  " package."
}], "Text"],

Cell["\<\
\"10:52:55 8/5/2002\"changing \"filename\" to \"file\" for \
compatibility with MADX (OK for MAD8)\
\>", "Text"],

Cell[BoxData[
    \(MADcommand[
        MADcall[fn_String]] ^:= \n\ \ \(\(ToString /@ \ \
{StringForm["\<call,file=\"``\";\>", 
            toUnixFileName[fn]]}\)\(\ \ \)\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MADcommand[
        MADarchive[tbl_, file_String]] ^:= {"\<archive,table=\>" <> 
          ToString[tbl] <> "\<,filename=\"\>" <> 
          toUnixFileName[file] <> "\<\";\>"}\)], "Input",
  InitializationCell->True],

Cell["MADX does not have POOLDUMP and POOLLOAD, tragically.  ", "Text"],

Cell[BoxData[
    \(MADpoolLoad /: MADcommand[MADpoolLoad[file_String], opts___?OptionQ] := 
      Module[{madxs}, \[IndentingNewLine]madxs = \(MADXsyntax /. 
              Flatten[{opts}]\) /. Options[MADcommand]; \[IndentingNewLine]If[
          madxs, \[IndentingNewLine]{MADcommand[
              MADcomment["\<POOLLOAD not possible in MADX.\>", "\<STOP\>"]]}, \
\[IndentingNewLine]"\<poolload,\"\>" <> 
            toUnixFileName[file] <> "\<\";\>"]\[IndentingNewLine]]\)], "Input",\

  InitializationCell->True],

Cell[BoxData[
    \(MADcommand[MADpoolDump[file_String], opts___?OptionQ] := 
      Module[{madxs}, \[IndentingNewLine]madxs = \(MADXsyntax /. 
              Flatten[{opts}]\) /. Options[MADcommand]; \[IndentingNewLine]If[
          madxs, \[IndentingNewLine]{MADcommand[
              MADcomment["\<POOLDUMP not possible in MADX.  Continuing \
regardless.\>"]]}, \[IndentingNewLine]"\<pooldump,\"\>" <> 
            toUnixFileName[file] <> "\<\";\>"\[IndentingNewLine]]]\)], "Input",\

  InitializationCell->True],

Cell[BoxData[
    \(MADcommand[MADsystem[cmd_String]] ^:= "\<system,\"\>" <> 
        cmd <> "\<\"\>" <> "\<;\>"\)], "Input",
  InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["Further definitions for MADcommand", "Subsubsection"],

Cell[BoxData[
    \(SetAttributes[MADcommand, Listable]\)], "Input",
  InitializationCell->True],

Cell["\<\
Allow literal command strings since we don't have to implement the \
whole MAD language\
\>", "Text"],

Cell[BoxData[
    \(MADcommand[c_String] := c <> "\<;\>"\)], "Input",
  InitializationCell->True],

Cell["Anything else gets represented as a comment", "Text",
  InitializationCell->True],

Cell[BoxData[
    \(MADcommand[x_] := "\<!MADcommand?? \>" <> 
        ToString[InputForm[x]]\)], "Input",
  InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["Generating a MAD input file", "Subsubsection"],

Cell["This function converts MAD input objects to MAD input files.", "Text"],

Cell["\<\
Since MAD is normally a Unix program, make sure that we use Unix \
conventions for end of line.  OK for MAD8 on Windows too.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(makeMADfile[madfile_String, madfunc_, opts___?OptionQ] := 
      Module[{mfile, 
          madxs}, \[IndentingNewLine]madxs = \(MADXsyntax \
/. \[InvisibleSpace]Flatten[{opts}]\) /. \[InvisibleSpace]Options[
              MADcommand]; \[IndentingNewLine]bumpFile[
          madfile]; \[IndentingNewLine]mfile = 
          OpenWrite[madfile, 
            DOSTextFormat \[Rule] 
              False]; \((WriteString[
                mfile, #1 <> "\<\n\>"] &)\) /@ \[IndentingNewLine]Flatten[\
\[IndentingNewLine]If[madxs, Identity, MADstringbreak] /@ 
              MADcommand[
                Join[madfunc, {"\<return\>", "\<!\>"}]]]; \
\[IndentingNewLine]Close[mfile]\[IndentingNewLine]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(General::"spell1" \(\(:\)\(\ \)\) 
      "Possible spelling error: new symbol name \"\!\(mfile\)\" is similar to \
existing symbol \"\!\(file\)\"."\)], "Message"]
}, Open  ]],

Cell["\<\
For MADX, we simply  do not break the lines (asssuming there is not \
limit to their length!).  \
\>", "Text"],

Cell["\<\
MAD Version 8 has an 80 column limit on commands.  This function \
breaks them appropriately  when necessary.  First definition isolates \
explicit strings on lines by themselves.  Still have some problems with this \
returning nested list but not too important.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADcommentQ[str_String] := 
      Module[{strn}, \[IndentingNewLine]strn = 
          StringReplace[
            str, "\< \>" -> "\<\>"]; \[IndentingNewLine]StringMatchQ[
            strn, "\<!*\>"] || \((\((MADXsyntax /. Options[MADcommand])\) && 
              StringMatchQ[strn, "\<//*\>"])\)\[IndentingNewLine]]\)], "Input",\

  InitializationCell->True],

Cell[BoxData[
    \(General::"spell1" \(\(:\)\(\ \)\) 
      "Possible spelling error: new symbol name \"\!\(MADcommentQ\)\" is \
similar to existing symbol \"\!\(MADcomment\)\"."\)], "Message"],

Cell[BoxData[
    \(General::"spell1" \(\(:\)\(\ \)\) 
      "Possible spelling error: new symbol name \"\!\(strn\)\" is similar to \
existing symbol \"\!\(str\)\"."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(\(MADstringbreak[
          cmd_String\  /; \ \((Not[MADcommentQ[cmd]] && 
                StringLength[cmd]\  > \ 80\  && \ 
                StringMatchQ[cmd, "\<*\"*\"*\>"])\)]\  := 
        Module[{break, qt = "\<\"\>", before, quoted, 
            after}, \n\t\tbreak\  = \ 
            First\  /@ \ StringPosition[cmd, qt]; \n\t\tbefore = 
            StringTake[cmd, break[\([1]\)] - 1]; \n\t\tquoted = 
            StringTake[cmd, {break[\([1]\)], break[\([2]\)]}]; 
          after = \ 
            StringTake[
              cmd, {break[\([2]\)] + 1, 
                StringLength[cmd]}]; \n\t\t\tMADstringbreak /@ 
            Flatten[\ {\n\t\t\t\t\t\tbefore <> "\<&\>", \n\t\t\t\t\t\t\t\t\t\
If[Complement[Characters[after], {"\< \>"}] == {}, 
                  quoted, {quoted <> "\<&\>", 
                    after}]\n\t\t\t\t\t}]\n\t\t\t\t];\)\(\ \)\)\)], "Input",
  InitializationCell->True,
  GeneratedCell->False,
  CellAutoOverwrite->False],

Cell[BoxData[
    \(General::"spell1" \(\(:\)\(\ \)\) 
      "Possible spelling error: new symbol name \"\!\(break\)\" is similar to \
existing symbol \"\!\(Break\)\"."\)], "Message"],

Cell[BoxData[
    \(General::"spell1" \(\(:\)\(\ \)\) 
      "Possible spelling error: new symbol name \"\!\(before\)\" is similar \
to existing symbol \"\!\(Before\)\"."\)], "Message"],

Cell[BoxData[
    \(General::"spell1" \(\(:\)\(\ \)\) 
      "Possible spelling error: new symbol name \"\!\(after\)\" is similar to \
existing symbol \"\!\(After\)\"."\)], "Message"],

Cell[BoxData[
    \(General::"stop" \(\(:\)\(\ \)\) 
      "Further output of \!\(General :: \"spell1\"\) will be suppressed \
during this calculation."\)], "Message"]
}, Open  ]],

Cell[BoxData[
    RowBox[{
      StyleBox[\(MADstringbreak[
            cmd_String\  /; \((Not[MADcommentQ[cmd]] && \ 
                  StringLength[cmd]\  > \ 80)\)]\  := \ 
          Module[{breakpoint}, \ \n\t\tbreakpoint\  = \ 
              Max[Select[
                  First\  /@ \ 
                    StringPosition[
                      cmd, \ {"\<,\>", \ "\< \>", \ "\<=\>", \ "\<:\>"}], \ \
#1\  < \ 78\  &\ ]]; \ \ \n\t\tFlatten[{\n\t\t\t\tStringJoin[
                  StringTake[cmd, \ breakpoint], \ "\< &\>"], \ 
                MADstringbreak[\ 
                  StringTake[
                    cmd, \ {breakpoint\  + \ 1, \ 
                      StringLength[cmd]}]]\n\t\t\t}]]\),
        ShowStringCharacters->True,
        NumberMarks->True], ";"}]], "Input",
  InitializationCell->True,
  GeneratedCell->False,
  CellAutoOverwrite->False],

Cell[BoxData[
    StyleBox[\(MADstringbreak[
            cmds_List] := \ \((Flatten[
              MADstringbreak /@ 
                Select[\ Flatten[cmds], \((StringLength[#] > 1)\) &]])\);\),
      ShowStringCharacters->True,
      NumberMarks->True]], "Input",
  InitializationCell->True,
  GeneratedCell->False,
  CellAutoOverwrite->False],

Cell[BoxData[
    StyleBox[\(MADstringbreak[cmd_String]\  := \ cmd\),
      ShowStringCharacters->True,
      NumberMarks->True]], "Input",
  InitializationCell->True,
  GeneratedCell->False,
  CellAutoOverwrite->False]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["End the private context", "Subsection",
  InitializationCell->True,
  CellTags->"Implementation section"],

Cell[CellGroupData[{

Cell[BoxData[
    \(End[]\)], "Input",
  InitializationCell->True,
  CellTags->"Implementation section"],

Cell[BoxData[
    \("Madtomma`MadLanguage`MADInput`Private`"\)], "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
  StyleBox["\[WarningSign]\[WarningSign]",
    FontSize->20],
  " ",
  "Epilog"
}], "Section",
  InitializationCell->True,
  CellTags->"Epilog section"],

Cell["This section protects exported symbols and ends the package.", "Text",
  CellTags->"Epilog section"],

Cell[CellGroupData[{

Cell["Protect exported symbol", "Subsection",
  InitializationCell->True,
  CellTags->"Epilog section"],

Cell["(* Protect[ Function1, Function2 ] *)", "Input",
  InitializationCell->True,
  CellTags->"Epilog section"],

Cell["Alternative: protect all exported symbols", "Text",
  InitializationCell->True,
  CellTags->"Epilog section"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Protect[Evaluate[Context[] <> "\<*\>"]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \({"a", "after", "after$", "a$", "b", "before", "before$", "break", 
      "breakpoint", "breakpoint$", "break$", "b$", "c", "cl", "cmd", "cmds", 
      "cols", "columns", "damp", "Damp", "damp$", "dangles", "deltap", 
      "Deltap", "deltap$", "dpspec", "dpspec$", "dxys", "edits", "el", "el1", 
      "el2", "file", "filename", "flag", "fn", "ft", "fx", "fy", "it", "ix", 
      "iy", "linkRules", "m8corr", "m8corr$", "MAD8NamesCorrected", 
      "MADarchive", "MADassign", "MADcall", "MADclass", "MADclear", 
      "madcommand", "MADcommand", "MADcomment", "MADcommentQ", "MADcycle", 
      "MADealign", "madfile", "MADfull", "madfunc", "madin", "MADInput", 
      "MADinstall", "MADnewElement", "MADoptics", "MADpattern", 
      "MADpoolDump", "MADpoolLoad", "MADrange", "MADreflect", "MADremove", 
      "MADrule", "MADrun", "MADselect", "MADselectionHeads", "MADselectionQ", 
      "madSelectSplit", "MADseqedit", "MADset", "MADsetDelayed", "MADstart", 
      "MADstartAA", "MADstartN", "MADstringbreak", "MADsystem", "MADtag", 
      "MADtagNaked", "MADtitle", "MADtrack", "MADtwiss", "MADtwissColumns", 
      "MADuse", "MADuseKick", "MADuseMonitor", "madxs", "MADXsyntax", 
      "madxs$", "makeMADfile", "mfile", "mfile$", "mre", "mscal", "newel", 
      "newval", "nkd", "nkd$", "onepass", "OnePass", "onepass$", "op", 
      "opticsopts", "opts", "op$", "patt", "period", "phit", "phix", "phiy", 
      "pt", "px", "py", "qt", "qt$", "quantum", "Quantum", "quantum$", 
      "quoted", "quoted$", "r", "r1", "r2", "reallyBig", "rl", "rng", "rs", 
      "rules", "s1", "s2", "sel", "selectopts", "sell", "selll", "selsep", 
      "selsep$", "seq", "specialword", "str", "strn", "strn$", "switch", "t", 
      "tag", "tbl", "tc", "tout", "trackcmds", "turns", "twopts", "twoptstr", 
      "twoptstr$", "value", "var", "whileRules", "x", "x$", "y", "y1", "y1$", 
      "y2", "y2$", "y$"}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Unprotect[MADtwissColumns, MADsurveyColumns]\)], "Input"],

Cell[BoxData[
    \({"MADtwissColumns"}\)], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["End the package context", "Subsection",
  InitializationCell->True,
  CellTags->"Epilog section"],

Cell["EndPackage[ ]", "Input",
  InitializationCell->True,
  CellTags->"Epilog section"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Tests", "Section"],

Cell[CellGroupData[{

Cell["Tests  of MADrule", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
    \(NumberQ[2.1]\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADrule[x \[Rule] 2] // FullForm\)], "Input"],

Cell[BoxData[
    TagBox[
      StyleBox[\(MADrule[Rule[x, 2]]\),
        ShowSpecialCharacters->False,
        ShowStringCharacters->True,
        NumberMarks->True],
      FullForm]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADrule[a -> "\<2\>"]\)], "Input"],

Cell[BoxData[
    \(MADrule[a \[Rule] "2"]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADrule["\<a\>" -> "\<b\>"]\)], "Input"],

Cell[BoxData[
    \(MADrule["a" \[Rule] "b"]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADrule[a \[Rule] "\<b\>"]\)], "Input"],

Cell[BoxData[
    \(MADrule[a \[Rule] "b"]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADrule[a + b -> 2]\)], "Input"],

Cell[BoxData[
    \(MADrule[a + b \[Rule] 2]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADrule[a \[Rule] 1\/\(1 + b\), c \[Rule] "\<D\>", 
      f \[Rule] Normal[Series[1\/\(1 + b\), {b, 0, 3}]]]\)], "Input"],

Cell[BoxData[
    \(MADrule[a \[Rule] 1\/\(1 + b\), c \[Rule] "D", 
      f \[Rule] 1 - b + b\^2 - b\^3]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADrule[cols \[Rule] {"\<BETX\>", "\<bety\>"}] // FullForm\)], "Input"],

Cell[BoxData[
    \(General::"spell1" \(\(:\)\(\ \)\) 
      "Possible spelling error: new symbol name \"\!\(cols\)\" is similar to \
existing symbol \"\!\(col\)\"."\)], "Message"],

Cell[BoxData[
    TagBox[
      StyleBox[\(MADrule[Rule[cols, List["\<BETX\>", "\<bety\>"]]]\),
        ShowSpecialCharacters->False,
        ShowStringCharacters->True,
        NumberMarks->True],
      FullForm]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADrule[cols \[Rule] {"\<BETX\>", bety + 2}] // FullForm\)], "Input"],

Cell[BoxData[
    TagBox[
      StyleBox[\(MADrule[Rule[cols, List["\<BETX\>", Plus[2, bety]]]]\),
        ShowSpecialCharacters->False,
        ShowStringCharacters->True,
        NumberMarks->True],
      FullForm]], "Output"]
}, Open  ]],

Cell["\<\
I don't know why I ever had the following definition, it is not in \
the package for now.  Keep it just in case.\
\>", "Text"],

Cell[BoxData[
    \( (*\ MADrule[x \[Rule] y_List] := 
        MADrule[x \[Rule] StringJoin[y]]\ *) \)], "Input"],

Cell["Some examples", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADrule["\<Range\>" -> "\<IP1/IP2\>", 
      column -> {"\<BETX\>", "\<BETY\>"}]\)], "Input"],

Cell[BoxData[
    \(General::"spell1" \(\(:\)\(\ \)\) 
      "Possible spelling error: new symbol name \"\!\(column\)\" is similar \
to existing symbol \"\!\(Column\)\"."\)], "Message"],

Cell[BoxData[
    \(MADrule["Range" \[Rule] "IP1/IP2", 
      column \[Rule] {"BETX", "BETY"}]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADrule[col \[Rule] {"\<ABC\>", "\<xnm\>"}]\)], "Input"],

Cell[BoxData[
    \(MADrule[col \[Rule] {"ABC", "xnm"}]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADrule[] // FullForm\)], "Input"],

Cell[BoxData[
    TagBox[
      StyleBox[\(MADrule[]\),
        ShowSpecialCharacters->False,
        ShowStringCharacters->True,
        NumberMarks->True],
      FullForm]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADrule[{"\<a\>" -> b, "\<v\>" -> f}]\)], "Input"],

Cell[BoxData[
    \(MADrule[{"a" \[Rule] b, "v" \[Rule] f}]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADrule[K1 ->  .2\ 10\^\(-4\)] // FullForm\)], "Input"],

Cell[BoxData[
    TagBox[
      StyleBox[\(MADrule[Rule[K1, 0.00002`]]\),
        ShowSpecialCharacters->False,
        ShowStringCharacters->True,
        NumberMarks->True],
      FullForm]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADrule["\<a\>" \[Rule] 1] // FullForm\)], "Input"],

Cell[BoxData[
    TagBox[
      StyleBox[\(MADrule[Rule["\<a\>", 1]]\),
        ShowSpecialCharacters->False,
        ShowStringCharacters->True,
        NumberMarks->True],
      FullForm]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(FullForm[
      MADrule[K1 \[Rule]  .2, L \[Rule] 4, "\<K2\>" \[Rule]  .01]]\)], "Input"],

Cell[BoxData[
    TagBox[
      StyleBox[\(MADrule[Rule[K1, 0.2`], Rule[L, 4], Rule["\<K2\>", 0.01`]]\),
        
        ShowSpecialCharacters->False,
        ShowStringCharacters->True,
        NumberMarks->True],
      FullForm]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADrule["\<KQF\>" \[Rule] InputForm[2 + ff^2/d]]\)], "Input"],

Cell[BoxData[
    RowBox[{"MADrule", "[", 
      RowBox[{"\<\"KQF\"\>", "\[Rule]", 
        InterpretationBox[
          StyleBox[\(2\  + \ ff^2/d\),
            ShowStringCharacters->True,
            NumberMarks->True],
          InputForm[ 
            Plus[ 2, 
              Times[ 
                Power[ d, -1], 
                Power[ ff, 2]]]],
          Editable->True,
          AutoDelete->True]}], "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADrule["\<KQF\>" \[Rule] Random[]]\)], "Input"],

Cell[BoxData[
    \(MADrule["KQF" \[Rule] 0.5022479323093461`]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADrule["\<KQF\>" \[Rule] "\<RANF()\>"]\)], "Input"],

Cell[BoxData[
    \(MADrule["KQF" \[Rule] "RANF()"]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(whileRules[{a, b, c}, {1, 0, 3, 4}]\)], "Input"],

Cell[BoxData[
    \(whileRules[{a, b, c}, {1, 0, 3, 4}]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(whileRules[{a, b, c}, {1}] // MADrule\) // MADcommand\)], "Input"],

Cell[BoxData[
    \("!MADcommand?? MADrule[whileRules[{a, b, c}, {1}]]"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["staticvar", "Input"]], "Subsubsection",
  InitializationCell->True,
  CellTags->"Implementation section"],

Cell["No need for any  static variables?", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell["MADuse Examples", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADuse["\<LHCb1\>", RANGE -> "\<IP1/IP2\>"] // MADcommand\)], "Input"],

Cell[BoxData[
    \("!MADcommand?? MADuse[\"LHCb1\", RANGE -> \"IP1/IP2\"]"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADuse["\<LHC\>", MADrange[{"\<IP1\>", "\<IP3\>"}]] // 
      MADcommand\)], "Input"],

Cell[BoxData[
    \("USE,PERIOD=LHC,RANGE=IP1/IP3;"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADuse["\<LHC\>", MADrange[{"\<IP1\>", "\<IP3\>"}]] // 
      MADcommand\)], "Input"],

Cell[BoxData[
    \("USE,PERIOD=LHC,RANGE=IP1/IP3;"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \({MADuse["\<LHC\>", MADrange[{"\<IP1\>", "\<IP3\>"}]]} // 
      MADcommand\)], "Input"],

Cell[BoxData[
    \({"USE,PERIOD=LHC,RANGE=IP1/IP3;"}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADuse["\<LHCb1\>", "\<RANGE\>" -> "\<IP1/IP2\>"] // 
      MADcommand\)], "Input"],

Cell[BoxData[
    \("!MADcommand?? MADuse[\"LHCb1\", \"RANGE\" -> \"IP1/IP2\"]"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADuse["\<LHCb1\>"] // MADcommand\)], "Input"],

Cell[BoxData[
    \("USE,PERIOD=LHCb1;"\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Selection objects tests", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
    \(madcommand[MADclass["\<DIPOLE\>"]]\)], "Input"],

Cell[BoxData[
    \(madcommand[MADclass["DIPOLE"]]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(MADrange["\<x\>"] // madcommand\) // FullForm\)], "Input"],

Cell[BoxData[
    TagBox[
      StyleBox[\(madcommand[MADrange["\<x\>"]]\),
        ShowSpecialCharacters->False,
        ShowStringCharacters->True,
        NumberMarks->True],
      FullForm]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?MADrange\)\)], "Input"],

Cell[BoxData[
    \("MADrange[el1] or MADrange[{el1,el2}]  or MADrange[{{el1,s1},{el2,s2}}] \
 is a MADInput object that can be used to specify a single element or a range \
 or elements in MADselect (or similar) commands; if s2<s1 in the last form of \
 the command a range overlapping the start/end of the ring sequence will be  \
generated.  The arguments el1, el2 must be strings."\)], "Print",
  CellTags->"Info3245064565-3736056"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(MADrange[{"\<A\>", "\<B\>"}] // madcommand\) // FullForm\)], "Input"],

Cell[BoxData[
    TagBox[
      StyleBox[\(madcommand[MADrange[List["\<A\>", "\<B\>"]]]\),
        ShowSpecialCharacters->False,
        ShowStringCharacters->True,
        NumberMarks->True],
      FullForm]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADrange[{{"\<A\>", 10. }, {"\<B\>", 11. }}] // madcommand\)], "Input"],

Cell[BoxData[
    \(madcommand[MADrange[{"A", "B"}]]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADrange[{{"\<A\>", 12. }, {"\<B\>", 11. }}] // madcommand\)], "Input"],

Cell[BoxData[
    \(madcommand[
      Madtomma`MadLanguage`MADInput`Private`madSelectSplit[
        MADrange[{"A", "#E"}], MADrange[{"#S", "B"}]]]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADrange[5] // madcommand\)], "Input"],

Cell[BoxData[
    \(madcommand[MADrange[5]]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADpattern["\<Q.*\>"] // madcommand\)], "Input"],

Cell[BoxData[
    \(madcommand[MADpattern["Q.*"]]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADclass["\<DIPOLE\>"] // madcommand\)], "Input"],

Cell[BoxData[
    \(madcommand[MADclass["DIPOLE"]]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADselectionQ[x]\)], "Input"],

Cell[BoxData[
    \(False\)], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Tests of selection", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
    \(madcommand[MADclear[]]\)], "Input"],

Cell[BoxData[
    \(madcommand[MADclear[]]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADclear[] // MADselectionQ\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADselect["\<TWISS\>", MADclear[]] // MADcommand\)], "Input"],

Cell[BoxData[
    \("SELECT,FLAG=TWISS,CLEAR;"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADselect["\<TWISS\>", "\<FULL\>"] // MADcommand\)], "Input"],

Cell[BoxData[
    \("SELECT,FLAG=TWISS,RANGE=#S/#E;"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADselect["\<TWISS\>", "\<Clear\>"] // MADcommand\)], "Input"],

Cell[BoxData[
    \("SELECT,FLAG=TWISS,CLEAR;"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADselectionQ[MADclass["\<QF\>"]]\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADselect["\<TWISS\>", MADfull[]] // MADcommand\)], "Input"],

Cell[BoxData[
    \("SELECT,FLAG=TWISS,RANGE=#S/#E;"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADselect["\<TWISS\>", MADrange[{"\<A\>", "\<B\>"}]] // 
      MADcommand\)], "Input"],

Cell[BoxData[
    \("SELECT,FLAG=TWISS,RANGE=A/B;"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADselect["\<TWISS\>", MADclass["\<QUAD\>"]] // MADcommand\)], "Input"],

Cell[BoxData[
    \(List::"string" \(\(:\)\(\ \)\) 
      "String expected at position \!\(4\) in \!\({\"SELECT,FLAG=\", \
\"TWISS\", \",\", \(\(Madtomma`MadLanguage`MADInput`Private`madcommand[\(\(\
\[LeftSkeleton] 1 \[RightSkeleton]\)\)]\)\), \";\"}\)."\)], "Message"],

Cell[BoxData[
    \(StringJoin::"string" \(\(:\)\(\ \)\) 
      "String expected at position \!\(2\) in \!\(\"SELECT,FLAG=TWISS,\" <> \
\(\(Madtomma`MadLanguage`MADInput`Private`madcommand[\(\(MADclass[\(\(\"\" \
\[Ellipsis] \"\"\)\)]\)\)]\)\) <> \";\"\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADselect["\<TWISS\>", {MADclass["\<QUAD\>"], MADfull[]}] // 
      MADcommand\)], "Input"],

Cell[BoxData[
    \(List::"string" \(\(:\)\(\ \)\) 
      "String expected at position \!\(4\) in \!\({\"SELECT,FLAG=\", \
\"TWISS\", \",\", \(\(\(\(\[LeftSkeleton] 48 \
\[RightSkeleton]\)\)[\(\(MADclass[\"QUAD\"]\)\)]\)\), \",\", \"RANGE=#S/#E\", \
\";\"}\)."\)], "Message"],

Cell[BoxData[
    \(StringJoin::"string" \(\(:\)\(\ \)\) 
      "String expected at position \!\(2\) in \!\(\"SELECT,FLAG=TWISS,\" <> \
\(\(\[LeftSkeleton] 1 \[RightSkeleton]\)\) <> \",RANGE=#S/#E;\"\)."\)], \
"Message"],

Cell[BoxData[
    \("SELECT,FLAG=TWISS," <> 
      Madtomma`MadLanguage`MADInput`Private`madcommand[MADclass["QUAD"]] <> 
      ",RANGE=#S/#E;"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADselect["\<TWISS\>", {MADrange[{"\<IP1\>", "\<IP2\>"}], 
          MADclass["\<QUAD\>"]}] // MADcommand\)], "Input"],

Cell[BoxData[
    \(List::"string" \(\(:\)\(\ \)\) 
      "String expected at position \!\(4\) in \!\({\"SELECT,FLAG=\", \
\"TWISS\", \",\", \(\(\(\(\[LeftSkeleton] 48 \
\[RightSkeleton]\)\)[\(\(MADclass[\"QUAD\"]\)\)]\)\), \",\", \
\"RANGE=IP1/IP2\", \";\"}\)."\)], "Message"],

Cell[BoxData[
    \(StringJoin::"string" \(\(:\)\(\ \)\) 
      "String expected at position \!\(2\) in \!\(\"SELECT,FLAG=TWISS,\" <> \
\(\(\[LeftSkeleton] 1 \[RightSkeleton]\)\) <> \",RANGE=IP1/IP2;\"\)."\)], \
"Message"],

Cell[BoxData[
    \("SELECT,FLAG=TWISS," <> 
      Madtomma`MadLanguage`MADInput`Private`madcommand[MADclass["QUAD"]] <> 
      ",RANGE=IP1/IP2;"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADselect["\<TWISS\>", {{MADrange[{"\<IP1\>", "\<IP2\>"}], 
            MADclass["\<QUAD\>"], 
            MADpattern["\<MQ.*\>"]}, {MADrange[{"\<IP1\>", "\<IP2\>"}], 
            MADrange[{"\<IP4\>", "\<IP5\>"}], MADclass["\<QUAD\>"]}}] // 
      MADcommand\)], "Input"],

Cell[BoxData[
    \(List::"string" \(\(:\)\(\ \)\) 
      "String expected at position \!\(4\) in \!\({\"SELECT,FLAG=\", \
\"TWISS\", \",\", \(\(\(\(\[LeftSkeleton] 48 \
\[RightSkeleton]\)\)[\(\(MADclass[\"QUAD\"]\)\)]\)\), \",\", \
\"PATTERN=\\\"MQ.*\\\"\", \",\", \"RANGE=IP1/IP2\", \";\"}\)."\)], "Message"],

Cell[BoxData[
    \(StringJoin::"string" \(\(:\)\(\ \)\) 
      "String expected at position \!\(2\) in \!\(\"SELECT,FLAG=TWISS,\" <> \
\(\(\(\(\[LeftSkeleton] 48 \[RightSkeleton]\)\)[\(\(MADclass[\"QUAD\"]\)\)]\)\
\) <> \",PATTERN=\\\"MQ.*\\\",RANGE=IP1/IP2;\"\)."\)], "Message"],

Cell[BoxData[
    \(MADselect::"redundant" \(\(:\)\(\ \)\) 
      "-- Message text not found -- (\!\({\(MADrange[\(\({\"IP4\", \"IP5\"}\)\
\)]\)}\))"\)], "Message"],

Cell[BoxData[
    \(List::"string" \(\(:\)\(\ \)\) 
      "String expected at position \!\(4\) in \!\({\"SELECT,FLAG=\", \
\"TWISS\", \",\", \(\(\(\(\[LeftSkeleton] 48 \
\[RightSkeleton]\)\)[\(\(MADclass[\"QUAD\"]\)\)]\)\), \",\", \
\"RANGE=IP1/IP2\", \";\"}\)."\)], "Message"],

Cell[BoxData[
    \(StringJoin::"string" \(\(:\)\(\ \)\) 
      "String expected at position \!\(2\) in \!\(\"SELECT,FLAG=TWISS,\" <> \
\(\(\[LeftSkeleton] 1 \[RightSkeleton]\)\) <> \",RANGE=IP1/IP2;\"\)."\)], \
"Message"],

Cell[BoxData[
    \({"SELECT,FLAG=TWISS," <> 
        Madtomma`MadLanguage`MADInput`Private`madcommand[MADclass["QUAD"]] <> 
        ",PATTERN=\"MQ.*\",RANGE=IP1/IP2;", 
      "SELECT,FLAG=TWISS," <> 
        Madtomma`MadLanguage`MADInput`Private`madcommand[MADclass["QUAD"]] <> 
        ",RANGE=IP1/IP2;"}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADrange["\<A\>"] // MADselectionQ\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADselect["\<TWISS\>", MADrange["\<A\>"]] // MADcommand\)], "Input"],

Cell[BoxData[
    \("SELECT,FLAG=TWISS,RANGE=A;"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADselect["\<TWISS\>", MADrange[{"\<A\>", "\<V\>"}]] // 
      MADcommand\)], "Input"],

Cell[BoxData[
    \("SELECT,FLAG=TWISS,RANGE=A/V;"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADselect["\<TWISS\>", {MADrange[{{"\<A\>", 2}, {"\<V\>", 1}}]}] // 
      MADcommand\)], "Input"],

Cell[BoxData[
    \({"SELECT,FLAG=TWISS,RANGE=A/#E;", 
      "SELECT,FLAG=TWISS,RANGE=#S/V;"}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADcommand /@ {MADselect["\<TWISS\>", {MADrange[{"\<A\>", "\<#E\>"}]}], 
        MADselect["\<TWISS\>", {MADrange[{"\<#S\>", "\<V\>"}]}]}\)], "Input"],

Cell[BoxData[
    \({"SELECT,FLAG=TWISS,RANGE=A/#E;", 
      "SELECT,FLAG=TWISS,RANGE=#S/V;"}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADselect["\<TWISS\>", 
        MADrange[{{"\<A\>", "\<B\>"}, {"\<V\>", "\<W\>"}}]] // 
      MADcommand\)], "Input"],

Cell[BoxData[
    \(MADselect::"redundant" \(\(:\)\(\ \)\) 
      "-- Message text not found -- (\!\({\(MADrange[\(\({\(\({\"A\", \
\"B\"}\)\), \(\({\"V\", \"W\"}\)\)}\)\)]\)}\))"\)], "Message"],

Cell[BoxData[
    \("SELECT,FLAG=TWISS;"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(MADselect["\<TWISS\>", MADrange[{"\<A\>", "\<B\>"}]] // MADcommand\) // 
      FullForm\)], "Input"],

Cell[BoxData[
    TagBox[
      StyleBox["\"\<SELECT,FLAG=TWISS,RANGE=A/B;\>\"",
        ShowSpecialCharacters->False,
        ShowStringCharacters->True,
        NumberMarks->True],
      FullForm]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADselect["\<TWISS\>", {MADrange[{"\<IP1\>", "\<IP2\>"}], 
          MADclass["\<QUAD\>"], MADrange[{"\<IP3\>", "\<IP4\>"}], 
          MADclass["\<SEXT\>"], MADpattern["\<MQ.*\>"]}] // 
      MADcommand\)], "Input"],

Cell[BoxData[
    \(MADselect::"redundant" \(\(:\)\(\ \)\) 
      "-- Message text not found -- (\!\({\(\(MADrange[\(\({\"IP3\", \"IP4\"}\
\)\)]\)\), \(\(MADclass[\"SEXT\"]\)\)}\))"\)], "Message"],

Cell[BoxData[
    \(List::"string" \(\(:\)\(\ \)\) 
      "String expected at position \!\(4\) in \!\({\"SELECT,FLAG=\", \
\"TWISS\", \",\", \(\(\(\(\[LeftSkeleton] 48 \
\[RightSkeleton]\)\)[\(\(MADclass[\"QUAD\"]\)\)]\)\), \",\", \
\"PATTERN=\\\"MQ.*\\\"\", \",\", \"RANGE=IP1/IP2\", \";\"}\)."\)], "Message"],

Cell[BoxData[
    \(StringJoin::"string" \(\(:\)\(\ \)\) 
      "String expected at position \!\(2\) in \!\(\"SELECT,FLAG=TWISS,\" <> \
\(\(\(\(\[LeftSkeleton] 48 \[RightSkeleton]\)\)[\(\(MADclass[\"QUAD\"]\)\)]\)\
\) <> \",PATTERN=\\\"MQ.*\\\",RANGE=IP1/IP2;\"\)."\)], "Message"],

Cell[BoxData[
    \("SELECT,FLAG=TWISS," <> 
      Madtomma`MadLanguage`MADInput`Private`madcommand[MADclass["QUAD"]] <> 
      ",PATTERN=\"MQ.*\",RANGE=IP1/IP2;"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADselect["\<TWISS\>", {{MADrange[{"\<IP1\>", "\<IP2\>"}], 
            MADclass["\<QUAD\>"]}, {MADrange[{"\<IP3\>", "\<IP4\>"}], "\<FULL\
\>", MADrange[{"\<IP1\>", "\<IP2\>"}], MADclass["\<SEXT\>"], 
            MADpattern["\<MQ.*\>"]}}] // MADcommand\)], "Input"],

Cell[BoxData[
    \("!MADcommand?? MADselect[\"TWISS\", {{MADrange[{\"IP1\", \"IP2\"}], \
MADclass[\"QUAD\"]}, {MADrange[{\"IP3\", \"IP4\"}], \"FULL\", MADrange[{\"IP1\
\", \"IP2\"}], MADclass[\"SEXT\"], MADpattern[\"MQ.*\"]}}]"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(TableForm[%]\)], "Input"],

Cell[BoxData[
    TagBox["\<\"!MADcommand?? MADselect[\\\"TWISS\\\", \
{{MADrange[{\\\"IP1\\\", \\\"IP2\\\"}], MADclass[\\\"QUAD\\\"]}, \
{MADrange[{\\\"IP3\\\", \\\"IP4\\\"}], \\\"FULL\\\", MADrange[{\\\"IP1\\\", \
\\\"IP2\\\"}], MADclass[\\\"SEXT\\\"], MADpattern[\\\"MQ.*\\\"]}}]\"\>",
      Function[ BoxForm`e$, 
        TableForm[ BoxForm`e$]]]], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Twiss tests", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
    \(SetOptions[MADcommand, MADXsyntax \[Rule] True]\)], "Input"],

Cell[BoxData[
    \({MADXsyntax \[Rule] True}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(\(MADtwiss["\<test.tfs\>", "\<LHCB1\>", {"\<NAME\>", "\<S\>", "\<BETX\
\>"}, {{MADclass["\<QUAD\>"], 
                MADrange[{"\<IP3\>", "\<IP5\>"}]}, {MADclass["\<BPM\>"], 
                MADrange[{{"\<IP1\>", 10. }, {"\<IP2\>", 5. }}]}}] // 
          MADcommand\) // Flatten\) // TableForm\)], "Input"],

Cell[BoxData[
    \("MADX version"\)], "Print"],

Cell[BoxData[
    TagBox[\(MADcommand[
        MADtag["MADtwiss for sequence: LHCB1, making file: test.tfs", \
{"SHOW,BEAM%LHCB1", 
            MADselect["TWISS", 
              MADclear[]], \
{"SELECT,FLAG=TWISS,CLASS=QUAD,RANGE=IP3/IP5,COLUMN=NAME,S,BETX", \
{"SELECT,FLAG=TWISS,CLASS=BPM,RANGE=IP1/#E,COLUMN=NAME,S,BETX", 
                "SELECT,FLAG=TWISS,CLASS=BPM,RANGE=#S/IP2,COLUMN=NAME,S,BETX"}\
}, "TWISS,SEQUENCE=LHCB1,file=\"test.tfs\""}]]\),
      Function[ BoxForm`e$, 
        TableForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(\(MADtwiss["\<test.tfs\>", "\<LHCB1\>", {"\<NAME\>", "\<S\>", "\<BETX\
\>"}, {{MADclass["\<QUAD\>"], 
                MADrange[{"\<IP3\>", "\<IP5\>"}]}, {MADclass["\<BPM\>"], 
                MADrange[{{"\<IP1\>", 10. }, {"\<IP2\>", 
                      5. }}]}}, {"\<DELTAP\>" \[Rule] \ \
"\<0.001:0.007:0.002\>", "\<CHROM\>" \[Rule] "\<True\>"}] // MADcommand\) // 
        Flatten\) // TableForm\)], "Input"],

Cell[BoxData[
    \("MADX version"\)], "Print"],

Cell[BoxData[
    TagBox[\(MADcommand[
        MADtag["MADtwiss for sequence: LHCB1, making file: test.tfs", \
{"SHOW,BEAM%LHCB1", 
            MADselect["TWISS", 
              MADclear[]], \
{"SELECT,FLAG=TWISS,CLASS=QUAD,RANGE=IP3/IP5,COLUMN=NAME,S,BETX", \
{"SELECT,FLAG=TWISS,CLASS=BPM,RANGE=IP1/#E,COLUMN=NAME,S,BETX", 
                "SELECT,FLAG=TWISS,CLASS=BPM,RANGE=#S/IP2,COLUMN=NAME,S,BETX"}\
}, "TWISS,SEQUENCE=LHCB1,file=\"test.tfs\",DELTAP=0.001:0.007:0.002,CHROM=\
True"}]]\),
      Function[ BoxForm`e$, 
        TableForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADcommand[
      MADoptics["\<junk.tfs\>", 
        columns \[Rule] {"\<NAME\>", "\<S\>"}]]\)], "Input"],

Cell[BoxData[
    InterpretationBox[\("MADoptics "\[InvisibleSpace]"junk.tfs"\),
      SequenceForm[ "MADoptics ", "junk.tfs"],
      Editable->False]], "Print"],

Cell[BoxData[
    \(columns \[Rule] {"NAME", "S"}\)], "Print"],

Cell[BoxData[
    \(\*"\<\"\"\>"\)], "Print"],

Cell[BoxData[
    \("OPTICS,CENTRE,filename=\"junk.tfs\",COLUMNS=NAME,S;"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADcommand[
      MADoptics["\<junk.tfs\>", 
        columns \[Rule] {"\<NAME\>", "\<S\>"}, ]]\)], "Input"],

Cell[BoxData[
    \(MADcommand[
      MADoptics["junk.tfs", columns \[Rule] {"NAME", "S"}, Null]]\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["MADealign tests", "Subsection"],

Cell["Tests", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADealign[{1, 2}] // MADcommand\)], "Input"],

Cell[BoxData[
    \("EALIGN,DX=1, DY=2"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADealign[{0, 1, 2}] // MADcommand\)], "Input"],

Cell[BoxData[
    \("EALIGN,DX=0, DY=1, DS=2"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADealign[{0, 
          0, "\<KQF+RANF()\>"}, { .1,  .2,  .3}, { .01,  .02}, { .001}] // 
      MADcommand\)], "Input"],

Cell[BoxData[
    \("EALIGN,DX=0, DY=0, DS=KQF+RANF(), DPHI=0.1, DTHETA=0.2, DPSI=0.3, \
MREX=0.01, MREY=0.02, MSCALX=0.001"\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["User's Guide and Examples", "Section",
  CellTags->"Examples section"],

Cell[TextData[{
  "This section explains the essential concepts behind the ",
  "MADInput",
  " package by means of simple examples illustrating its use.  The basic idea \
is that the package provides a number of ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " functions or objects representing common MAD commands.  These can be \
combined into lists representing sequences of MAD commands in ways that may \
not be easy in the MAD language itself."
}], "Text"],

Cell["\<\
The following sections assume this basic knowledge and goes through \
some of the main features of the package.\
\>", "Text"],

Cell["\<\
If you are not yet convinced that you want to learn anything about \
the package, you may wish to skip this section and proceed directly to the \
two application examples to get an idea of what the package can do for you.   \
Of course, you will understand the details better if you read this section \
first.\
\>", "Text"],

Cell[TextData[{
  "In the following, it is assumed that you are familiar with the MAD \
language and some rudiments of ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  "."
}], "Text"],

Cell[CellGroupData[{

Cell["Quick summary documentation", "Subsection"],

Cell[TextData[{
  "All MADInput  functions  start with the letters \"MAD\".   From ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " 4.1 onwards, evaluation of the followingin the notebook environment will \
give you a clickable list of all of them to aid memory.  Clicking a command \
will give you it's usage message."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?MAD*\)\)], "Input"],

Cell[BoxData[GridBox[{
        {
          StyleBox["Madtomma`MadLanguage`MADInput`",
            FontFamily->"Helvetica",
            FontSize->12,
            FontWeight->"Bold"]},
        {GridBox[{
              {
                ButtonBox[
                  StyleBox["MADarchive",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADarchive"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"], 
                ButtonBox[
                  StyleBox["MADcomment",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADcomment"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"], 
                ButtonBox[
                  StyleBox["MADoptics",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADoptics"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"], 
                ButtonBox[
                  StyleBox["MADrun",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADrun"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"], 
                ButtonBox[
                  StyleBox["MADsetDelayed",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADsetDelayed"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"], 
                ButtonBox[
                  StyleBox["MADsystem",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADsystem"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"], 
                ButtonBox[
                  StyleBox["MADuse",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADuse"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"]},
              {
                ButtonBox[
                  StyleBox["MADassign",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADassign"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"], 
                ButtonBox[
                  StyleBox["MADInput",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADInput"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"], 
                ButtonBox[
                  StyleBox["MADpoolDump",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADpoolDump"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"], 
                ButtonBox[
                  StyleBox["MADselect",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADselect"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"], 
                ButtonBox[
                  StyleBox["MADstart",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADstart"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"], 
                ButtonBox[
                  StyleBox["MADtag",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADtag"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"], 
                ButtonBox[
                  StyleBox["MADXsyntax",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADXsyntax"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"]},
              {
                ButtonBox[
                  StyleBox["MADcall",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADcall"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"], 
                ButtonBox[
                  StyleBox["MADinstall",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADinstall"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"], 
                ButtonBox[
                  StyleBox["MADpoolLoad",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADpoolLoad"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"], 
                ButtonBox[
                  StyleBox["MADseqedit",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADseqedit"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"], 
                ButtonBox[
                  StyleBox["MADstartAA",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADstartAA"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"], 
                ButtonBox[
                  StyleBox["MADtitle",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADtitle"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"], ""},
              {
                ButtonBox[
                  StyleBox["MADcommand",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADcommand"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"], 
                ButtonBox[
                  StyleBox["MADnewElement",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADnewElement"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"], 
                ButtonBox[
                  StyleBox["MADremove",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADremove"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"], 
                ButtonBox[
                  StyleBox["MADset",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADset"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"], 
                ButtonBox[
                  StyleBox["MADstartN",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADstartN"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"], 
                ButtonBox[
                  StyleBox["MADtrack",
                    FontColor->RGBColor[0, 0, 1],
                    FontVariations->{"Underline"->True}],
                  
                  ButtonFunction:>(
                    Internal`PutInformation[ #, LongForm -> False]&),
                  ButtonEvaluator->Automatic,
                  
                  ButtonData:>{"Info3234597653-1697218", 
                    "Madtomma`MadLanguage`MADInput`MADtrack"},
                  ButtonFrame->"None",
                  ButtonNote->"Madtomma`MadLanguage`MADInput`"], ""}
              },
            RowMinHeight->{1, 1, 1, 1.05}]}
        },
      RowSpacings->{2, 3},
      ColumnAlignments->{Left},
      ColumnsEqual->True]], "Print",
  CellMargins->{{20, Inherited}, {Inherited, Inherited}},
  ShowCellLabel->False,
  CellFrameMargins->{{Inherited, Inherited}, {14, 14}},
  Background->GrayLevel[0.930022],
  ButtonBoxOptions->{Active->True}],

Cell[BoxData[
    \("MADtrack[trackcmds,options] is a MADInput object representing the \
tracking of the initial conditions  (usually MADstart objects) and number of \
turns  (usually MADrun objects) defined in trackcmds."\)], "Print",
  CellTags->"Info3234597653-1697218"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Working directory", "Subsection"],

Cell["Choose some directory of your own for the examples", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(SetDirectory["\<C:\\temp\>"]\)], "Input"],

Cell[BoxData[
    \("C:\\temp"\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["What does this package provide?", "Subsection"],

Cell["\<\
Knowing that all the functions in the package have names beginning \
with \"MAD\", a simple way to list all the functions available is\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?MAD*\)\)], "Input"],

Cell["\<\
MADarchive    MADinput      MADoptics     MADremove     MADstart
MADcall       MADinstall    MADpoolDump   MADrun        MADtitle
MADcommand    MADnewElement MADpoolLoad   MADseqedit    MADtrack
MADcomment\
\>", "Print"]
}, Open  ]],

Cell[TextData[{
  StyleBox["\[WarningSign]",
    FontSize->20],
  " A more rigorous way to get the names of all the objects exported by the \
package (the purpose of ",
  StyleBox["TableForm", "Input"],
  " and ",
  StyleBox["Partition[...,4]", "Input"],
  " is only to format the result) is "
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(TableForm[
      Partition[\n\t\tNames["\<Madtomma`MadLanguage`MADInput`*\>"], \n\t\t4]]\
\)], "Input"],

Cell[BoxData[
    TagBox[GridBox[{
          {"\<\"Damp\"\>", "\<\"MADarchive\"\>", "\<\"MADcall\"\>", \
"\<\"MADcommand\"\>"},
          {"\<\"MADcomment\"\>", "\<\"MADinput\"\>", "\<\"MADinstall\"\>", \
"\<\"MADnewElement\"\>"},
          {"\<\"MADoptics\"\>", "\<\"MADpoolDump\"\>", "\<\"MADpoolLoad\"\>", \
"\<\"MADremove\"\>"},
          {"\<\"MADrun\"\>", "\<\"MADseqedit\"\>", "\<\"MADstart\"\>", \
"\<\"MADtitle\"\>"},
          {"\<\"MADtrack\"\>", "\<\"makeMADfile\"\>", "\<\"OnePass\"\>", \
"\<\"Quantum\"\>"}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      (TableForm[ #]&)]], "Output"]
}, Open  ]],

Cell["\<\
This shows how much of the MAD language has been implemented in the \
current version.  In future versions, the list above will grow.\
\>", "Text"],

Cell["\<\
Following the usual convention for packages, each exported function \
has a usage message, e.g., \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?MADstart\)\)], "Input"],

Cell[BoxData[
    \("MADstart[x,px,y,py,t,pt] is a MADinput object representing an initial \
condition for tracking."\)], "Print"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?MADpoolLoad\)\)], "Input"],

Cell[BoxData[
    \("MADpoolLoad[\"filename\"] is a MADinput object representing the \
loading of a pool file."\)], "Print"]
}, Open  ]],

Cell["\<\
In most cases there is  a close correspondence between MAD commands \
and MADInput objects and the names have been chosen to make it easy to guess. \
\
\>", "Text"],

Cell["\<\
Any MAD command, especially one which is not yet represented by an \
object in the package, can be represented directly as a string, e.g., \
\>", \
"Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \("\<select,optics,class=quadrupole\>"\)], "Input"],

Cell[BoxData[
    \("select,optics,class=quadrupole"\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Evaluation of MADInput objects", "Subsection"],

Cell[TextData[{
  "Although they  are ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " functions, ",
  "MADInput",
  " objects do not normally evaluate in any interesting way."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADtitle["\<What is the point of all this?\>"]\)], "Input"],

Cell[BoxData[
    \(MADtitle["What is the point of all this?"]\)], "Output"]
}, Open  ]],

Cell["However their arguments usually evaluate:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    RowBox[{
      RowBox[{"L1", "=", "1.1"}], ";"}], "\n", 
    RowBox[{
      RowBox[{"BPMlength", "=", "0.27"}], ";"}], "\n", 
    RowBox[{
      RowBox[{"L2", "=", 
        RowBox[{".8", "+", "BPMlength"}]}], ";"}], "\n", 
    RowBox[{"MADnewElement", "[", 
      RowBox[{"QD1", ",", 
        RowBox[{"{", 
          RowBox[{"QD", ",", 
            RowBox[{"K1", "\[Rule]", "0.2"}], ",", 
            RowBox[{"L", "\[Rule]", 
              RowBox[{"Min", "[", 
                RowBox[{"L1", ",", "L2"}], "]"}]}]}], "}"}]}], 
      "]"}]}], "Input"],

Cell[BoxData[
    RowBox[{"MADnewElement", "[", 
      RowBox[{"QD1", ",", 
        RowBox[{"{", 
          RowBox[{"QD", ",", 
            RowBox[{"K1", "\[Rule]", 
              StyleBox["0.2`",
                StyleBoxAutoDelete->True,
                PrintPrecision->1]}], 
            ",", \(L \[Rule] 1.07000000000000006`\)}], "}"}]}], 
      "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(L1 = 1.1;\)\), "\n", 
    \(\(BPMlength = 0.27;\)\), "\n", 
    \(\(L2 =  .8 + BPMlength;\)\), "\n", 
    \(MADnewElement["\<QD1\>", {"\<QD\>", "\<K1\>" \[Rule] 0.2, 
        L \[Rule] Min[L1, L2]}]\)}], "Input"],

Cell[BoxData[
    RowBox[{"MADnewElement", "[", 
      RowBox[{"\<\"QD1\"\>", ",", 
        RowBox[{"{", 
          RowBox[{"\<\"QD\"\>", ",", 
            RowBox[{"\<\"K1\"\>", "\[Rule]", 
              StyleBox["0.2`",
                StyleBoxAutoDelete->True,
                PrintPrecision->1]}], 
            ",", \(L \[Rule] 1.07000000000000006`\)}], "}"}]}], 
      "]"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADcommand[%] // FullForm\)], "Input"],

Cell[BoxData[
    TagBox[
      StyleBox["\"\<QD1: QD,K1=0.2,L=1.07\>\"",
        ShowSpecialCharacters->False,
        ShowStringCharacters->True],
      FullForm]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(\(\ \)\(MADstart[0.001\ Cos[\[Phi]], \(10\^\(-5\)\) Sin[\[Phi]], 0, 
        0, 0, 0]\  /. \ \[Phi] \[Rule] \(3  \[Pi]\)\/5\)\)\)], "Input"],

Cell[BoxData[
    \(MADstart[\(-0.000309016994374947451`\), \@\(1\/2\ \((5 + \
\@5)\)\)\/200000, 0, 0, 0, 0]\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Within ",
  StyleBox["Mathematica, ",
    FontSlant->"Italic"],
  "there are many ways to build up lists of ",
  "MADInput",
  " objects.  In the following example, floating point evaluation of the \
numerical quantities is forced by the ",
  StyleBox["N", "Input"],
  " operator (although this is not necessary)."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(initial = 
      N[Table[\ MADstart[0.001\ Cos[\[Phi]], \(10\^\(-5\)\) Sin[\[Phi]], 0, 
            0, 0, 0], \ {\[Phi], 0, 2  \[Pi], \[Pi]\/3}]]\)], "Input"],

Cell[BoxData[
    \({MADstart[0.001`, 0, 0, 0, 0, 0], 
      MADstart[0.0005`, 8.66025403784438552`*^-6, 0, 0, 0, 0], 
      MADstart[\(-0.0005`\), 8.66025403784438552`*^-6, 0, 0, 0, 0], 
      MADstart[\(-0.001`\), 0, 0, 0, 0, 0], 
      MADstart[\(-0.0005`\), \(-8.66025403784438552`*^-6\), 0, 0, 0, 0], 
      MADstart[0.0005`, \(-8.66025403784438552`*^-6\), 0, 0, 0, 0], 
      MADstart[0.001`, 0, 0, 0, 0, 0]}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "So the variable ",
  StyleBox["initial", "Input"],
  " now contains this particular list of initial conditions for tracking.  Of \
course you  can also define functions for your own purposes.   The above \
would be an instance of"
}], "Text"],

Cell[BoxData[
    RowBox[{
      RowBox[{"xPhaseEllipse", "[", 
        RowBox[{"a_", ",", "b_", ",", "n_"}], "]"}], ":=", 
      RowBox[{"Table", "[", 
        RowBox[{
          RowBox[{"MADstart", "[", 
            RowBox[{
              RowBox[{"a", " ", 
                RowBox[{"Cos", "[", "\[Phi]", "]"}]}], ",", 
              RowBox[{"b", " ", 
                RowBox[{"Sin", "[", "\[Phi]", "]"}]}], ",", "0", ",", "0", 
              ",", "0", ",", "0"}], "]"}], ",", 
          RowBox[{"{", 
            RowBox[{"\[Phi]", ",", "0", ",", 
              RowBox[{"2", "\[Pi]"}], ",", 
              FractionBox[
                RowBox[{"2", "\[Pi]"}], "n"]}], "}"}]}], "]"}]}]], "Input"],

Cell["and we can verify that it gives the same result", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(N[xPhaseEllipse[ .001, 10\^\(-5\), 6]] == initial\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Turning MADInput objects into MAD commands", "Subsection"],

Cell[TextData[{
  "The various ",
  "MADInput",
  " objects are defined by the action of the function ",
  StyleBox["MADcommand", "Input"],
  " on them.  Basically, it just transforms them into strings which are \
explicit MAD commands. "
}], "Text"],

Cell[TextData[{
  "For example, the ",
  StyleBox["MADnewElement", "Input"],
  " object defines a new machine element based on an existing one (or on a \
class)"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?MADnewElement\)\)], "Input"],

Cell[BoxData[
    \("MADnewElement[newel,{oldel,attrib1->val1,attrib2->val2}] defines a new \
element on the basis of an old one (or a \"class\" in MAD) with new values \
for some of its attributes."\)], "Print"]
}, Open  ]],

Cell[TextData[{
  "Applying ",
  StyleBox["MADcommand", "Input"],
  " to such an object gives the appropriate MAD command as a string.  The \
following examples should give the idea"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADcommand[
      MADnewElement[QD1, {QD, K1 -> 0.2, L -> Min[L1, L2]}]]\)], "Input"],

Cell[BoxData[
    \("QD1: QD,K1=0.2,L=1.07"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADcommand[
      MADnewElement[SF2, {SEXTUPOLE, K2 -> KSF2, L -> 0.8}]]\)], "Input"],

Cell[BoxData[
    \("SF2: SEXTUPOLE,K2=KSF2,L=0.8"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(basicCols = {"\<NAME\>", "\<S\>", "\<L\>"}; 
    MADcommand[MADoptics["\<junk.tfs\>", columns -> basicCols]]\)], "Input"],

Cell[BoxData[
    \("OPTICS,CENTRE,filename=\"junk.tfs\",columns=NAME, S, L"\)], "Output"]
}, Open  ]],

Cell[TextData[{
  StyleBox["\[WarningSign]",
    FontSize->20],
  " ",
  "The list of  columns needed might be got by set-theoretic union of two \
different sets:"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(moreCols = {"\<NAME\>", "\<BETX\>", "\<BETY\>"}; 
    MADcommand[
      MADoptics["\<junk.tfs\>", 
        columns \[Rule] basicCols \[Union] moreCols]]\)], "Input"],

Cell[BoxData[
    \("OPTICS,CENTRE,filename=\"junk.tfs\",columns=BETX, BETY, L, NAME, \
S"\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Notice that ",
  StyleBox["\"NAME\"", "Input"],
  " does not appear twice."
}], "Text"],

Cell[TextData[{
  "MAD's OPTICS command allows a number of additional, optional arguments., \
such as initial values for the optical funcitons.  All of these can be given \
as options of the ",
  StyleBox["MADoptics", "Input"],
  " function, e.g., "
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADcommand[
      MADoptics["\<junk.tfs\>", 
        columns \[Rule] {"\<NAME\>", "\<S\>", "\<BETX\>"}, 
        DELTAP \[Rule]  .01, BETX \[Rule] 1.1, ALFX \[Rule] 0.002, 
        BETY \[Rule] 1.5]]\)], "Input"],

Cell[BoxData[
    \("OPTICS,CENTRE,filename=\"junk.tfs\",columns=NAME, S, \
BETX,DELTAP=0.01,BETX=1.1,ALFX=0.002,BETY=1.5"\)], "Output"]
}, Open  ]],

Cell["\<\
At present there is no checking that such options are valid.  This \
is left to MAD.\
\>", "Text"],

Cell["\<\
Any MAD command that is not yet implemented as a proper MADInput \
object can be included as an explicit string:  Note that a line-feed is \
always added for safety.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADcommand["\<option,-echo\>"]\)], "Input"],

Cell[BoxData[
    \("option,-echo\n"\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "However note that ",
  StyleBox["anything other",
    FontSlant->"Italic"],
  " than a ",
  "MADInput",
  " object or a string is converted to a MAD comment:"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADcommand[\((\[Zeta]\^2 - \[Nu])\)\/\(\[Integral]\[CapitalGamma][x] \
\[DifferentialD]x\)]\)], "Input"],

Cell[BoxData[
    \("!MADcommand?? (\\[Zeta]^2 - \\[Nu])/Integrate[\\[CapitalGamma][x], x]"\
\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Since ",
  StyleBox["MADcommand", "Input"],
  " has the attribute ",
  StyleBox["Listable", "Input"],
  ", a list of ",
  "MADInput",
  " objects gets converted into a list of command strings:"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADcommand[initial]\)], "Input"],

Cell[BoxData[
    \({"start,X=0.001,PX=0,Y=0,PY=0,T=0,DELTAP=0", 
      "start,X=0.0005,PX=8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0", 
      "start,X=-0.0005,PX=8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0", 
      "start,X=-0.001,PX=0,Y=0,PY=0,T=0,DELTAP=0", 
      "start,X=-0.0005,PX=-8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0", 
      "start,X=0.0005,PX=-8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0", 
      "start,X=0.001,PX=0,Y=0,PY=0,T=0,DELTAP=0"}\)], "Output"]
}, Open  ]],

Cell["\<\
Any further list structure is maintained in this list of \
strings\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADcommand[Partition[initial, 2]]\)], "Input"],

Cell[BoxData[
    \({{"start,X=0.001,PX=0,Y=0,PY=0,T=0,DELTAP=0", 
        "start,X=0.0005,PX=8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0"}, \
{"start,X=-0.0005,PX=8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0", 
        "start,X=-0.001,PX=0,Y=0,PY=0,T=0,DELTAP=0"}, \
{"start,X=-0.0005,PX=-8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0", 
        "start,X=0.0005,PX=-8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0"}}\)], \
"Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Creating a MAD input file", "Subsection"],

Cell["\<\
A common way to use MAD commands is to place them in a file and \
submit them to MAD.  A function is provided to do this\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    RowBox[{"?", "makeMADfile"}]], "Input"],

Cell[BoxData[
    \("makeMADfile[\"filename\",mlist] converts  the MADinput objects in \
mlist to a MAD input file.  If filename exists, a copy is saved before it is \
overwritten."\)], "Print"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    RowBox[{"makeMADfile", "[", 
      RowBox[{"\"\<junk2.mad\>\"", ",", "initial"}], "]"}]], "Input"],

Cell[BoxData["\<\"junk2.mad\"\>"], "Output"]
}, Open  ]],

Cell["\<\
The contents of this file can be displayed.  Note that a \"return\" \
command has been added at the end.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    RowBox[{"!!", "junk2.mad"}]], "Input"],

Cell["\<\
start,X=0.001,PX=0,Y=0,PY=0,T=0,DELTAP=0
start,X=0.0005,PX=8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0
start,X=-0.0005,PX=8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0
start,X=-0.001,PX=0,Y=0,PY=0,T=0,DELTAP=0
start,X=-0.0005,PX=-8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0
start,X=0.0005,PX=-8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0
start,X=0.001,PX=0,Y=0,PY=0,T=0,DELTAP=0
return
!
\
\>", "Print"]
}, Open  ]],

Cell[TextData[{
  "Note that ",
  StyleBox["makeMADfile", "Input"],
  " includes the translation to MAD commands via ",
  StyleBox["MADcommand", "Input"],
  ".  So you only need to use ",
  StyleBox["MADcommand", "Input"],
  " explicitly if you want to look at the MAD commands before putting them in \
a file."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(proc = {MADpoolLoad["\<ideal.pool\>"], "\<select,optics,full\>", \n\t\t\
MADoptics["\<seq.tfs\>", columns -> cols]}\)], "Input"],

Cell[BoxData[
    \({MADpoolLoad["ideal.pool"], "select,optics,full", 
      MADoptics["seq.tfs", columns \[Rule] cols]}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(makeMADfile["\<junk3.mad\>", {\n\t\tMADpoolLoad["\<ideal.pool\>"], \n\t\
\t\t"\<select,optics,full\>", \n\t\tMADoptics["\<seq.tfs\>", 
          columns -> cols]\n\t}]\)], "Input"],

Cell[BoxData[
    \("junk3.mad"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(!! junk3.mad\)\)], "Input"],

Cell["\<\
poolload,\"ideal.pool\"
select,optics,full
OPTICS,CENTRE,filename=\"seq.tfs\",columns=cols
return
!
\
\>", "Print"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADcommand[MADpoolLoad["\<ideal.pool\>"]]\)], "Input"],

Cell[BoxData["\<\"poolload,\\\"ideal.pool\\\"\"\>"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(MADcommand[{MADcomment["\<What to say?\>"], 
            MADtitle["\<Funny configuration\>"], "\<MATCH\>"}] // Flatten\) // 
      TableForm\)], "Input"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {"\<\"! What to say?\"\>"},
          {"\<\" \"\>"},
          {"\<\"TITLE,\\\"Funny configuration\\\"\"\>"},
          {"\<\"MATCH\\n\"\>"}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      TableForm[ {"! What to say?", " ", "TITLE,\"Funny configuration\"", 
        "MATCH\n"}]]], "Output"]
}, Open  ]],

Cell[TextData[{
  "This works over multiply-nested  lists of MAD functions since ",
  StyleBox["MADcommand", "Input"],
  " is listable and provided ",
  StyleBox["MADcommand", "Input"],
  " always returns a list."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(makeMADfile["\<junk.mad\>", {MADstart[0, 0, 0, 0, 0, 0], 
        MADstart[1, 1, 1, 1, 1, 1]}]\)], "Input"],

Cell[BoxData[
    \("junk.mad"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(!! junk.mad\)\)], "Input"],

Cell["\<\
start,X=0,PX=0,Y=0,PY=0,T=0,DELTAP=0
start,X=1.,PX=1.,Y=1.,PY=1.,T=1.,DELTAP=1.
return
!
\
\>", "Print"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(makeMADfile["\<junk.mad\>", {MADstart[0, 0, 0, 0, 0, 0], 
        MADstart[1, 1, 1, 1, 1, 1], {MADstart[0, 0, 0, 0, 0, 2], 
          MADstart[1, 1, 1, 1, 2, 1]}}]\)], "Input"],

Cell[BoxData[
    \("junk.mad"\)], "Output"]
}, Open  ]]
}, Closed]],

Cell["Running MAD with your input file", "Subsection"],

Cell[CellGroupData[{

Cell["Avoiding typing and remembering  commands", "Subsection"],

Cell["\<\
To avoid typing and remembering the commands, the package comes \
with a palette of buttons that generate the basic syntax of the common \
commands.\
\>", "Text"],

Cell[TextData[{
  "If you cannot find the palette file, you can re-generate it by selecting \
the following cell and using the menu item ",
  StyleBox["File/Generate Palette from Selection",
    FontWeight->"Bold"]
}], "Text"],

Cell[BoxData[GridBox[{
        {
          ButtonBox[\(Needs["\<Madtomma`MadLanguage`MADInput`\>"]\)]},
        {
          ButtonBox[\(MADcall[\[SelectionPlaceholder]]\)]},
        {
          ButtonBox[\(MADtitle[\[SelectionPlaceholder]]\)]},
        {
          
          ButtonBox[\(MADnewElement[\[SelectionPlaceholder], \[Placeholder] \
\[Rule] \[Placeholder]]\)]},
        {
          
          ButtonBox[\(MADtwiss["\<\[SelectionPlaceholder].tfs\>", "\<\
\[Placeholder]\>", \[IndentingNewLine]{"\<NAME\>", "\<S\>", "\<BETX\>"}, \
\[IndentingNewLine]{{"\<RANGE\>" \[Rule] \[Placeholder], "\<CLASS\>" \[Rule] \
\[Placeholder], "\<PATTERN\>" \[Rule] \[Placeholder]}}]\)]},
        {
          
          ButtonBox[\(MADtwiss["\<\[SelectionPlaceholder].tfs\>", "\<\
\[Placeholder]\>", \[IndentingNewLine]{"\<NAME\>", "\<S\>", "\<BETX\>"}, \
\[IndentingNewLine]{{"\<RANGE\>" \[Rule] \[Placeholder], "\<CLASS\>" \[Rule] \
\[Placeholder], "\<PATTERN\>" \[Rule] \[Placeholder]}}, \[IndentingNewLine]{"\
\<BETX\>" \[Rule] 1, "\<BETA0\>" \[Rule] \[Placeholder]}]\)]},
        {
          
          ButtonBox[\(MADoptics[\[SelectionPlaceholder], 
              columns -> {"\<NAME\>", "\<\[Placeholder]\>"}]\)]},
        {
          
          ButtonBox[\(MADseqedit[\[SelectionPlaceholder], \
\[Placeholder]]\)]},
        {
          
          ButtonBox[\(MADinstall[\[SelectionPlaceholder], 
              AT \[Rule] \[Placeholder], FROM \[Rule] \[Placeholder]]\)]},
        {
          ButtonBox[\(MADremove[\[SelectionPlaceholder]]\)]},
        {
          
          ButtonBox[\(MADtrack[{\[SelectionPlaceholder], 
                MADrun[\[Placeholder]]}]\)]},
        {
          
          ButtonBox[\(MADstart[\[SelectionPlaceholder], \[Placeholder], \
\[Placeholder], \[Placeholder], \[Placeholder], \[Placeholder]]\)]},
        {
          ButtonBox[""]},
        {
          ButtonBox[\(MADcommand[\[SelectionPlaceholder]]\)]},
        {
          
          ButtonBox[\(makeMADfile[\[Placeholder], \
\[SelectionPlaceholder]]\)]}
        },
      RowSpacings->0,
      ColumnSpacings->0,
      GridDefaultElement:>ButtonBox[ "\\[Placeholder]"]]], "Input",
  Background->GrayLevel[1]],

Cell["\<\
You may of course wish to customise this palette or incorporate it \
in one of your own.\
\>", "Text"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["A tour of the package", "Section"],

Cell["\<\
This section goes through the main categories of functions \
implemented so far in the package and illustrates their use with examples.  \
Sometimes, as usual in software manuals, only the simplest possible example \
is presented.  However many of the examples have been made a little more \
complicated in order to illustrate useful techniques and give a flavour of \
what is possible.  Experienced MAD users may wish to think about and compare \
how they would have worked the same examples by writing MAD scripts with an \
editor.\
\>", "Text"],

Cell["Creating new beam-line elements", "Subsection"],

Cell["Editing MAD sequences", "Subsection"],

Cell[CellGroupData[{

Cell["Action commands", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?MADoptics\)\)], "Input"],

Cell[BoxData[
    \("MADoptics[\"filename\",columns->{\"col1\",\"col1\",...}] is a MADinput \
object representing the generation of an OPTICS table file."\)], "Print"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Tracking", "Subsection"],

Cell[TextData[{
  "A ",
  ButtonBox["tracking session in MAD",
    ButtonData:>{
      URL[ "http://wwwslap.cern.ch/~fci/mad/mad8/track.html"], None},
    ButtonStyle->"Hyperlink"],
  " is embedded between TRACK and ENDTRACK commands.  In the ",
  "MADInput",
  " package a ",
  StyleBox["MADtrack", "Input"],
  " command takes care of both of these."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?MADtrack\)\)], "Input"],

Cell[BoxData[
    \("MADtrack[trackcmds,options] is a MADinput object representing the \
tracking of the initial conditions  (usually MADstart objects) and number of \
turns  (usually MADrun objects) defined in trackcmds."\)], "Print"]
}, Open  ]],

Cell["It has options corresponding to those of MAD's TRACK command", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Options[MADtrack]\)], "Input"],

Cell[BoxData[
    \({OnePass \[Rule] False, Damp \[Rule] False, 
      Quantum \[Rule] False}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "The most rudimentary tracking session requires a ",
  StyleBox["MADrun", "Input"],
  " command in order to specify the number of turns to be tracked."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(MADcommand[\n\t
          MADtrack[{MADstart[0.002, 0, 0, 0, 0, 0], MADrun[1000]}]\n] // 
        Flatten\) // TableForm\)], "Input"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {"\<\"TRACK ,-DAMP ,-QUANTUM ,-ONEPASS\"\>"},
          {"\<\"start,X=0.002,PX=0,Y=0,PY=0,T=0,DELTAP=0\"\>"},
          {"\<\"RUN,TURNS=1000,table=TRACK\"\>"},
          {"\<\"ENDTRACK\"\>"}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      TableForm[ {"TRACK ,-DAMP ,-QUANTUM ,-ONEPASS", 
        "start,X=0.002,PX=0,Y=0,PY=0,T=0,DELTAP=0", 
        "RUN,TURNS=1000,table=TRACK", "ENDTRACK"}]]], "Output"]
}, Open  ]],

Cell[TextData[{
  "Since the variable ",
  StyleBox["initial", "Input"],
  " defined above already contains a set of initial conditions, we can use it \
to build a slightly more complicated example of a complete tracking job.  The \
tracking part can be specified in one line.  This one starts by loading a \
pool file saved in a previous MAD run."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(trackjob1 = {\n\t\tMADtitle["\<Tracking example\>"], \n\t\t\
MADpoolLoad["\<test.pool\>"], \n\t\tMADtrack[{initial, MADrun[900]}, 
          Damp -> True], \n\t
        MADarchive[TRACK, "\<tracking.tfs\>"]\n\t}\)], "Input"],

Cell[BoxData[
    \({MADtitle["Tracking example"], MADpoolLoad["test.pool"], 
      MADtrack[{{MADstart[0.001`, 0, 0, 0, 0, 0], 
            MADstart[0.0005`, 8.66025403784438552`*^-6, 0, 0, 0, 0], 
            MADstart[\(-0.0005`\), 8.66025403784438552`*^-6, 0, 0, 0, 0], 
            MADstart[\(-0.001`\), 0, 0, 0, 0, 0], 
            MADstart[\(-0.0005`\), \(-8.66025403784438552`*^-6\), 0, 0, 0, 
              0], MADstart[0.0005`, \(-8.66025403784438552`*^-6\), 0, 0, 0, 
              0], MADstart[0.001`, 0, 0, 0, 0, 0]}, MADrun[900]}, 
        Damp \[Rule] True], MADarchive[TRACK, "tracking.tfs"]}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(\(trackjob1 // MADcommand\) // Flatten\) // TableForm\)], "Input"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {"\<\" \"\>"},
          {"\<\"TITLE,\\\"Tracking example\\\"\"\>"},
          {"\<\"poolload,\\\"test.pool\\\"\"\>"},
          {"\<\"TRACK ,DAMP ,-QUANTUM ,-ONEPASS\"\>"},
          {"\<\"start,X=0.001,PX=0,Y=0,PY=0,T=0,DELTAP=0\"\>"},
          {"\<\"start,X=0.0005,PX=8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0\"\
\>"},
          {"\<\"start,X=-0.0005,PX=8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0\"\
\>"},
          {"\<\"start,X=-0.001,PX=0,Y=0,PY=0,T=0,DELTAP=0\"\>"},
          {"\<\"start,X=-0.0005,PX=-8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0\
\"\>"},
          {"\<\"start,X=0.0005,PX=-8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0\"\
\>"},
          {"\<\"start,X=0.001,PX=0,Y=0,PY=0,T=0,DELTAP=0\"\>"},
          {"\<\"RUN,TURNS=900,table=TRACK\"\>"},
          {"\<\"ENDTRACK\"\>"},
          {\("archive,table=TRACK,filename=\"tracking.tfs\"\n"\)}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      TableForm[ {" ", "TITLE,\"Tracking example\"", "poolload,\"test.pool\"",
         "TRACK ,DAMP ,-QUANTUM ,-ONEPASS", 
        "start,X=0.001,PX=0,Y=0,PY=0,T=0,DELTAP=0", 
        "start,X=0.0005,PX=8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0", 
        "start,X=-0.0005,PX=8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0", 
        "start,X=-0.001,PX=0,Y=0,PY=0,T=0,DELTAP=0", 
        "start,X=-0.0005,PX=-8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0", 
        "start,X=0.0005,PX=-8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0", 
        "start,X=0.001,PX=0,Y=0,PY=0,T=0,DELTAP=0", 
        "RUN,TURNS=900,table=TRACK", "ENDTRACK", 
        "archive,table=TRACK,filename=\"tracking.tfs\"\n"}]]], "Output"]
}, Open  ]],

Cell[TextData[{
  "Suppose that we want to increase the ",
  Cell[BoxData[
      \(TraditionalForm\`p\_x\)]],
  " component of the initial conditions by a factor of 3.  This is easily \
done with pattern matching:"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(initial3 = 
      initial /. MADstart[x_, px_, rest__] \[Rule] 
          MADstart[x, 3  px, rest]\)], "Input"],

Cell[BoxData[
    \({MADstart[0.001`, 0, 0, 0, 0, 0], 
      MADstart[0.0005`, 0.0000259807621135331512`, 0, 0, 0, 0], 
      MADstart[\(-0.0005`\), 0.0000259807621135331512`, 0, 0, 0, 0], 
      MADstart[\(-0.001`\), 0, 0, 0, 0, 0], 
      MADstart[\(-0.0005`\), \(-0.0000259807621135331512`\), 0, 0, 0, 0], 
      MADstart[0.0005`, \(-0.0000259807621135331512`\), 0, 0, 0, 0], 
      MADstart[0.001`, 0, 0, 0, 0, 0]}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Then one can easily build a complete tracking job for both the original \
set ",
  StyleBox["initial", "Input"],
  " and the scaled ",
  StyleBox["initial3", "Input"],
  ".  To eliminate the duplication that occurs because some initial \
conditions have ",
  Cell[BoxData[
      \(TraditionalForm\`p\_x = 0\)]],
  ", we can take the set-theoretic union of the two sets of initial \
conditions"
}], "Text"],

Cell[BoxData[
    \(\(trackjob2 = {\n\t\tMADtitle["\<Tracking example\>"], \n\t\t\
MADpoolLoad["\<test.pool\>"], \n\t\tMADtrack[{\ \ \ initial \[Union] 
                initial3, \ \ MADrun[900]}, Damp -> True], \n\t\tMADarchive[
            TRACK, "\<tracking.tfs\>"]\n\t};\)\)], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(MADcommand[trackjob2] // Flatten\) // TableForm\)], "Input"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {"\<\" \"\>"},
          {"\<\"TITLE,\\\"Tracking example\\\"\"\>"},
          {"\<\"poolload,\\\"test.pool\\\"\"\>"},
          {"\<\"TRACK ,DAMP ,-QUANTUM ,-ONEPASS\"\>"},
          {"\<\"start,X=-0.001,PX=0,Y=0,PY=0,T=0,DELTAP=0\"\>"},
          {"\<\"start,X=-0.0005,PX=-0.00002598076211353315,Y=0,PY=0,T=0,\
DELTAP=0\"\>"},
          {"\<\"start,X=-0.0005,PX=-8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0\
\"\>"},
          {"\<\"start,X=-0.0005,PX=8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0\"\
\>"},
          {"\<\"start,X=-0.0005,PX=0.00002598076211353315,Y=0,PY=0,T=0,DELTAP=\
0\"\>"},
          {"\<\"start,X=0.0005,PX=-0.00002598076211353315,Y=0,PY=0,T=0,DELTAP=\
0\"\>"},
          {"\<\"start,X=0.0005,PX=-8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0\"\
\>"},
          {"\<\"start,X=0.0005,PX=8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0\"\
\>"},
          {"\<\"start,X=0.0005,PX=0.00002598076211353315,Y=0,PY=0,T=0,DELTAP=\
0\"\>"},
          {"\<\"start,X=0.001,PX=0,Y=0,PY=0,T=0,DELTAP=0\"\>"},
          {"\<\"RUN,TURNS=900,table=TRACK\"\>"},
          {"\<\"ENDTRACK\"\>"},
          {\("archive,table=TRACK,filename=\"tracking.tfs\"\n"\)}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      TableForm[ {" ", "TITLE,\"Tracking example\"", "poolload,\"test.pool\"",
         "TRACK ,DAMP ,-QUANTUM ,-ONEPASS", 
        "start,X=-0.001,PX=0,Y=0,PY=0,T=0,DELTAP=0", 
        "start,X=-0.0005,PX=-0.00002598076211353315,Y=0,PY=0,T=0,DELTAP=0", 
        "start,X=-0.0005,PX=-8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0", 
        "start,X=-0.0005,PX=8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0", 
        "start,X=-0.0005,PX=0.00002598076211353315,Y=0,PY=0,T=0,DELTAP=0", 
        "start,X=0.0005,PX=-0.00002598076211353315,Y=0,PY=0,T=0,DELTAP=0", 
        "start,X=0.0005,PX=-8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0", 
        "start,X=0.0005,PX=8.66025403784439e-6,Y=0,PY=0,T=0,DELTAP=0", 
        "start,X=0.0005,PX=0.00002598076211353315,Y=0,PY=0,T=0,DELTAP=0", 
        "start,X=0.001,PX=0,Y=0,PY=0,T=0,DELTAP=0", 
        "RUN,TURNS=900,table=TRACK", "ENDTRACK", 
        "archive,table=TRACK,filename=\"tracking.tfs\"\n"}]]], "Output"]
}, Open  ]],

Cell[TextData[{
  "The capabilities of the ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " language open up many possibilities.  For example, one could combine the \
generation of tracking jobs with running MAD, reading in the file ",
  StyleBox["tracking.tfs", "Input"],
  " and preparing a new run until some criterion is satisfied."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Input files, pool dumps, tables", "Subsection"],

Cell["\<\
The command for reading in an alternative MAD input file is rather \
obvious\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?MADcall\)\)], "Input"],

Cell[BoxData[
    \("MADcall[\"filename\"] is a MADinput object representing the switch to \
an alternative input file."\)], "Print"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADcommand[\ MADcall["\<proc4.mad\>"]]\)], "Input"],

Cell[BoxData[
    \({"call,filename=\"proc4.mad\""}\)], "Output"]
}, Open  ]],

Cell["\<\
One might wish to read in all the MAD files in the current \
directory (however many there happen to be!) and then carry out a sequence of \
MAD commands after each file is loaded.  Here is an example (using pure \
function syntax) which makes an OPTICS file for the settings in each file, \
ensuring that each has an appropriate name and contains an appropriate title \
to identify it.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(parameterScan = 
      Map[\n\t\t{MADcall[#], \n\t\t\tMADtitle["\<Betas for parameters in: \>" \
<> #], \n\t\t\tMADoptics[StringReplace[#, {"\<.mad\>" \[Rule] "\<.tfs\>"}], 
              columns -> {"\<NAME\>", "\<BETX\>", "\<BETY\>"}]\t\n\t\t} &, \n\
\t\tFileNames["\<*.mad\>"]]\)], "Input"],

Cell[BoxData[
    \({{MADcall["junk1.mad"], MADtitle["Betas for parameters in: junk1.mad"], 
        MADoptics["junk1.tfs", 
          columns \[Rule] {"NAME", "BETX", "BETY"}]}, {MADcall["junk2.mad"], 
        MADtitle["Betas for parameters in: junk2.mad"], 
        MADoptics["junk2.tfs", 
          columns \[Rule] {"NAME", "BETX", "BETY"}]}, {MADcall["junk3.mad"], 
        MADtitle["Betas for parameters in: junk3.mad"], 
        MADoptics["junk3.tfs", 
          columns \[Rule] {"NAME", "BETX", "BETY"}]}, {MADcall["junk9.mad"], 
        MADtitle["Betas for parameters in: junk9.mad"], 
        MADoptics["junk9.tfs", 
          columns \[Rule] {"NAME", "BETX", "BETY"}]}}\)], "Output"]
}, Open  ]],

Cell["These MADInput objects turn into the following MAD commands:", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(\(parameterScan // MADcommand\) // Flatten\) // TableForm\)], "Input"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {"\<\"call,filename=\\\"junk1.mad\\\"\"\>"},
          {"\<\" \"\>"},
          {"\<\"TITLE,\\\"Betas for parameters in: junk1.mad\\\"\"\>"},
          {"\<\"OPTICS,CENTRE,filename=\\\"junk1.tfs\\\",columns=NAME, BETX, \
BETY\"\>"},
          {"\<\"call,filename=\\\"junk2.mad\\\"\"\>"},
          {"\<\" \"\>"},
          {"\<\"TITLE,\\\"Betas for parameters in: junk2.mad\\\"\"\>"},
          {"\<\"OPTICS,CENTRE,filename=\\\"junk2.tfs\\\",columns=NAME, BETX, \
BETY\"\>"},
          {"\<\"call,filename=\\\"junk3.mad\\\"\"\>"},
          {"\<\" \"\>"},
          {"\<\"TITLE,\\\"Betas for parameters in: junk3.mad\\\"\"\>"},
          {"\<\"OPTICS,CENTRE,filename=\\\"junk3.tfs\\\",columns=NAME, BETX, \
BETY\"\>"},
          {"\<\"call,filename=\\\"junk9.mad\\\"\"\>"},
          {"\<\" \"\>"},
          {"\<\"TITLE,\\\"Betas for parameters in: junk9.mad\\\"\"\>"},
          {"\<\"OPTICS,CENTRE,filename=\\\"junk9.tfs\\\",columns=NAME, BETX, \
BETY\"\>"}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      TableForm[ {"call,filename=\"junk1.mad\"", " ", 
        "TITLE,\"Betas for parameters in: junk1.mad\"", 
        "OPTICS,CENTRE,filename=\"junk1.tfs\",columns=NAME, BETX, BETY", 
        "call,filename=\"junk2.mad\"", " ", 
        "TITLE,\"Betas for parameters in: junk2.mad\"", 
        "OPTICS,CENTRE,filename=\"junk2.tfs\",columns=NAME, BETX, BETY", 
        "call,filename=\"junk3.mad\"", " ", 
        "TITLE,\"Betas for parameters in: junk3.mad\"", 
        "OPTICS,CENTRE,filename=\"junk3.tfs\",columns=NAME, BETX, BETY", 
        "call,filename=\"junk9.mad\"", " ", 
        "TITLE,\"Betas for parameters in: junk9.mad\"", 
        "OPTICS,CENTRE,filename=\"junk9.tfs\",columns=NAME, BETX, BETY"}]]], \
"Output"]
}, Open  ]],

Cell[TextData[{
  "Suppose we realised that we would rather have saved a TWISS table than an \
OPTICS table.  In the MAD language, the OPTICS command has to be replaced by \
a TWISS command and an ARCHIVE command with the filename that was previously \
on the OPTICS command. Of course this can be done by manually editing a MAD \
input file but it is much easier, ",
  StyleBox["and less error-prone",
    FontSlant->"Italic"],
  ", with a replacement rule that does pattern-matching on the ",
  "MADInput",
  " object:"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(parameterScan\  /. 
      MADoptics[file_, _] \[Rule] {"\<TWISS,SAVE\>", 
          MADarchive["\<TWISS\>", file]}\)], "Input"],

Cell[BoxData[
    \({{MADcall["junk1.mad"], 
        MADtitle["Betas for parameters in: junk1.mad"], {"TWISS,SAVE", 
          MADarchive["TWISS", "junk1.tfs"]}}, {MADcall["junk2.mad"], 
        MADtitle["Betas for parameters in: junk2.mad"], {"TWISS,SAVE", 
          MADarchive["TWISS", "junk2.tfs"]}}, {MADcall["junk3.mad"], 
        MADtitle["Betas for parameters in: junk3.mad"], {"TWISS,SAVE", 
          MADarchive["TWISS", "junk3.tfs"]}}, {MADcall["junk9.mad"], 
        MADtitle["Betas for parameters in: junk9.mad"], {"TWISS,SAVE", 
          MADarchive["TWISS", "junk9.tfs"]}}}\)], "Output"]
}, Open  ]],

Cell["The MAD script looks like", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(\(% // MADcommand\) // Flatten\) // TableForm\)], "Input"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {"\<\"call,filename=\\\"junk1.mad\\\"\"\>"},
          {"\<\" \"\>"},
          {"\<\"TITLE,\\\"Betas for parameters in: junk1.mad\\\"\"\>"},
          {\("TWISS,SAVE\n"\)},
          {\("archive,table=TWISS,filename=\"junk1.tfs\"\n"\)},
          {"\<\"call,filename=\\\"junk2.mad\\\"\"\>"},
          {"\<\" \"\>"},
          {"\<\"TITLE,\\\"Betas for parameters in: junk2.mad\\\"\"\>"},
          {\("TWISS,SAVE\n"\)},
          {\("archive,table=TWISS,filename=\"junk2.tfs\"\n"\)},
          {"\<\"call,filename=\\\"junk3.mad\\\"\"\>"},
          {"\<\" \"\>"},
          {"\<\"TITLE,\\\"Betas for parameters in: junk3.mad\\\"\"\>"},
          {\("TWISS,SAVE\n"\)},
          {\("archive,table=TWISS,filename=\"junk3.tfs\"\n"\)},
          {"\<\"call,filename=\\\"junk9.mad\\\"\"\>"},
          {"\<\" \"\>"},
          {"\<\"TITLE,\\\"Betas for parameters in: junk9.mad\\\"\"\>"},
          {\("TWISS,SAVE\n"\)},
          {\("archive,table=TWISS,filename=\"junk9.tfs\"\n"\)}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      TableForm[ {"call,filename=\"junk1.mad\"", " ", 
        "TITLE,\"Betas for parameters in: junk1.mad\"", "TWISS,SAVE\n", 
        "archive,table=TWISS,filename=\"junk1.tfs\"\n", 
        "call,filename=\"junk2.mad\"", " ", 
        "TITLE,\"Betas for parameters in: junk2.mad\"", "TWISS,SAVE\n", 
        "archive,table=TWISS,filename=\"junk2.tfs\"\n", 
        "call,filename=\"junk3.mad\"", " ", 
        "TITLE,\"Betas for parameters in: junk3.mad\"", "TWISS,SAVE\n", 
        "archive,table=TWISS,filename=\"junk3.tfs\"\n", 
        "call,filename=\"junk9.mad\"", " ", 
        "TITLE,\"Betas for parameters in: junk9.mad\"", "TWISS,SAVE\n", 
        "archive,table=TWISS,filename=\"junk9.tfs\"\n"}]]], "Output"]
}, Closed]],

Cell[TextData[{
  "Similarly, the commands for ",
  ButtonBox["dumping and reloading MAD's memory",
    ButtonData:>{
      URL[ "http://wwwslap.cern.ch/~fci/mad/mad8/pool_dump.html"], None},
    ButtonStyle->"Hyperlink"],
  " require little explanation"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?MADpoolDump\)\)], "Input"],

Cell[BoxData[
    \("MADpoolDump[\"filename\"] is a MADinput object representing the saving \
of a pool file."\)], "Print"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?MADpoolLoad\)\)], "Input"],

Cell[BoxData[
    \("MADpoolLoad[\"filename\"] is a MADinput object representing the \
loading of a pool file."\)], "Print"]
}, Open  ]],

Cell[TextData[{
  "There are commands for",
  ButtonBox[" dumping tables",
    ButtonData:>{
      URL[ "http://wwwslap.cern.ch/~fci/mad/mad8/archive.html"], None},
    ButtonStyle->"Hyperlink"]
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?MADarchive\)\)], "Input"],

Cell[BoxData[
    \("MADarchive[tbl,\"filename\"]is a MADinput object representing the \
saving of a MAD table in a file called filename.  The table type tbl can be \
TRACK, EIGEN, TWISS, etc.  It is safer to put it in quotes."\)], "Print"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["External System Commands", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADcommand[MADsystem["\<pwd\>"]]\)], "Input"],

Cell[BoxData[
    \("system,\"pwd\";"\)], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Structuring complex MAD command sequences", "Subsection"],

Cell["Illustrate MADtag", "Text"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
  StyleBox["\[WarningSign]",
    FontSize->20],
  " Inventing  a new ",
  "MADInput",
  " object"
}], "Subsection"],

Cell["\<\
If you need a new MADInput object, not yet defined by the package, \
the best thing to do is have the package upgraded.  However if this is not \
possible, you can define your own as in the following example.\
\>", "Text"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Practical example A: Inserting Beam-Beam Encounters", "Section"],

Cell["See \"Notebook for generating MAD description\" at ", "Text"],

Cell[TextData[ButtonBox["http://wwwslap.cern.ch/~jowett/Madtomma/\
CollisionSchedule/",
  ButtonData:>{
    URL[ "http://wwwslap.cern.ch/~jowett/Madtomma/CollisionSchedule/"], None},
  
  ButtonStyle->"Hyperlink"]], "Text"]
}, Closed]],

Cell["Practical example B: Interactive Tracking", "Section"],

Cell[CellGroupData[{

Cell["Unravelling a sequence of CALL files", "Section"],

Cell["\<\
How to explicitly expand out MAD files in a calling chain.  Would \
need to deal with Call commands given as explicit strings.  TO BE WRITTEN \
PROPERLY.  Still to deal with CALL command given as string.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    RowBox[{"TableForm", "[", 
      RowBox[{"MADcommand", "[", 
        RowBox[{"Flatten", "[", 
          RowBox[{"trybump", "/.", 
            RowBox[{
              RowBox[{"MADcall", "[", "fn_", "]"}], "\[RuleDelayed]", 
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"MADcomment", "[", 
                    RowBox[{
                    "\"\<<BEGIN: \>\"", "<>", "fn", "<>", "\"\< >\>\""}], 
                    "]"}], ",", 
                  RowBox[{"ReadList", "[", 
                    RowBox[{
                      RowBox[{"toWindowsName", "[", "fn", "]"}], ",", 
                      "String"}], "]"}], ",", 
                  RowBox[{"MADcomment", "[", 
                    RowBox[{
                    "\"\<<END: \>\"", "<>", "fn", "<>", "\"\< >\>\""}], 
                    "]"}]}], "}"}]}]}], "]"}], "]"}], "]"}]], "Input"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {"\<\"poolload,\\\"baseOptics.pool\\\"\"\>"},
          {\("assign,print=\"trybump.mou\"\n"\)},
          {\("assign,echo=\"trybump.mou\"\n"\)},
          {"\<\"! <BEGIN: \
/afs/cern.ch/user/j/jowett/public/lhc98/V6.-2/xorbitIP2.mad >\"\>"},
          {\("\n"\)},
          {\("System,\"ln -fs /afs/cern.ch/user/b/bruening/lhc/optics/toolkit \
lt\"\n"\)},
          {\("call, \"lt/insert-tdi.ip2\"  ! added by JMJ\n"\)},
          {\("call, \"lt/select.ir2\" ! bir2 -> optic function at s.DS.L2\n\
"\)},
          {\("                      ! eir2 -> optic function at e.DS.R2\n\
"\)},
          {\("\n"\)},
          {\("cross_rot:=-90*pi/180 ! -> vertical crossing angle, parallel \
horizontal\n"\)},
          {\("cross_sep:=0.002\n"\)},
          {\("!cross_sep:=0.000\n"\)},
          {\("cross_ksi:=0.000160\n"\)},
          {\("!cross_sep:=0.0000\n"\)},
          {\("!cross_ksi:=0.000150\n"\)},
          {\("\n"\)},
          {\("xc0 :=-cross_sep*sin(cross_rot)\n"\)},
          {\("pxc0:= cross_ksi*cos(cross_rot)\n"\)},
          {\("yc0 := cross_sep*cos(cross_rot)\n"\)},
          {\("pyc0:= cross_ksi*sin(cross_rot)\n"\)},
          {\("\n"\)},
          {\("MATCH, beta0=bir2, mux=0.0, muy=0.0\n"\)},
          {\("VARY, KV2.L2 ,STEP=1.0E-07\n"\)},
          {\("WEIGHT,     x = 1, px =  1, y = 1, py = 1\n"\)},
          {\("CONSTRAINT, range= MKI.A,     Y =  2.7E-3\n"\)},
          {\("LMDIF,      CALLS = 1000, TOLERANCE = 1.0E-12\n"\)},
          {\("ENDMATCH\n"\)},
          {\("\n"\)},
          {\("\n"\)},
          {\("MATCH, beta0=bir2, mux=0.0, muy=0.0\n"\)},
          {\("VARY, KH1.L2 ,STEP=1.0E-07\n"\)},
          {\("VARY, KV1.L2 ,STEP=1.0E-07\n"\)},
          {\("VARY, KH1.R2 ,STEP=1.0E-07\n"\)},
          {\("VARY, KV1.R2 ,STEP=1.0E-07\n"\)},
          {\("VARY, KH2.L2 ,STEP=1.0E-07\n"\)},
          {\("!VARY, KV2.L2 ,STEP=1.0E-07\n"\)},
          {\("VARY, KH2.R2 ,STEP=1.0E-07\n"\)},
          {\("VARY, KV2.R2 ,STEP=1.0E-07\n"\)},
          {\("WEIGHT,     x = 1, px =  1, y = 1, py = 1\n"\)},
          {\("CONSTRAINT, range= ip2,     X = xc0,     PX = pxc0\n"\)},
          {\("CONSTRAINT, range= ip2,     PY = pyc0\n"\)},
          {\("!CONSTRAINT, range= ip2,     Y = yc0,     PY = pyc0\n"\)},
          {\("CONSTRAINT, range= Q6A.R2,  X = 0.000,     PX = 0.0\n"\)},
          {\("CONSTRAINT, range= Q6A.R2,  Y = 0.000,     PY = 0.0\n"\)},
          {\("LMDIF,      CALLS = 1000, TOLERANCE = 1.0E-12\n"\)},
          {\("ENDMATCH\n"\)},
          {\("\n"\)},
          {\("\n"\)},
          {\(" call, \"lt/twissini.ip2\"\n"\)},
          {\(" call, \"lt/plot.ip2\"\n"\)},
          {"\<\"! <END: \
/afs/cern.ch/user/j/jowett/public/lhc98/V6.-2/xorbitIP2.mad >\"\>"},
          {\("twiss\n"\)}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      TableForm[ {"poolload,\"baseOptics.pool\"", 
        "assign,print=\"trybump.mou\"\n", "assign,echo=\"trybump.mou\"\n", {
        "! <BEGIN: \
/afs/cern.ch/user/j/jowett/public/lhc98/V6.-2/xorbitIP2.mad >"}, "\n", 
        "System,\"ln -fs /afs/cern.ch/user/b/bruening/lhc/optics/toolkit lt\"\
\n", "call, \"lt/insert-tdi.ip2\"  ! added by JMJ\n", 
        "call, \"lt/select.ir2\" ! bir2 -> optic function at s.DS.L2\n", 
        "                      ! eir2 -> optic function at e.DS.R2\n", "\n", 
        "cross_rot:=-90*pi/180 ! -> vertical crossing angle, parallel \
horizontal\n", "cross_sep:=0.002\n", "!cross_sep:=0.000\n", 
        "cross_ksi:=0.000160\n", "!cross_sep:=0.0000\n", 
        "!cross_ksi:=0.000150\n", "\n", "xc0 :=-cross_sep*sin(cross_rot)\n", 
        "pxc0:= cross_ksi*cos(cross_rot)\n", 
        "yc0 := cross_sep*cos(cross_rot)\n", 
        "pyc0:= cross_ksi*sin(cross_rot)\n", "\n", 
        "MATCH, beta0=bir2, mux=0.0, muy=0.0\n", 
        "VARY, KV2.L2 ,STEP=1.0E-07\n", 
        "WEIGHT,     x = 1, px =  1, y = 1, py = 1\n", 
        "CONSTRAINT, range= MKI.A,     Y =  2.7E-3\n", 
        "LMDIF,      CALLS = 1000, TOLERANCE = 1.0E-12\n", "ENDMATCH\n", "\n",
         "\n", "MATCH, beta0=bir2, mux=0.0, muy=0.0\n", 
        "VARY, KH1.L2 ,STEP=1.0E-07\n", "VARY, KV1.L2 ,STEP=1.0E-07\n", 
        "VARY, KH1.R2 ,STEP=1.0E-07\n", "VARY, KV1.R2 ,STEP=1.0E-07\n", 
        "VARY, KH2.L2 ,STEP=1.0E-07\n", "!VARY, KV2.L2 ,STEP=1.0E-07\n", 
        "VARY, KH2.R2 ,STEP=1.0E-07\n", "VARY, KV2.R2 ,STEP=1.0E-07\n", 
        "WEIGHT,     x = 1, px =  1, y = 1, py = 1\n", 
        "CONSTRAINT, range= ip2,     X = xc0,     PX = pxc0\n", 
        "CONSTRAINT, range= ip2,     PY = pyc0\n", 
        "!CONSTRAINT, range= ip2,     Y = yc0,     PY = pyc0\n", 
        "CONSTRAINT, range= Q6A.R2,  X = 0.000,     PX = 0.0\n", 
        "CONSTRAINT, range= Q6A.R2,  Y = 0.000,     PY = 0.0\n", 
        "LMDIF,      CALLS = 1000, TOLERANCE = 1.0E-12\n", "ENDMATCH\n", "\n",
         "\n", " call, \"lt/twissini.ip2\"\n", " call, \"lt/plot.ip2\"\n", {
        "! <END: /afs/cern.ch/user/j/jowett/public/lhc98/V6.-2/xorbitIP2.mad \
>"}, "twiss\n"}]]], "Output"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Some Additional Features", "Section"],

Cell["\<\
MAD Version 8 has an 80 column limit on commands.  This function \
breaks them appropriately when necessary.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(cmd = "\<call, \
filename=\"/afs/cern.ch/user/dffffff/public/fffffffdf/fffsdfsssssssdf/\
ffffdddddddddd\" ,columns =name,junk,more,name, junk, \
more,name,junk,more,name,junk,more,filename=\"/afs/\
dfffffffffffffdffffsdfsssssssdfffffdddddddddd\"\>"\)], "Input"],

Cell[BoxData[
    \("call, \
filename=\"/afs/cern.ch/user/dffffff/public/fffffffdf/fffsdfsssssssdf/\
ffffdddddddddd\" ,columns =name,junk,more,name, junk, \
more,name,junk,more,name,junk,more,filename=\"/afs/\
dfffffffffffffdffffsdfsssssssdfffffdddddddddd\""\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MADstringbreak[cmd] // TableForm\)], "Input"],

Cell[BoxData[
    TagBox[\(MADstringbreak[
        "call, filename=\"/afs/cern.ch/user/dffffff/public/fffffffdf/\
fffsdfsssssssdf/ffffdddddddddd\" ,columns =name,junk,more,name, junk, \
more,name,junk,more,name,junk,more,filename=\"/afs/\
dfffffffffffffdffffsdfsssssssdfffffdddddddddd\""]\),
      (TableForm[ #]&)]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Bibliography", "Section"],

Cell[TextData[{
  StyleBox["[1] Stephen Wolfram, ", "SR"],
  StyleBox["The Mathematica Book", "SO",
    FontSlant->"Italic"],
  StyleBox[", 3rd ed., Wolfram Media/Cambridge University Press, 1996.", 
    "SR"]
}], "Text",
  CellTags->"Wolfram book"],

Cell[TextData[{
  "[2]  Roman Maeder, ",
  StyleBox["Programming in Mathematica",
    FontSlant->"Italic"],
  ", 3rd ed. Addison-Wesley, 1996"
}], "Text",
  CellTags->"Maeder book"],

Cell["\<\
[3] Hans Grote, F. Christoph Iselin, The MAD Program, User's \
Reference Manual, CERN/SL/90-13 (AP), and \
\>", "Text",
  CellTags->"MAD manual"],

Cell[TextData[ButtonBox["http://wwwslap.cern.ch/~fci/mad/mad.html",
  ButtonData:>{
    URL[ "http://wwwslap.cern.ch/~fci/mad/mad.html"], None},
  ButtonStyle->"Hyperlink"]], "Program"]
}, Closed]]
},
FrontEndVersion->"4.2 for Microsoft Windows",
ScreenRectangle->{{0, 1280}, {0, 951}},
AutoGeneratedPackage->Automatic,
ScreenStyleEnvironment->"Working",
WindowToolbars->"EditBar",
Evaluator->"FEConnect",
InitializationCellEvaluation->False,
CellGrouping->Automatic,
WindowSize->{766, 924},
WindowMargins->{{Automatic, 81}, {Automatic, 9}},
PrivateNotebookOptions->{"ColorPalette"->{RGBColor, 128}},
ShowSelection->True,
ShowCellLabel->True,
RenderingOptions->{"ObjectDithering"->True,
"RasterDithering"->False},
PrivateFontOptions->{"FontType"->"Outline"},
Magnification->1,
StyleDefinitions -> "ClassroomColour.nb"
]

(*******************************************************************
Cached data follows.  If you edit this Notebook file directly, not
using Mathematica, you must remove the line containing CacheID at
the top of  the file.  The cache data will then be recreated when
you save this file from within Mathematica.
*******************************************************************)

(*CellTagsOutline
CellTagsIndex->{
  "Reference section"->{
    Cell[12319, 355, 132, 6, 39, "Section",
      CellTags->"Reference section"]},
  "Setup section"->{
    Cell[17188, 526, 53, 1, 34, "Section",
      CellTags->"Setup section"],
    Cell[17802, 542, 75, 1, 44, "Subsection",
      CellTags->"Setup section"],
    Cell[18337, 560, 354, 9, 43, "Text",
      CellTags->"Setup section"],
    Cell[18763, 575, 836, 21, 61, "Text",
      CellTags->"Setup section"]},
  "Interface section"->{
    Cell[19901, 616, 174, 7, 59, "Section",
      InitializationCell->True,
      CellTags->"Interface section"],
    Cell[20078, 625, 159, 5, 26, "Text",
      InitializationCell->True,
      CellTags->"Interface section"],
    Cell[20262, 634, 135, 2, 44, "Subsection",
      InitializationCell->True,
      CellTags->"Interface section"],
    Cell[20802, 658, 157, 5, 28, "Subsection",
      InitializationCell->True,
      CellTags->"Interface section"],
    Cell[20962, 665, 204, 5, 61, "Input",
      InitializationCell->True,
      CellTags->"Interface section"],
    Cell[36026, 1025, 122, 2, 44, "Subsection",
      InitializationCell->True,
      CellTags->"Interface section"],
    Cell[36151, 1029, 135, 2, 46, "Input",
      InitializationCell->True,
      CellTags->"Interface section"]},
  "Info3246200723-8101007"->{
    Cell[22494, 711, 858, 13, 182, "Print",
      CellTags->"Info3246200723-8101007"]},
  "Implementation section"->{
    Cell[36816, 1052, 184, 7, 59, "Section",
      InitializationCell->True,
      CellTags->"Implementation section"],
    Cell[37003, 1061, 169, 4, 26, "Text",
      CellTags->"Implementation section"],
    Cell[37197, 1069, 135, 2, 44, "Subsection",
      InitializationCell->True,
      CellTags->"Implementation section"],
    Cell[37357, 1075, 103, 2, 46, "Input",
      InitializationCell->True,
      CellTags->"Implementation section"],
    Cell[37564, 1084, 114, 2, 28, "Subsection",
      InitializationCell->True,
      CellTags->"Implementation section"],
    Cell[37703, 1090, 161, 5, 44, "Subsection",
      InitializationCell->True,
      CellTags->"Implementation section"],
    Cell[37889, 1099, 182, 7, 37, "Subsubsection",
      CellTags->"Implementation section"],
    Cell[40473, 1191, 124, 2, 28, "Subsection",
      InitializationCell->True,
      CellTags->"Implementation section"],
    Cell[90791, 2537, 111, 2, 44, "Subsection",
      InitializationCell->True,
      CellTags->"Implementation section"],
    Cell[90927, 2543, 104, 3, 47, "Input",
      InitializationCell->True,
      CellTags->"Implementation section"],
    Cell[100375, 2912, 129, 2, 35, "Subsubsection",
      InitializationCell->True,
      CellTags->"Implementation section"]},
  "Epilog section"->{
    Cell[91169, 2556, 168, 7, 59, "Section",
      InitializationCell->True,
      CellTags->"Epilog section"],
    Cell[91340, 2565, 106, 1, 26, "Text",
      CellTags->"Epilog section"],
    Cell[91471, 2570, 103, 2, 44, "Subsection",
      InitializationCell->True,
      CellTags->"Epilog section"],
    Cell[91577, 2574, 112, 2, 46, "Input",
      InitializationCell->True,
      CellTags->"Epilog section"],
    Cell[91692, 2578, 115, 2, 26, "Text",
      InitializationCell->True,
      CellTags->"Epilog section"],
    Cell[94083, 2629, 103, 2, 44, "Subsection",
      InitializationCell->True,
      CellTags->"Epilog section"],
    Cell[94189, 2633, 88, 2, 46, "Input",
      InitializationCell->True,
      CellTags->"Epilog section"]},
  "Info3245064565-3736056"->{
    Cell[102546, 3015, 436, 6, 86, "Print",
      CellTags->"Info3245064565-3736056"]},
  "Examples section"->{
    Cell[118234, 3574, 76, 1, 34, "Section",
      CellTags->"Examples section"]},
  "Info3234597653-1697218"->{
    Cell[135988, 3989, 273, 4, 54, "Print",
      CellTags->"Info3234597653-1697218"]},
  "Wolfram book"->{
    Cell[185081, 5521, 249, 7, 26, "Text",
      CellTags->"Wolfram book"]},
  "Maeder book"->{
    Cell[185333, 5530, 181, 6, 26, "Text",
      CellTags->"Maeder book"]},
  "MAD manual"->{
    Cell[185517, 5538, 155, 4, 26, "Text",
      CellTags->"MAD manual"]}
  }
*)

(*CellTagsIndex
CellTagsIndex->{
  {"Reference section", 186936, 5579},
  {"Setup section", 187040, 5582},
  {"Interface section", 187374, 5591},
  {"Info3246200723-8101007", 188207, 5613},
  {"Implementation section", 188325, 5616},
  {"Epilog section", 189625, 5648},
  {"Info3245064565-3736056", 190403, 5669},
  {"Examples section", 190515, 5672},
  {"Info3234597653-1697218", 190628, 5675},
  {"Wolfram book", 190736, 5678},
  {"Maeder book", 190832, 5681},
  {"MAD manual", 190926, 5684}
  }
*)

(*NotebookFileOutline
Notebook[{
Cell[1754, 51, 26, 0, 47, "Input"],
Cell[1783, 53, 65, 1, 26, "Text"],
Cell[1851, 56, 16, 0, 26, "Text"],
Cell[1870, 58, 39, 0, 54, "Title"],
Cell[1912, 60, 226, 6, 50, "Author"],
Cell[2141, 68, 245, 6, 37, "SmallText"],

Cell[CellGroupData[{
Cell[2411, 78, 31, 0, 54, "Section"],
Cell[2445, 80, 664, 22, 43, "Text"],
Cell[3112, 104, 104, 3, 26, "Text"],
Cell[3219, 109, 462, 8, 60, "Text"],
Cell[3684, 119, 299, 6, 43, "Text"],
Cell[3986, 127, 122, 3, 26, "Text"],
Cell[4111, 132, 212, 5, 26, "Text"],
Cell[4326, 139, 532, 11, 60, "Text"],
Cell[4861, 152, 246, 5, 43, "Text"],
Cell[5110, 159, 685, 15, 77, "Text"],
Cell[5798, 176, 264, 7, 26, "Text"],
Cell[6065, 185, 719, 13, 93, "Text"],
Cell[6787, 200, 603, 10, 77, "Text"],
Cell[7393, 212, 299, 7, 43, "Text"],
Cell[7695, 221, 517, 8, 77, "Text"],
Cell[8215, 231, 239, 6, 44, "Text"],
Cell[8457, 239, 541, 12, 78, "Text"],

Cell[CellGroupData[{
Cell[9023, 255, 48, 0, 44, "Subsection"],
Cell[9074, 257, 536, 11, 60, "Text"],
Cell[9613, 270, 354, 8, 43, "Text"],
Cell[9970, 280, 58, 0, 26, "Text"],
Cell[10031, 282, 185, 3, 23, "Program"]
}, Open  ]],

Cell[CellGroupData[{
Cell[10253, 290, 110, 5, 52, "Subsection"],
Cell[10366, 297, 745, 17, 95, "Text"],
Cell[11114, 316, 479, 17, 45, "Text"],
Cell[11596, 335, 473, 8, 77, "Text"],
Cell[12072, 345, 198, 4, 43, "Text"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[12319, 355, 132, 6, 39, "Section",
  CellTags->"Reference section"],

Cell[CellGroupData[{
Cell[12476, 365, 30, 0, 35, "Subsubsection"],
Cell[12509, 367, 81, 1, 26, "Text"]
}, Open  ]],

Cell[CellGroupData[{
Cell[12627, 373, 31, 0, 35, "Subsubsection"],
Cell[12661, 375, 49, 0, 26, "Text"]
}, Open  ]],

Cell[CellGroupData[{
Cell[12747, 380, 32, 0, 35, "Subsubsection"],
Cell[12782, 382, 91, 3, 26, "Text"]
}, Open  ]],

Cell[CellGroupData[{
Cell[12910, 390, 34, 0, 35, "Subsubsection"],
Cell[12947, 392, 1875, 30, 489, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[14859, 427, 41, 0, 27, "Subsubsection"],
Cell[14903, 429, 19, 0, 26, "Text"]
}, Open  ]],

Cell[CellGroupData[{
Cell[14959, 434, 101, 4, 35, "Subsubsection"],
Cell[15063, 440, 28, 0, 26, "Text"]
}, Open  ]],

Cell[CellGroupData[{
Cell[15128, 445, 32, 0, 35, "Subsubsection"],
Cell[15163, 447, 115, 3, 26, "Text"],
Cell[15281, 452, 135, 3, 26, "Text"],
Cell[15419, 457, 133, 3, 26, "Text"],
Cell[15555, 462, 144, 3, 26, "Text"],
Cell[15702, 467, 62, 0, 26, "Text"],
Cell[15767, 469, 372, 7, 101, "Text"]
}, Open  ]],

Cell[CellGroupData[{
Cell[16176, 481, 33, 0, 35, "Subsubsection"],
Cell[16212, 483, 50, 0, 26, "Text"]
}, Open  ]],

Cell[CellGroupData[{
Cell[16299, 488, 33, 0, 35, "Subsubsection"],
Cell[16335, 490, 107, 1, 26, "Text"],
Cell[16445, 493, 193, 4, 43, "Text"]
}, Open  ]],

Cell[CellGroupData[{
Cell[16675, 502, 35, 0, 35, "Subsubsection"],
Cell[16713, 504, 100, 1, 26, "Text"]
}, Open  ]],

Cell[CellGroupData[{
Cell[16850, 510, 35, 0, 35, "Subsubsection"],
Cell[16888, 512, 108, 1, 26, "Text"]
}, Open  ]],

Cell[CellGroupData[{
Cell[17033, 518, 37, 0, 35, "Subsubsection"],
Cell[17073, 520, 66, 0, 26, "Text"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[17188, 526, 53, 1, 34, "Section",
  CellTags->"Setup section"],
Cell[17244, 529, 533, 9, 77, "Text"],

Cell[CellGroupData[{
Cell[17802, 542, 75, 1, 44, "Subsection",
  CellTags->"Setup section"],
Cell[17880, 545, 236, 5, 43, "Text"],
Cell[18119, 552, 215, 6, 23, "Program"],
Cell[18337, 560, 354, 9, 43, "Text",
  CellTags->"Setup section"],

Cell[CellGroupData[{
Cell[18716, 573, 44, 0, 35, "Subsubsection"],
Cell[18763, 575, 836, 21, 61, "Text",
  CellTags->"Setup section"],
Cell[19602, 598, 136, 6, 46, "Input"],
Cell[19741, 606, 99, 3, 26, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{
Cell[19901, 616, 174, 7, 59, "Section",
  InitializationCell->True,
  CellTags->"Interface section"],
Cell[20078, 625, 159, 5, 26, "Text",
  InitializationCell->True,
  CellTags->"Interface section"],

Cell[CellGroupData[{
Cell[20262, 634, 135, 2, 44, "Subsection",
  InitializationCell->True,
  CellTags->"Interface section"],

Cell[CellGroupData[{
Cell[20422, 640, 262, 9, 47, "Input",
  InitializationCell->True],
Cell[20687, 651, 66, 1, 70, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[20802, 658, 157, 5, 28, "Subsection",
  InitializationCell->True,
  CellTags->"Interface section"],
Cell[20962, 665, 204, 5, 61, "Input",
  InitializationCell->True,
  CellTags->"Interface section"],
Cell[21169, 672, 270, 4, 81, "Input",
  InitializationCell->True],
Cell[21442, 678, 252, 4, 81, "Input",
  InitializationCell->True],
Cell[21697, 684, 157, 3, 47, "Input",
  InitializationCell->True],
Cell[21857, 689, 205, 4, 64, "Input",
  InitializationCell->True],
Cell[22065, 695, 201, 4, 64, "Input",
  InitializationCell->True],
Cell[22269, 701, 151, 3, 47, "Input",
  InitializationCell->True],

Cell[CellGroupData[{
Cell[22445, 708, 46, 1, 47, "Input"],
Cell[22494, 711, 858, 13, 182, "Print",
  CellTags->"Info3246200723-8101007"]
}, Open  ]],
Cell[23367, 727, 813, 12, 200, "Input",
  InitializationCell->True],
Cell[24183, 741, 285, 4, 47, "Input"],

Cell[CellGroupData[{
Cell[24493, 749, 162, 2, 47, "Input"],
Cell[24658, 753, 67, 0, 45, "Output"]
}, Open  ]],
Cell[24740, 756, 848, 13, 200, "Input",
  InitializationCell->True],
Cell[25591, 771, 342, 7, 98, "Input",
  InitializationCell->True],
Cell[25936, 780, 350, 7, 98, "Input",
  InitializationCell->True],
Cell[26289, 789, 287, 5, 98, "Input",
  InitializationCell->True],
Cell[26579, 796, 237, 4, 64, "Input",
  InitializationCell->True],
Cell[26819, 802, 249, 4, 81, "Input",
  InitializationCell->True],
Cell[27071, 808, 261, 4, 81, "Input",
  InitializationCell->True],
Cell[27335, 814, 171, 3, 64, "Input",
  InitializationCell->True],
Cell[27509, 819, 292, 5, 81, "Input",
  InitializationCell->True],
Cell[27804, 826, 213, 4, 64, "Input",
  InitializationCell->True],
Cell[28020, 832, 219, 4, 64, "Input",
  InitializationCell->True],
Cell[28242, 838, 232, 4, 64, "Input",
  InitializationCell->True],
Cell[28477, 844, 262, 4, 81, "Input",
  InitializationCell->True],
Cell[28742, 850, 299, 5, 98, "Input",
  InitializationCell->True],
Cell[29044, 857, 274, 5, 81, "Input",
  InitializationCell->True],
Cell[29321, 864, 182, 3, 64, "Input",
  InitializationCell->True],
Cell[29506, 869, 181, 3, 64, "Input",
  InitializationCell->True],
Cell[29690, 874, 173, 3, 64, "Input",
  InitializationCell->True],
Cell[29866, 879, 340, 5, 98, "Input",
  InitializationCell->True],
Cell[30209, 886, 227, 5, 64, "Input",
  InitializationCell->True],
Cell[30439, 893, 189, 3, 64, "Input",
  InitializationCell->True],
Cell[30631, 898, 270, 4, 81, "Input",
  InitializationCell->True],
Cell[30904, 904, 220, 4, 64, "Input",
  InitializationCell->True],
Cell[31127, 910, 187, 3, 64, "Input",
  InitializationCell->True],
Cell[31317, 915, 216, 4, 64, "Input",
  InitializationCell->True],
Cell[31536, 921, 173, 3, 64, "Input",
  InitializationCell->True],
Cell[31712, 926, 183, 3, 64, "Input",
  InitializationCell->True],
Cell[31898, 931, 205, 4, 64, "Input",
  InitializationCell->True],
Cell[32106, 937, 223, 4, 64, "Input",
  InitializationCell->True],
Cell[32332, 943, 228, 4, 64, "Input",
  InitializationCell->True],
Cell[32563, 949, 600, 9, 166, "Input",
  InitializationCell->True],
Cell[33166, 960, 386, 6, 115, "Input",
  InitializationCell->True],
Cell[33555, 968, 382, 6, 115, "Input",
  InitializationCell->True],
Cell[33940, 976, 193, 3, 64, "Input",
  InitializationCell->True],
Cell[34136, 981, 451, 7, 132, "Input",
  InitializationCell->True],
Cell[34590, 990, 222, 4, 64, "Input",
  InitializationCell->True],
Cell[34815, 996, 352, 5, 115, "Input",
  InitializationCell->True],
Cell[35170, 1003, 198, 3, 64, "Input",
  InitializationCell->True],
Cell[35371, 1008, 203, 4, 64, "Input",
  InitializationCell->True],
Cell[35577, 1014, 412, 6, 115, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[36026, 1025, 122, 2, 44, "Subsection",
  InitializationCell->True,
  CellTags->"Interface section"],
Cell[36151, 1029, 135, 2, 46, "Input",
  InitializationCell->True,
  CellTags->"Interface section"],
Cell[36289, 1033, 125, 3, 47, "Input",
  InitializationCell->True],
Cell[36417, 1038, 157, 3, 47, "Input",
  InitializationCell->True],
Cell[36577, 1043, 190, 3, 64, "Input",
  InitializationCell->True]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{
Cell[36816, 1052, 184, 7, 59, "Section",
  InitializationCell->True,
  CellTags->"Implementation section"],
Cell[37003, 1061, 169, 4, 26, "Text",
  CellTags->"Implementation section"],

Cell[CellGroupData[{
Cell[37197, 1069, 135, 2, 44, "Subsection",
  InitializationCell->True,
  CellTags->"Implementation section"],

Cell[CellGroupData[{
Cell[37357, 1075, 103, 2, 46, "Input",
  InitializationCell->True,
  CellTags->"Implementation section"],
Cell[37463, 1079, 74, 1, 70, "Output"]
}, Open  ]]
}, Closed]],
Cell[37564, 1084, 114, 2, 28, "Subsection",
  InitializationCell->True,
  CellTags->"Implementation section"],

Cell[CellGroupData[{
Cell[37703, 1090, 161, 5, 44, "Subsection",
  InitializationCell->True,
  CellTags->"Implementation section"],

Cell[CellGroupData[{
Cell[37889, 1099, 182, 7, 37, "Subsubsection",
  CellTags->"Implementation section"],
Cell[38074, 1108, 197, 5, 56, "Text"],
Cell[38274, 1115, 54, 0, 26, "Text"],
Cell[38331, 1117, 145, 3, 64, "Input",
  InitializationCell->True],
Cell[38479, 1122, 174, 3, 47, "Input",
  InitializationCell->True],
Cell[38656, 1127, 161, 3, 47, "Input",
  InitializationCell->True],
Cell[38820, 1132, 183, 3, 64, "Input",
  InitializationCell->True],
Cell[39006, 1137, 334, 8, 64, "Input",
  InitializationCell->True],
Cell[39343, 1147, 175, 3, 47, "Input",
  InitializationCell->True],
Cell[39521, 1152, 193, 6, 27, "Text",
  InitializationCell->True],
Cell[39717, 1160, 133, 3, 47, "Input",
  InitializationCell->True],
Cell[39853, 1165, 211, 7, 47, "Input",
  InitializationCell->True],
Cell[40067, 1174, 42, 0, 26, "Text"],
Cell[40112, 1176, 100, 3, 26, "Text"],
Cell[40215, 1181, 209, 4, 64, "Input",
  InitializationCell->True]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[40473, 1191, 124, 2, 28, "Subsection",
  InitializationCell->True,
  CellTags->"Implementation section"],
Cell[40600, 1195, 220, 5, 44, "Text"],

Cell[CellGroupData[{
Cell[40845, 1204, 109, 2, 47, "Input",
  InitializationCell->True],
Cell[40957, 1208, 60, 1, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[41054, 1214, 44, 0, 35, "Subsubsection"],
Cell[41101, 1216, 51, 0, 26, "Text"],
Cell[41155, 1218, 154, 4, 47, "Input",
  InitializationCell->True],
Cell[41312, 1224, 139, 3, 26, "Text"],
Cell[41454, 1229, 168, 4, 26, "Text"],
Cell[41625, 1235, 554, 11, 166, "Input",
  InitializationCell->True],
Cell[42182, 1248, 226, 5, 43, "Text"],

Cell[CellGroupData[{
Cell[42433, 1257, 106, 2, 47, "Input",
  InitializationCell->True],
Cell[42542, 1261, 61, 1, 70, "Output"]
}, Open  ]],
Cell[42618, 1265, 544, 10, 166, "Input",
  InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{
Cell[43199, 1280, 75, 0, 27, "Subsubsection"],
Cell[43277, 1282, 123, 3, 26, "Text"],
Cell[43403, 1287, 419, 9, 98, "Input",
  InitializationCell->True],
Cell[43825, 1298, 162, 3, 47, "Input",
  InitializationCell->True],
Cell[43990, 1303, 167, 3, 47, "Input",
  InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{
Cell[44194, 1311, 54, 0, 27, "Subsubsection"],
Cell[44251, 1313, 67, 0, 26, "Text"],
Cell[44321, 1315, 220, 4, 64, "Input",
  InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{
Cell[44578, 1324, 49, 0, 27, "Subsubsection"],
Cell[44630, 1326, 263, 6, 115, "Input",
  InitializationCell->True],
Cell[44896, 1334, 236, 6, 64, "Input",
  InitializationCell->True],
Cell[45135, 1342, 179, 5, 47, "Input",
  InitializationCell->True],
Cell[45317, 1349, 311, 6, 81, "Input",
  InitializationCell->True],
Cell[45631, 1357, 217, 5, 64, "Input",
  InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{
Cell[45885, 1367, 51, 0, 27, "Subsubsection"],
Cell[45939, 1369, 642, 18, 44, "Text"],
Cell[46584, 1389, 255, 7, 43, "Text"],
Cell[46842, 1398, 365, 7, 115, "Input",
  InitializationCell->True],
Cell[47210, 1407, 156, 4, 26, "Text"],

Cell[CellGroupData[{
Cell[47391, 1415, 157, 3, 47, "Input",
  InitializationCell->True],
Cell[47551, 1420, 108, 2, 46, "Output"]
}, Open  ]],
Cell[47674, 1425, 123, 3, 47, "Input",
  InitializationCell->True],
Cell[47800, 1430, 149, 3, 47, "Input"],
Cell[47952, 1435, 154, 3, 47, "Input"],
Cell[48109, 1440, 107, 2, 47, "Input"],
Cell[48219, 1444, 113, 3, 26, "Text"],
Cell[48335, 1449, 133, 3, 47, "Input",
  InitializationCell->True],
Cell[48471, 1454, 165, 3, 47, "Input",
  InitializationCell->True],
Cell[48639, 1459, 192, 3, 64, "Input",
  InitializationCell->True],
Cell[48834, 1464, 104, 3, 26, "Text"],
Cell[48941, 1469, 246, 5, 64, "Input",
  InitializationCell->True],
Cell[49190, 1476, 122, 3, 47, "Input",
  InitializationCell->True],
Cell[49315, 1481, 242, 5, 43, "Text"],
Cell[49560, 1488, 183, 4, 43, "Text"],
Cell[49746, 1494, 163, 3, 47, "Input",
  InitializationCell->True],
Cell[49912, 1499, 99, 2, 47, "Input",
  InitializationCell->True],
Cell[50014, 1503, 104, 2, 47, "Input",
  InitializationCell->True],
Cell[50121, 1507, 707, 13, 176, "Text"],
Cell[50831, 1522, 498, 8, 132, "Input",
  InitializationCell->True],
Cell[51332, 1532, 174, 3, 64, "Input",
  InitializationCell->True],
Cell[51509, 1537, 163, 3, 47, "Input",
  InitializationCell->True],
Cell[51675, 1542, 243, 5, 64, "Input",
  InitializationCell->True],
Cell[51921, 1549, 1473, 26, 233, "Input",
  InitializationCell->True],
Cell[53397, 1577, 278, 8, 64, "Input",
  InitializationCell->True],
Cell[53678, 1587, 279, 7, 81, "Input",
  InitializationCell->True],
Cell[53960, 1596, 265, 7, 81, "Input",
  InitializationCell->True],
Cell[54228, 1605, 336, 6, 60, "Text"],
Cell[54567, 1613, 1536, 32, 311, "Input"],
Cell[56106, 1647, 253, 6, 81, "Input",
  InitializationCell->True],
Cell[56362, 1655, 328, 8, 81, "Input",
  InitializationCell->True],
Cell[56693, 1665, 1265, 23, 216, "Input",
  InitializationCell->True],
Cell[57961, 1690, 324, 8, 81, "Input",
  InitializationCell->True],
Cell[58288, 1700, 217, 4, 64, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[58542, 1709, 45, 0, 35, "Subsubsection"],
Cell[58590, 1711, 119, 3, 26, "Text"],
Cell[58712, 1716, 293, 5, 43, "Text"],
Cell[59008, 1723, 653, 13, 149, "Input"],
Cell[59664, 1738, 481, 11, 115, "Input",
  InitializationCell->True],
Cell[60148, 1751, 311, 8, 64, "Input",
  InitializationCell->True],
Cell[60462, 1761, 168, 3, 47, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[60667, 1769, 44, 0, 35, "Subsubsection"],
Cell[60714, 1771, 462, 8, 105, "Text"],
Cell[61179, 1781, 244, 5, 36, "SmallText"],
Cell[61426, 1788, 238, 5, 43, "Text"],
Cell[61667, 1795, 379, 6, 60, "Text"],
Cell[62049, 1803, 234, 6, 44, "Text"],
Cell[62286, 1811, 401, 10, 45, "Text"],
Cell[62690, 1823, 319, 6, 60, "Text"],
Cell[63012, 1831, 145, 3, 26, "Text"],
Cell[63160, 1836, 2490, 46, 473, "Input",
  InitializationCell->True],
Cell[65653, 1884, 2264, 40, 504, "Input",
  InitializationCell->True],
Cell[67920, 1926, 262, 4, 64, "Input",
  InitializationCell->True],
Cell[68185, 1932, 207, 4, 64, "Input",
  InitializationCell->True],
Cell[68395, 1938, 54, 0, 26, "Text"],

Cell[CellGroupData[{
Cell[68474, 1942, 131, 3, 47, "Input",
  InitializationCell->True],
Cell[68608, 1947, 68, 1, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[68713, 1953, 905, 17, 216, "Input",
  InitializationCell->True],
Cell[69621, 1972, 47, 1, 46, "Output"]
}, Open  ]],
Cell[69683, 1976, 602, 10, 149, "Input",
  InitializationCell->True],
Cell[70288, 1988, 166, 4, 26, "Text"],
Cell[70457, 1994, 191, 4, 43, "Text"],
Cell[70651, 2000, 848, 15, 233, "Input",
  InitializationCell->True],
Cell[71502, 2017, 206, 4, 64, "Input",
  InitializationCell->True],
Cell[71711, 2023, 219, 5, 64, "Input",
  InitializationCell->True],
Cell[71933, 2030, 254, 5, 43, "Text"]
}, Open  ]],

Cell[CellGroupData[{
Cell[72224, 2040, 31, 0, 35, "Subsubsection"],
Cell[72258, 2042, 253, 5, 43, "Text"],
Cell[72514, 2049, 2241, 39, 487, "Input",
  InitializationCell->True],
Cell[74758, 2090, 264, 4, 64, "Input",
  InitializationCell->True],
Cell[75025, 2096, 209, 4, 64, "Input",
  InitializationCell->True],
Cell[75237, 2102, 285, 5, 43, "Text"],

Cell[CellGroupData[{
Cell[75547, 2111, 132, 3, 47, "Input",
  InitializationCell->True],
Cell[75682, 2116, 68, 1, 46, "Output"]
}, Open  ]],
Cell[75765, 2120, 721, 13, 200, "Input",
  InitializationCell->True],
Cell[76489, 2135, 488, 8, 132, "Input",
  InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{
Cell[77014, 2148, 38, 0, 27, "Subsubsection"],
Cell[77055, 2150, 704, 14, 183, "Input",
  InitializationCell->True]
}, Closed]],
Cell[77774, 2167, 37, 0, 27, "Subsubsection"],

Cell[CellGroupData[{
Cell[77836, 2171, 41, 0, 35, "Subsubsection"],
Cell[77880, 2173, 158, 4, 43, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[78075, 2182, 33, 0, 27, "Subsubsection"],
Cell[78111, 2184, 46, 0, 26, "Text"],
Cell[78160, 2186, 675, 14, 149, "Input",
  InitializationCell->True],
Cell[78838, 2202, 528, 10, 216, "Input",
  InitializationCell->True],
Cell[79369, 2214, 599, 11, 223, "Input",
  InitializationCell->True],
Cell[79971, 2227, 178, 4, 47, "Input",
  InitializationCell->True],

Cell[CellGroupData[{
Cell[80174, 2235, 174, 3, 47, "Input",
  InitializationCell->True],
Cell[80351, 2240, 125, 2, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[80513, 2247, 926, 16, 200, "Input",
  InitializationCell->True],
Cell[81442, 2265, 181, 3, 38, "Message"],
Cell[81626, 2270, 187, 3, 38, "Message"],
Cell[81816, 2275, 185, 3, 38, "Message"],
Cell[82004, 2280, 167, 3, 38, "Message"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[82220, 2289, 67, 0, 27, "Subsubsection"],
Cell[82290, 2291, 291, 8, 45, "Text"],
Cell[82584, 2301, 122, 3, 26, "Text"],
Cell[82709, 2306, 213, 5, 64, "Input",
  InitializationCell->True],
Cell[82925, 2313, 236, 5, 64, "Input",
  InitializationCell->True],
Cell[83164, 2320, 71, 0, 26, "Text"],
Cell[83238, 2322, 517, 9, 132, "Input",
  InitializationCell->True],
Cell[83758, 2333, 514, 9, 132, "Input",
  InitializationCell->True],
Cell[84275, 2344, 153, 3, 47, "Input",
  InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{
Cell[84465, 2352, 59, 0, 27, "Subsubsection"],
Cell[84527, 2354, 96, 2, 47, "Input",
  InitializationCell->True],
Cell[84626, 2358, 111, 3, 26, "Text"],
Cell[84740, 2363, 97, 2, 47, "Input",
  InitializationCell->True],
Cell[84840, 2367, 87, 1, 26, "Text",
  InitializationCell->True],
Cell[84930, 2370, 134, 3, 47, "Input",
  InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{
Cell[85101, 2378, 52, 0, 27, "Subsubsection"],
Cell[85156, 2380, 76, 0, 26, "Text"],
Cell[85235, 2382, 148, 3, 26, "Text"],

Cell[CellGroupData[{
Cell[85408, 2389, 748, 15, 166, "Input",
  InitializationCell->True],
Cell[86159, 2406, 182, 3, 70, "Message"]
}, Open  ]],
Cell[86356, 2412, 120, 3, 26, "Text"],
Cell[86479, 2417, 286, 5, 43, "Text"],

Cell[CellGroupData[{
Cell[86790, 2426, 378, 8, 115, "Input",
  InitializationCell->True],
Cell[87171, 2436, 194, 3, 70, "Message"],
Cell[87368, 2441, 180, 3, 70, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[87585, 2449, 979, 20, 250, "Input",
  InitializationCell->True],
Cell[88567, 2471, 183, 3, 70, "Message"],
Cell[88753, 2476, 185, 3, 70, "Message"],
Cell[88941, 2481, 183, 3, 70, "Message"],
Cell[89127, 2486, 167, 3, 70, "Message"]
}, Open  ]],
Cell[89309, 2492, 864, 20, 166, "Input",
  InitializationCell->True],
Cell[90176, 2514, 344, 9, 64, "Input",
  InitializationCell->True],
Cell[90523, 2525, 219, 6, 47, "Input",
  InitializationCell->True]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{
Cell[90791, 2537, 111, 2, 44, "Subsection",
  InitializationCell->True,
  CellTags->"Implementation section"],

Cell[CellGroupData[{
Cell[90927, 2543, 104, 3, 47, "Input",
  InitializationCell->True,
  CellTags->"Implementation section"],
Cell[91034, 2548, 74, 1, 70, "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{
Cell[91169, 2556, 168, 7, 59, "Section",
  InitializationCell->True,
  CellTags->"Epilog section"],
Cell[91340, 2565, 106, 1, 26, "Text",
  CellTags->"Epilog section"],

Cell[CellGroupData[{
Cell[91471, 2570, 103, 2, 44, "Subsection",
  InitializationCell->True,
  CellTags->"Epilog section"],
Cell[91577, 2574, 112, 2, 46, "Input",
  InitializationCell->True,
  CellTags->"Epilog section"],
Cell[91692, 2578, 115, 2, 26, "Text",
  InitializationCell->True,
  CellTags->"Epilog section"],

Cell[CellGroupData[{
Cell[91832, 2584, 100, 2, 47, "Input",
  InitializationCell->True],
Cell[91935, 2588, 1929, 26, 302, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[93901, 2619, 77, 1, 47, "Input"],
Cell[93981, 2622, 53, 1, 46, "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{
Cell[94083, 2629, 103, 2, 44, "Subsection",
  InitializationCell->True,
  CellTags->"Epilog section"],
Cell[94189, 2633, 88, 2, 46, "Input",
  InitializationCell->True,
  CellTags->"Epilog section"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{
Cell[94326, 2641, 24, 0, 54, "Section"],

Cell[CellGroupData[{
Cell[94375, 2645, 39, 0, 44, "Subsection"],

Cell[CellGroupData[{
Cell[94439, 2649, 45, 1, 62, "Input"],
Cell[94487, 2652, 38, 1, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[94562, 2658, 65, 1, 62, "Input"],
Cell[94630, 2661, 195, 6, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[94862, 2672, 54, 1, 62, "Input"],
Cell[94919, 2675, 56, 1, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[95012, 2681, 60, 1, 62, "Input"],
Cell[95075, 2684, 58, 1, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[95170, 2690, 59, 1, 62, "Input"],
Cell[95232, 2693, 56, 1, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[95325, 2699, 52, 1, 62, "Input"],
Cell[95380, 2702, 58, 1, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[95475, 2708, 141, 2, 75, "Input"],
Cell[95619, 2712, 118, 2, 71, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[95774, 2719, 91, 1, 62, "Input"],
Cell[95868, 2722, 180, 3, 38, "Message"],
Cell[96051, 2727, 225, 6, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[96313, 2738, 89, 1, 62, "Input"],
Cell[96405, 2741, 228, 6, 61, "Output"]
}, Open  ]],
Cell[96648, 2750, 136, 3, 26, "Text"],
Cell[96787, 2755, 113, 2, 62, "Input"],
Cell[96903, 2759, 29, 0, 26, "Text"],

Cell[CellGroupData[{
Cell[96957, 2763, 113, 2, 62, "Input"],
Cell[97073, 2767, 185, 3, 38, "Message"],
Cell[97261, 2772, 108, 2, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[97406, 2779, 76, 1, 62, "Input"],
Cell[97485, 2782, 69, 1, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[97591, 2788, 54, 1, 62, "Input"],
Cell[97648, 2791, 185, 6, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[97870, 2802, 70, 1, 62, "Input"],
Cell[97943, 2805, 73, 1, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[98053, 2811, 75, 1, 63, "Input"],
Cell[98131, 2814, 203, 6, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[98371, 2825, 71, 1, 62, "Input"],
Cell[98445, 2828, 201, 6, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[98683, 2839, 109, 2, 62, "Input"],
Cell[98795, 2843, 243, 7, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[99075, 2855, 81, 1, 62, "Input"],
Cell[99159, 2858, 428, 13, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[99624, 2876, 68, 1, 62, "Input"],
Cell[99695, 2879, 76, 1, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[99808, 2885, 72, 1, 62, "Input"],
Cell[99883, 2888, 65, 1, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[99985, 2894, 68, 1, 62, "Input"],
Cell[100056, 2897, 69, 1, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[100162, 2903, 88, 1, 62, "Input"],
Cell[100253, 2906, 85, 1, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[100375, 2912, 129, 2, 35, "Subsubsection",
  InitializationCell->True,
  CellTags->"Implementation section"],
Cell[100507, 2916, 50, 0, 26, "Text"]
}, Open  ]],

Cell[CellGroupData[{
Cell[100594, 2921, 40, 0, 35, "Subsubsection"],

Cell[CellGroupData[{
Cell[100659, 2925, 90, 1, 47, "Input"],
Cell[100752, 2928, 89, 1, 70, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[100878, 2934, 105, 2, 47, "Input"],
Cell[100986, 2938, 65, 1, 70, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[101088, 2944, 105, 2, 47, "Input"],
Cell[101196, 2948, 65, 1, 70, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[101298, 2954, 107, 2, 47, "Input"],
Cell[101408, 2958, 67, 1, 70, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[101512, 2964, 103, 2, 47, "Input"],
Cell[101618, 2968, 93, 1, 70, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[101748, 2974, 66, 1, 47, "Input"],
Cell[101817, 2977, 53, 1, 70, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[101931, 2985, 45, 0, 28, "Subsection"],

Cell[CellGroupData[{
Cell[102001, 2989, 67, 1, 47, "Input"],
Cell[102071, 2992, 64, 1, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[102172, 2998, 80, 1, 47, "Input"],
Cell[102255, 3001, 205, 6, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[102497, 3012, 46, 1, 47, "Input"],
Cell[102546, 3015, 436, 6, 86, "Print",
  CellTags->"Info3245064565-3736056"]
}, Open  ]],

Cell[CellGroupData[{
Cell[103019, 3026, 91, 1, 47, "Input"],
Cell[103113, 3029, 220, 6, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[103370, 3040, 91, 1, 47, "Input"],
Cell[103464, 3043, 66, 1, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[103567, 3049, 91, 1, 47, "Input"],
Cell[103661, 3052, 160, 3, 62, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[103858, 3060, 58, 1, 47, "Input"],
Cell[103919, 3063, 57, 1, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[104013, 3069, 68, 1, 47, "Input"],
Cell[104084, 3072, 63, 1, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[104184, 3078, 69, 1, 47, "Input"],
Cell[104256, 3081, 64, 1, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[104357, 3087, 49, 1, 47, "Input"],
Cell[104409, 3090, 39, 1, 46, "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{
Cell[104497, 3097, 40, 0, 44, "Subsection"],

Cell[CellGroupData[{
Cell[104562, 3101, 55, 1, 47, "Input"],
Cell[104620, 3104, 56, 1, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[104713, 3110, 60, 1, 47, "Input"],
Cell[104776, 3113, 38, 1, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[104851, 3119, 81, 1, 47, "Input"],
Cell[104935, 3122, 60, 1, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[105032, 3128, 81, 1, 47, "Input"],
Cell[105116, 3131, 66, 1, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[105219, 3137, 82, 1, 62, "Input"],
Cell[105304, 3140, 60, 1, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[105401, 3146, 66, 1, 62, "Input"],
Cell[105470, 3149, 38, 1, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[105545, 3155, 80, 1, 62, "Input"],
Cell[105628, 3158, 66, 1, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[105731, 3164, 106, 2, 62, "Input"],
Cell[105840, 3168, 64, 1, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[105941, 3174, 91, 1, 62, "Input"],
Cell[106035, 3177, 270, 4, 38, "Message"],
Cell[106308, 3183, 271, 4, 38, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[106616, 3192, 111, 2, 62, "Input"],
Cell[106730, 3196, 275, 5, 38, "Message"],
Cell[107008, 3203, 220, 4, 38, "Message"],
Cell[107231, 3209, 157, 3, 77, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[107425, 3217, 138, 2, 62, "Input"],
Cell[107566, 3221, 277, 5, 38, "Message"],
Cell[107846, 3228, 222, 4, 38, "Message"],
Cell[108071, 3234, 159, 3, 77, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[108267, 3242, 291, 5, 79, "Input"],
Cell[108561, 3249, 310, 5, 54, "Message"],
Cell[108874, 3256, 280, 4, 38, "Message"],
Cell[109157, 3262, 164, 3, 22, "Message"],
Cell[109324, 3267, 277, 5, 38, "Message"],
Cell[109604, 3274, 222, 4, 38, "Message"],
Cell[109829, 3280, 320, 6, 93, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[110186, 3291, 67, 1, 62, "Input"],
Cell[110256, 3294, 38, 1, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[110331, 3300, 88, 1, 62, "Input"],
Cell[110422, 3303, 62, 1, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[110521, 3309, 106, 2, 62, "Input"],
Cell[110630, 3313, 64, 1, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[110731, 3319, 118, 2, 62, "Input"],
Cell[110852, 3323, 107, 2, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[110996, 3330, 170, 2, 79, "Input"],
Cell[111169, 3334, 107, 2, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[111313, 3341, 137, 3, 62, "Input"],
Cell[111453, 3346, 194, 3, 22, "Message"],
Cell[111650, 3351, 54, 1, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[111741, 3357, 122, 2, 62, "Input"],
Cell[111866, 3361, 210, 6, 61, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[112113, 3372, 236, 4, 79, "Input"],
Cell[112352, 3378, 196, 3, 38, "Message"],
Cell[112551, 3383, 310, 5, 54, "Message"],
Cell[112864, 3390, 280, 4, 38, "Message"],
Cell[113147, 3396, 176, 3, 77, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[113360, 3404, 285, 4, 96, "Input"],
Cell[113648, 3410, 242, 3, 93, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[113927, 3418, 45, 1, 62, "Input"],
Cell[113975, 3421, 362, 6, 93, "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{
Cell[114386, 3433, 33, 0, 44, "Subsection"],

Cell[CellGroupData[{
Cell[114444, 3437, 80, 1, 47, "Input"],
Cell[114527, 3440, 59, 1, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[114623, 3446, 330, 5, 81, "Input"],
Cell[114956, 3453, 47, 1, 22, "Print"],
Cell[115006, 3456, 529, 11, 126, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[115572, 3472, 435, 7, 115, "Input"],
Cell[116010, 3481, 47, 1, 22, "Print"],
Cell[116060, 3484, 567, 12, 126, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[116664, 3501, 125, 3, 47, "Input"],
Cell[116792, 3506, 161, 3, 22, "Print"],
Cell[116956, 3511, 62, 1, 22, "Print"],
Cell[117021, 3514, 45, 1, 22, "Print"],
Cell[117069, 3517, 87, 1, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[117193, 3523, 127, 3, 47, "Input"],
Cell[117323, 3528, 111, 2, 46, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[117483, 3536, 37, 0, 28, "Subsection"],
Cell[117523, 3538, 21, 0, 26, "Text"],

Cell[CellGroupData[{
Cell[117569, 3542, 64, 1, 47, "Input"],
Cell[117636, 3545, 53, 1, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[117726, 3551, 67, 1, 47, "Input"],
Cell[117796, 3554, 59, 1, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[117892, 3560, 140, 3, 47, "Input"],
Cell[118035, 3565, 138, 2, 62, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[118234, 3574, 76, 1, 34, "Section",
  CellTags->"Examples section"],
Cell[118313, 3577, 473, 10, 77, "Text"],
Cell[118789, 3589, 135, 3, 26, "Text"],
Cell[118927, 3594, 333, 6, 60, "Text"],
Cell[119263, 3602, 191, 6, 26, "Text"],

Cell[CellGroupData[{
Cell[119479, 3612, 49, 0, 44, "Subsection"],
Cell[119531, 3614, 341, 7, 60, "Text"],

Cell[CellGroupData[{
Cell[119897, 3625, 42, 1, 47, "Input"],
Cell[119942, 3628, 16043, 359, 116, "Print"],
Cell[135988, 3989, 273, 4, 54, "Print",
  CellTags->"Info3234597653-1697218"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{
Cell[136310, 3999, 39, 0, 44, "Subsection"],
Cell[136352, 4001, 66, 0, 26, "Text"],

Cell[CellGroupData[{
Cell[136443, 4005, 61, 1, 47, "Input"],
Cell[136507, 4008, 44, 1, 46, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[136600, 4015, 53, 0, 28, "Subsection"],
Cell[136656, 4017, 158, 3, 43, "Text"],

Cell[CellGroupData[{
Cell[136839, 4024, 42, 1, 47, "Input"],
Cell[136884, 4027, 230, 5, 63, "Print"]
}, Open  ]],
Cell[137129, 4035, 305, 9, 53, "Text"],

Cell[CellGroupData[{
Cell[137459, 4048, 123, 3, 81, "Input"],
Cell[137585, 4053, 688, 17, 105, "Output"]
}, Open  ]],
Cell[138288, 4073, 157, 3, 43, "Text"],
Cell[138448, 4078, 121, 3, 26, "Text"],

Cell[CellGroupData[{
Cell[138594, 4085, 46, 1, 47, "Input"],
Cell[138643, 4088, 130, 2, 38, "Print"]
}, Open  ]],

Cell[CellGroupData[{
Cell[138810, 4095, 49, 1, 47, "Input"],
Cell[138862, 4098, 124, 2, 38, "Print"]
}, Open  ]],
Cell[139001, 4103, 174, 4, 43, "Text"],
Cell[139178, 4109, 165, 4, 43, "Text"],

Cell[CellGroupData[{
Cell[139368, 4117, 69, 1, 47, "Input"],
Cell[139440, 4120, 66, 1, 46, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[139555, 4127, 52, 0, 28, "Subsection"],
Cell[139610, 4129, 198, 7, 26, "Text"],

Cell[CellGroupData[{
Cell[139833, 4140, 79, 1, 47, "Input"],
Cell[139915, 4143, 76, 1, 46, "Output"]
}, Open  ]],
Cell[140006, 4147, 57, 0, 26, "Text"],

Cell[CellGroupData[{
Cell[140088, 4151, 567, 16, 98, "Input"],
Cell[140658, 4169, 366, 10, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[141061, 4184, 235, 5, 98, "Input"],
Cell[141299, 4191, 390, 10, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[141726, 4206, 58, 1, 47, "Input"],
Cell[141787, 4209, 176, 5, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[142000, 4219, 162, 2, 60, "Input"],
Cell[142165, 4223, 122, 2, 66, "Output"]
}, Open  ]],
Cell[142302, 4228, 345, 10, 44, "Text"],

Cell[CellGroupData[{
Cell[142672, 4242, 178, 3, 57, "Input"],
Cell[142853, 4247, 428, 7, 100, "Output"]
}, Open  ]],
Cell[143296, 4257, 261, 6, 44, "Text"],
Cell[143560, 4265, 695, 17, 78, "Input"],
Cell[144258, 4284, 63, 0, 26, "Text"],

Cell[CellGroupData[{
Cell[144346, 4288, 82, 1, 48, "Input"],
Cell[144431, 4291, 38, 1, 46, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[144518, 4298, 64, 0, 28, "Subsection"],
Cell[144585, 4300, 250, 7, 44, "Text"],
Cell[144838, 4309, 173, 5, 27, "Text"],

Cell[CellGroupData[{
Cell[145036, 4318, 51, 1, 47, "Input"],
Cell[145090, 4321, 212, 3, 54, "Print"]
}, Open  ]],
Cell[145317, 4327, 194, 5, 44, "Text"],

Cell[CellGroupData[{
Cell[145536, 4336, 105, 2, 47, "Input"],
Cell[145644, 4340, 57, 1, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[145738, 4346, 105, 2, 47, "Input"],
Cell[145846, 4350, 64, 1, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[145947, 4356, 141, 2, 64, "Input"],
Cell[146091, 4360, 90, 1, 46, "Output"]
}, Open  ]],
Cell[146196, 4364, 175, 6, 35, "Text"],

Cell[CellGroupData[{
Cell[146396, 4374, 185, 4, 64, "Input"],
Cell[146584, 4380, 104, 2, 46, "Output"]
}, Open  ]],
Cell[146703, 4385, 106, 4, 27, "Text"],
Cell[146812, 4391, 261, 6, 44, "Text"],

Cell[CellGroupData[{
Cell[147098, 4401, 232, 5, 64, "Input"],
Cell[147333, 4408, 136, 2, 62, "Output"]
}, Open  ]],
Cell[147484, 4413, 108, 3, 26, "Text"],
Cell[147595, 4418, 189, 4, 43, "Text"],

Cell[CellGroupData[{
Cell[147809, 4426, 63, 1, 47, "Input"],
Cell[147875, 4429, 50, 1, 62, "Output"]
}, Open  ]],
Cell[147940, 4433, 189, 7, 26, "Text"],

Cell[CellGroupData[{
Cell[148154, 4444, 124, 2, 69, "Input"],
Cell[148281, 4448, 107, 2, 46, "Output"]
}, Open  ]],
Cell[148403, 4453, 224, 8, 27, "Text"],

Cell[CellGroupData[{
Cell[148652, 4465, 52, 1, 47, "Input"],
Cell[148707, 4468, 465, 7, 142, "Output"]
}, Open  ]],
Cell[149187, 4478, 90, 3, 26, "Text"],

Cell[CellGroupData[{
Cell[149302, 4485, 66, 1, 47, "Input"],
Cell[149371, 4488, 418, 7, 126, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[149838, 4501, 47, 0, 28, "Subsection"],
Cell[149888, 4503, 144, 3, 26, "Text"],

Cell[CellGroupData[{
Cell[150057, 4510, 57, 1, 47, "Input"],
Cell[150117, 4513, 194, 3, 54, "Print"]
}, Open  ]],

Cell[CellGroupData[{
Cell[150348, 4521, 116, 2, 47, "Input"],
Cell[150467, 4525, 44, 0, 46, "Output"]
}, Open  ]],
Cell[150526, 4528, 128, 3, 26, "Text"],

Cell[CellGroupData[{
Cell[150679, 4535, 56, 1, 47, "Input"],
Cell[150738, 4538, 402, 11, 146, "Print"]
}, Open  ]],
Cell[151155, 4552, 323, 9, 45, "Text"],

Cell[CellGroupData[{
Cell[151503, 4565, 148, 2, 64, "Input"],
Cell[151654, 4569, 134, 2, 62, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[151825, 4576, 200, 3, 115, "Input"],
Cell[152028, 4581, 45, 1, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[152110, 4587, 49, 1, 47, "Input"],
Cell[152162, 4590, 125, 7, 90, "Print"]
}, Open  ]],

Cell[CellGroupData[{
Cell[152324, 4602, 74, 1, 47, "Input"],
Cell[152401, 4605, 62, 0, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[152500, 4610, 175, 3, 64, "Input"],
Cell[152678, 4615, 436, 12, 108, "Output"]
}, Open  ]],
Cell[153129, 4630, 225, 6, 27, "Text"],

Cell[CellGroupData[{
Cell[153379, 4640, 127, 2, 47, "Input"],
Cell[153509, 4644, 44, 1, 46, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[153590, 4650, 48, 1, 47, "Input"],
Cell[153641, 4653, 114, 6, 77, "Print"]
}, Open  ]],

Cell[CellGroupData[{
Cell[153792, 4664, 196, 3, 64, "Input"],
Cell[153991, 4669, 44, 1, 46, "Output"]
}, Open  ]]
}, Closed]],
Cell[154062, 4674, 54, 0, 28, "Subsection"],

Cell[CellGroupData[{
Cell[154141, 4678, 63, 0, 44, "Subsection"],
Cell[154207, 4680, 172, 4, 43, "Text"],
Cell[154382, 4686, 226, 5, 43, "Text"],
Cell[154611, 4693, 2195, 58, 370, "Input"],
Cell[156809, 4753, 112, 3, 26, "Text"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[156970, 4762, 40, 0, 34, "Section"],
Cell[157013, 4764, 557, 9, 77, "Text"],
Cell[157573, 4775, 53, 0, 44, "Subsection"],
Cell[157629, 4777, 43, 0, 44, "Subsection"],

Cell[CellGroupData[{
Cell[157697, 4781, 37, 0, 44, "Subsection"],

Cell[CellGroupData[{
Cell[157759, 4785, 47, 1, 47, "Input"],
Cell[157809, 4788, 167, 2, 38, "Print"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{
Cell[158025, 4796, 30, 0, 44, "Subsection"],
Cell[158058, 4798, 363, 11, 44, "Text"],

Cell[CellGroupData[{
Cell[158446, 4813, 46, 1, 47, "Input"],
Cell[158495, 4816, 235, 3, 54, "Print"]
}, Open  ]],
Cell[158745, 4822, 76, 0, 26, "Text"],

Cell[CellGroupData[{
Cell[158846, 4826, 50, 1, 47, "Input"],
Cell[158899, 4829, 107, 2, 46, "Output"]
}, Open  ]],
Cell[159021, 4834, 181, 4, 27, "Text"],

Cell[CellGroupData[{
Cell[159227, 4842, 155, 3, 81, "Input"],
Cell[159385, 4847, 550, 13, 89, "Output"]
}, Open  ]],
Cell[159950, 4863, 360, 7, 61, "Text"],

Cell[CellGroupData[{
Cell[160335, 4874, 244, 4, 132, "Input"],
Cell[160582, 4880, 621, 9, 132, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[161240, 4894, 88, 1, 47, "Input"],
Cell[161331, 4897, 1744, 35, 262, "Output"]
}, Open  ]],
Cell[163090, 4935, 226, 6, 43, "Text"],

Cell[CellGroupData[{
Cell[163341, 4945, 131, 3, 47, "Input"],
Cell[163475, 4950, 432, 7, 94, "Output"]
}, Open  ]],
Cell[163922, 4960, 424, 12, 61, "Text"],
Cell[164349, 4974, 289, 4, 132, "Input"],

Cell[CellGroupData[{
Cell[164663, 4982, 82, 1, 47, "Input"],
Cell[164748, 4985, 2287, 45, 308, "Output"]
}, Open  ]],
Cell[167050, 5033, 358, 8, 44, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[167445, 5046, 53, 0, 28, "Subsection"],
Cell[167501, 5048, 100, 3, 26, "Text"],

Cell[CellGroupData[{
Cell[167626, 5055, 45, 1, 47, "Input"],
Cell[167674, 5058, 133, 2, 38, "Print"]
}, Open  ]],

Cell[CellGroupData[{
Cell[167844, 5065, 71, 1, 47, "Input"],
Cell[167918, 5068, 65, 1, 46, "Output"]
}, Open  ]],
Cell[167998, 5072, 410, 7, 77, "Text"],

Cell[CellGroupData[{
Cell[168433, 5083, 313, 5, 149, "Input"],
Cell[168749, 5090, 693, 12, 158, "Output"]
}, Open  ]],
Cell[169457, 5105, 76, 0, 26, "Text"],

Cell[CellGroupData[{
Cell[169558, 5109, 92, 1, 47, "Input"],
Cell[169653, 5112, 1877, 39, 273, "Output"]
}, Open  ]],
Cell[171545, 5154, 533, 11, 77, "Text"],

Cell[CellGroupData[{
Cell[172103, 5169, 147, 3, 47, "Input"],
Cell[172253, 5174, 602, 9, 158, "Output"]
}, Open  ]],
Cell[172870, 5186, 41, 0, 26, "Text"],

Cell[CellGroupData[{
Cell[172936, 5190, 80, 1, 47, "Input"],
Cell[173019, 5193, 1891, 38, 486, "Output"]
}, Closed]],
Cell[174925, 5234, 266, 7, 25, "Text"],

Cell[CellGroupData[{
Cell[175216, 5245, 49, 1, 47, "Input"],
Cell[175268, 5248, 123, 2, 22, "Print"]
}, Open  ]],

Cell[CellGroupData[{
Cell[175428, 5255, 49, 1, 47, "Input"],
Cell[175480, 5258, 124, 2, 22, "Print"]
}, Open  ]],
Cell[175619, 5263, 206, 6, 26, "Text"],

Cell[CellGroupData[{
Cell[175850, 5273, 48, 1, 47, "Input"],
Cell[175901, 5276, 240, 3, 54, "Print"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{
Cell[176190, 5285, 46, 0, 44, "Subsection"],

Cell[CellGroupData[{
Cell[176261, 5289, 65, 1, 47, "Input"],
Cell[176329, 5292, 51, 1, 46, "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{
Cell[176429, 5299, 63, 0, 44, "Subsection"],
Cell[176495, 5301, 33, 0, 26, "Text"]
}, Open  ]],

Cell[CellGroupData[{
Cell[176565, 5306, 131, 6, 52, "Subsection"],
Cell[176699, 5314, 232, 4, 43, "Text"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[176980, 5324, 70, 0, 34, "Section"],
Cell[177053, 5326, 67, 0, 26, "Text"],
Cell[177123, 5328, 223, 5, 26, "Text"]
}, Closed]],
Cell[177361, 5336, 60, 0, 34, "Section"],

Cell[CellGroupData[{
Cell[177446, 5340, 55, 0, 54, "Section"],
Cell[177504, 5342, 227, 4, 43, "Text"],

Cell[CellGroupData[{
Cell[177756, 5350, 885, 20, 81, "Input"],
Cell[178644, 5372, 5114, 100, 1790, "Output"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[183807, 5478, 43, 0, 34, "Section"],
Cell[183853, 5480, 132, 3, 26, "Text"],

Cell[CellGroupData[{
Cell[184010, 5487, 281, 5, 81, "Input"],
Cell[184294, 5494, 272, 5, 78, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[184603, 5504, 65, 1, 47, "Input"],
Cell[184671, 5507, 327, 6, 94, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[185047, 5519, 31, 0, 34, "Section"],
Cell[185081, 5521, 249, 7, 26, "Text",
  CellTags->"Wolfram book"],
Cell[185333, 5530, 181, 6, 26, "Text",
  CellTags->"Maeder book"],
Cell[185517, 5538, 155, 4, 26, "Text",
  CellTags->"MAD manual"],
Cell[185675, 5544, 185, 3, 23, "Program"]
}, Closed]]
}
]
*)



(*******************************************************************
End of Mathematica Notebook file.
*******************************************************************)

