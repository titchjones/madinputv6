(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)

























































































































BeginPackage["Madtomma`MadLanguage`SymboliseMultipoles`"]





SymboliseMultipoles::usage = "SymboliseMultipoles.m is a package that restores correct symbolic dependences of multipole strengths in MAD8 files generated by MAD9.";

SymboliseMultipolesMAD8::usage="SymboliseMultipolesMAD8[mad9file,mad8file,\
fixedFile] uses the original multipole definitions in a MAD9 file to restore \
correct symbolic dependences of multipole strengths in a MAD8 file generated \
by MAD9. The output is given on a new file fixedFile (which is overwritten if \
it already exists).";

stripComment::usage="\!\(InputForm\`stripComment\)[stmt,comchar] strips off \
comment text, taken to be anything to the right of comchar (default \"//\") \
in the string stmt.";

cleanReadMAD9file::usage="cleanReadMAD9file[mad9file] reads in a MAD9 file \
and returns a list of complete commands without comments.";

cleanReadMAD8file::usage=
    "cleanReadMAD8file[mad8file] reads in a MAD8 file and returns a list of \
complete commands without comments.";

MAD9label::usage="MAD9label[stmt] returns the label part of a MAD9 \
statement.";

MAD8label::usage="MAD8label[stmt] returns the label part of a MAD8 \
statement.";

MAD9keyword::usage="MAD9keyword[stmt] returns the keyword part of a MAD9 \
statement.";

MAD8keyword::usage="MAD8keyword[stmt] returns the keyword part of a MAD8 \
statement.";

MAD8sliceParent::usage="MAD8sliceParent[elementname] returns the name of the \
parent element of a thin slice generated by MAD9 in a MAD8 format file.";

MAD9multipoleList::usage="MAD9multipoleList[stmt,type] where type is \"KN\" \
(default) or \"KS\" returns a list of strings giving the MAD9 multipole \
strengths found in the MAD9 command stnt.";

MAD8multipoleDefinition::usage="MAD8multipoleDefinition[KN,KS,LRAD] converts \
a MAD8 multipole definition string to MAD8 format.";

breakMAD8line::usage="breakMAD8line[mad8line] breaks up a long MAD8 line into \
a list of lines that do not exceed the length limit in MAD8.";











Begin["`Private`"]







SymboliseMultipolesMAD8[thickFile_String,thinFile_String,fixedFile_String]:=
  Module[{thickclean,thickMultipoles,mnames,mKN,mKS,thinclean,
      fixedMAD8commands},
    thickclean=cleanReadMAD9file[thickFile];
    thickMultipoles=
      Select[thickclean,(StringMatchQ[#,"*KN*{*}"]||
              StringMatchQ[#,"*KS*{*}"])&] ;
    mnames=MAD9label/@thickMultipoles;
    mKN=MAD9multipoleList/@thickMultipoles;
    mKS=MAD9multipoleList[#,"KS"]&/@thickMultipoles;
    thinclean=cleanReadMAD8file[thinFile];
    fixedMAD8commands=
      Flatten[breakMAD8line/@((symboliseMultipoles[#,mnames,mKN,mKS]<>";")&/@
              thinclean)];
    DeleteFile[fixedFile];
    fixed=OpenWrite[fixedFile];
    WriteString[fixed,
      "!! <MAD8 file processed by SymboliseMultipoles.m>;\n"];
    WriteString[fixed,#<>"\n"]&/@fixedMAD8commands;
    WriteString[fixed,
      "!! </MAD8 file processed by SymboliseMultipoles.m>;\n"];
    Close[fixed]
    ]





stripComment[s_String,comchar_String:"//"]:=
  If[StringTake[s,StringLength[comchar]]\[Equal]comchar,s,
    StringTake[s,First@First@StringPosition[s,comchar]-1]]

cleanReadMAD9file[thickFile_String]:=Module[{thick,thicknocomment,thicks},
    thick=
      ToUpperCase/@ReadList[thickFile,Record,RecordSeparators\[Rule]{"\n"}];
    thicknocomment=
      If[Not@StringMatchQ[#,"*//*"],#,stripComment[#]<>";"]&/@thick;
    thicks=
      FixedPoint[
        StringReplace[#,{" ;"\[Rule]";","; "\[Rule]";"," ,"\[Rule]",",
              ", "\[Rule]","," :"\[Rule]":",": "\[Rule]":"," ="\[Rule]"=",
              "= "\[Rule]"="}]&,StringJoin@@thicknocomment];
    ReadList[StringToStream[thicks],Record,RecordSeparators\[Rule]{";"}]
    ]



cleanReadMAD8file[thinFile_String]:=Module[{thin,thinnocomment},
    thin=ReadList[thinFile,Record,RecordSeparators\[Rule]{"\n"}];
    thinnocomment=
      If[Not@StringMatchQ[#,"*!*"],#,stripComment[#,"!"]<>";"]&/@thin;
    thins=
      StringReplace[StringJoin@@((#<>";"&)/@thinnocomment),";;"\[Rule]";"];
    ReadList[StringToStream[StringReplace[thins,{"&;"\[Rule]""}]],Record,
      RecordSeparators\[Rule]{";"}]
    ]



MAD9label[s_String]:=
  Module[{colpos=StringPosition[s,":"],delpos=StringPosition[s,":="]},
    If[colpos=!={}&&
        colpos\[LeftDoubleBracket]1,1\[RightDoubleBracket]=!=
          delpos\[LeftDoubleBracket]1,1\[RightDoubleBracket],
      StringReplace[StringTake[s,First[First[colpos]]-1],{" "\[Rule]""}],""]]

MAD8label[s_String]:=MAD9label[s]

(* developing *)
MAD9keyword[s_String]:=Module[{colpos=StringPosition[s,":"],
      delpos=StringPosition[s,":="],compos},
    key1=If[
        colpos=!={}&&
          colpos\[LeftDoubleBracket]1,1\[RightDoubleBracket]=!=
            delpos\[LeftDoubleBracket]1,1\[RightDoubleBracket],
        colpos\[LeftDoubleBracket]1,1\[RightDoubleBracket],1];
    compos=StringPosition[StringDrop[s,key1-1],","];
    key2=key1-1+
        If[compos=!={},compos\[LeftDoubleBracket]1,1\[RightDoubleBracket],
          StringLength[s]-key1+2];
    StringTake[s,{key1+1,key2-1}]
    ]



MAD8keyword[s_String]:=MAD9keyword[s]

MAD9multipoleList[s_String,type_String:"KN"]:=Module[{s1,kpos},
    s1=StringReplace[s,{":="\[Rule]"="}];
    kpos=StringPosition[s1,type<>"={"];
    If[kpos=!={},
      s1=StringTake[s1,{First[First[kpos]]+3,StringLength[s1]}];
      s1=StringTake[s1,{1,First[First[StringPosition[s1,"}"]]]}];
      ToExpression[
        StringReplace[
          s1,{" "\[Rule]"","{"\[Rule]"{\"",","\[Rule]"\",\"",
            "}"\[Rule]"\"}"}]],
      {}
      ]
    ]

MAD8sliceParent[nam_String]:=Module[{spos=StringPosition[nam,".."]},
    If[spos=={},Null,
      StringTake[nam,spos\[LeftDoubleBracket]1,1\[RightDoubleBracket]-1]]
    ]





MAD8multipoleDefinition[kn_,ks_,lrad_]:=
  Module[{nmax=Max@@(Length/@{kn,ks}),kne,kse},
    kne=PadRight[kn,nmax,"0"];
    kse=PadRight[ks,nmax,"0"];
    StringDrop[StringJoin@@Table[
          
          Which[kne\[LeftDoubleBracket]n\[RightDoubleBracket]\[Equal]"0"&&
              kse\[LeftDoubleBracket]n\[RightDoubleBracket]\[Equal]"0","",
            kse\[LeftDoubleBracket]n\[RightDoubleBracket]\[Equal]"0",
            
            "K"<>ToString[n-1]<>"L=("<>
              kne\[LeftDoubleBracket]n\[RightDoubleBracket]<>")*("<>lrad<>
              "),",
            kne\[LeftDoubleBracket]n\[RightDoubleBracket]\[Equal]"0",
            
            "K"<>ToString[n-1]<>"L=("<>
              kse\[LeftDoubleBracket]n\[RightDoubleBracket]<>")*("<>lrad<>
              "),"<>
              "T"<>ToString[n-1]<>"=PI/"<>ToString[n]<>",",
            True,
            
            "K"<>ToString[n-1]<>"L=SQRT(("<>
              kne\[LeftDoubleBracket]n\[RightDoubleBracket]<>")^2+("<>
              kse\[LeftDoubleBracket]n\[RightDoubleBracket]<>")^2)*("<>lrad<>
              "),"<>
              "T"<>ToString[n-1]<>"=ATAN2(("<>
              kse\[LeftDoubleBracket]n\[RightDoubleBracket]<>"),("<>
              kne\[LeftDoubleBracket]n\[RightDoubleBracket]<>"))/"<>
              ToString[n]<>","
            ],{n,1,nmax}],
      -1]
    ]

breakMAD8line[s_String]:=Module[{},
    If[StringLength[s]<80,s,
      brk=Max[Select[Flatten[compos=StringPosition[s,","]],#<72&]];
      Flatten[{StringTake[s,{1,brk}]<>"&",
          breakMAD8line["     "<>StringTake[s,{brk+1,StringLength[s]}]]}]
      ]
    ]



stemLRAD[m8line_String]:=Module[
    {lrpos=StringPosition[m8line,",LRAD="],tailpos,valLRAD},
    tailpos=Min[Select[
          
          First/@(StringPosition[m8line,","]\[Union]StringPosition[m8line,
                  ";"]),
          #1>lrpos\[LeftDoubleBracket]1,1\[RightDoubleBracket]&]];
    tailpos=Min[tailpos,StringLength[m8line]+1];
    valLRAD=
      StringTake[
        m8line,{lrpos\[LeftDoubleBracket]1,2\[RightDoubleBracket]+1,
          tailpos-1}];
    {StringTake[m8line,tailpos-1],valLRAD}]



relatedMultipole[m8line_String,mnames_List]:=Module[{},
    {Position[mnames,MAD8label[m8line]],
      Position[mnames,MAD8keyword[m8line]],
      Position[mnames,MAD8sliceParent[MAD8label[m8line]]]}
    ]

symboliseMultipoles[m8line_String,mnames_List,mKN_List,mKS_List]:=
  Module[{mp,stem,lradval},
    If[Not[StringMatchQ[m8line,"*,LRAD=*"]],
      m8line,
      ({stem,lradval}=stemLRAD[m8line];
        If[IntegerQ[mp=First[Flatten[relatedMultipole[m8line,mnames]]]],
          
          stem<>","<>
            MAD8multipoleDefinition[
              mKN\[LeftDoubleBracket]mp\[RightDoubleBracket],
              mKS\[LeftDoubleBracket]mp\[RightDoubleBracket],lradval]
          ,m8line])
      ]
    ]



End[ ]















EndPackage[ ]





























































































