(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["Madtomma`Mfs`OpticsUtilities`",
	"Madtomma`Mfs`Mfs`","Graphics`Legend`","Graphics`MultipleListPlot`"]



opticsNotation::usage="opticsNotation[expr] transforms any strings containing MAD notations such as \"BETX\" appearing in expression expr into conventional notations such as \!\(\*SubscriptBox[\(\[Beta]\), \(x\)]\).  The rules for these are contained in opticsNotationRules."


compareOptics::usage = "compareOptics[mfs1,mfs2,colName] takes two mfs objects and returns a list of elements labelled by colName which are not common to these objects.";


opticsRange::usage = "opticsRange[mfs,{element1Name,element2Name}] returns a mfs data object with elements whose names lie within a range specified by element1Name and element2Name.";


opticsPlot::usage = "opticsPlot[optics,opts] draws a schematic picture of beamline elements contained in the mfs object optics.\nIf a list of data columns from the same mfs object is given ( opticsPlot[optics,colnames,opts] ), it includes their plots as well. Every column name may be substituted by a list of a form {colname,fun} yielding a plot with the function fun applied to the data column labelled by colname.";


standardOpticsPlot::usage="standardOpticsPlot[mfs] plots the beta and Dx functions according to data the mfs object with their peaks labelled by appropriate quad names.";


compareInsertionPlots::usage="compareInsertionPlots[opt1,opt2,{el0_,el1_}] plots 3 graphs (of beta and Dx functions) comparing on each of them the data from the two mfs data objects, opt1 and opt2.";


quadGraphic::usage="quadGraphic is an option for opticsPlot and opticsPlot3D specifying the type of a graphics function to represent quads.";


quadRectangle::usage="quadRectangle is a possible value of quadGraphic, an option for the function opticsPlot. It represens quads as rectangles. The S axis is horizontal and quad strength is proportional to rectangle's height.";


quadVerticalRectangle::usage="quadVerticalRectangle is a possible value of quadGraphic, an option for the function opticsPlot. It represens quads as rectangles. The S axis is vertical and quad strength is proportional to rectangle's height.";


opticsPlot3D::usage="opticsPlot3D[optics,opts] draws a 3-dimensional beamline layout including elements contained in the mfs data object optics.";


quadBlock::usage="quadBlock is a default value of quadGraphic, an option for the function opticsPlot3D. It plots quads as blocks.";


quadBar::usage="quadBar is a possible value of quadGraphic, an option for the function opticsPlot3D. It plots quads as bar doublets indicating the focusing direction by their orientation.";


quadWedge::usage="quadWedge is a possible value of quadGraphic, an option for the function opticsPlot3D. It plots quads as wedge doublets indicating the focusing direction by their orientation.";


quadRatio::usage="quadRatio is an option for the opticsPlot function determining the ratio between the biggest quad strength and the maximum plotted function value. Default value is 0.1 .";


quadColor::usage="quadColor is an option for opticsPlot determining a type fo color function to be used. Default value is quadPastel.";


quadPastel::usage="quadPastel is a possible value of quadColor, an option for the functions opticsPlot. It sets the colours of plotted quads as blue and pink.";


quadGray::usage="quadGray is a possible value of quadColor, an option for the functions opticsPlot. It plots the quads in black and light gray.";


quadShift::usage="quadShift is an option for opticsPlot specifying the value of a shift of the quad plot (in pixels). The default value is 0 (no shift).";


quadShiftAutomatic::usage="quadShiftAutomatic is a possible value of quadShift, an option for the functions opticsPlot. Its value corresponds to a shift replacing the quad plot just below the S axis.";


calculateLEPOptics::usage="";


opticsRange::badarg = "Element `1` does not exist.";


Begin["`Private`"]


Needs["Utilities`FilterOptions`"]


OpticsQ[x_mfs]:=Complement[{"NAME","S","K1L","BETX","ALFX","MUX","DX","ALFY","BETY","MUY"},mfsColumnNames[x]]=={}


getData[optics_mfs,name_String,fun_]:=Module[{cols},
	cols=mfsColumn[optics,{"S",name}];
	Transpose@ReplacePart[cols,fun@Last[cols],2]
	]


padArgument[x_/;StringQ[x]]:={x,Identity};


padArgument[{a_,b_}/;(StringQ[a]&&NumberQ[b])]:={a,Times[b,#]&};


padArgument[{a_,b_}/;StringQ[a]]:={a,b};


legendArg[x_/;StringQ[x]]:=x;


legendArg[{a_,b_}]:=ToString[b]<>" "<>a;


opticsNotationRules={"S"->"s","BETX"->"\!\(\*SubscriptBox[\(\[Beta]\), \(x\)]\)","MUX"->"\!\(\*SubscriptBox[\(\[Mu]\), \(x\)]\)","DX"->"\!\(\*SubscriptBox[\(D\), \(x\)]\)","BETY"->"\!\(\*SubscriptBox[\(\[Beta]\), \(y\)]\)","MUY"->"\!\(\*SubscriptBox[\(\[Mu]\), \(y\)]\)","DY"->"\!\(\*SubscriptBox[\(D\), \(y\)]\)","GAMTR"->"\!\(\*SubscriptBox[\(\[Gamma]\), \(t\)]\)","ALFA"->"\!\(\*SubscriptBox[\(\[Alpha]\), \(c\)]\)","XIX"->"\!\(\*SubscriptBox[\(\[Xi]\), \(x\)]\)","QX"->"\!\(\*SubscriptBox[\(Q\), \(x\)]\)","XIY"->"\!\(\*SubscriptBox[\(\[Xi]\), \(y\)]\)","QY"->"\!\(\*SubscriptBox[\(Q\), \(y\)]\)","CIRCUM"->"C","DELTA"->"\!\(\*FractionBox[\(\[Delta]p\), \(p\)]\)",
		"XN"->"\!\(\*SubscriptBox[\(x\), \(n\)]\)","PXN"->"\!\(\*SubscriptBox[\(p\), \(xn\)]\)","YN"->"\!\(\*SubscriptBox[\(y\), \(n\)]\)","PYN"->"\!\(\*SubscriptBox[\(p\), \(yn\)]\)","TN"->"\!\(\*SubscriptBox[\(t\), \(n\)]\)","PTN"->"\!\(\*SubscriptBox[\(p\), \(tn\)]\)",
	"IX"->"\!\(\*SubscriptBox[\(I\), \(x\)]\)","PHIX"->"\!\(\*SubscriptBox[\(\[Phi]\), \(x\)]\)","IY"->"\!\(\*SubscriptBox[\(I\), \(y\)]\)","PHIY"->"\!\(\*SubscriptBox[\(\[Phi]\), \(y\)]\)","IT"->"\!\(\*SubscriptBox[\(I\), \(t\)]\)","PHIT"->"\!\(\*SubscriptBox[\(\[Phi]\), \(t\)]\)",
		"X"->"x","PX"->"\!\(\*SubscriptBox[\(p\), \(x\)]\)","Y"->"y","PY"->"\!\(\*SubscriptBox[\(p\), \(y\)]\)","T"->"t","DELTAP"->"\!\(\*SubscriptBox[\(p\), \(t\)]\)"};


opticsNotation[x_String]:=StringReplace[x,opticsNotationRules]


opticsNotation[x_Symbol]:=x


opticsNotation[x_/;NumberQ[x]]:=x


opticsNotation[x_]:=Map[opticsNotation,x,\[Infinity]]


compareOptics[opt1_,opt2_,col_String]:=Module[{},
		Drop[#,{3}]& /@ Select[
			Partition[
				Flatten[	
					Transpose[{Transpose[mfsColumn[opt1,{"NAME",col}]],
							Transpose[mfsColumn[opt2,{"NAME",col}]]
							}
					]],4],(!(#[[1]]==#[[3]] &&
                 #[[2]]==#[[4]]))&]
		]   /; OpticsQ[opt1] && OpticsQ[opt2]                                                             


opticsRange[optics_mfs,{element1_String,element2_String}]:=
		If[!MemberQ[mfsColumn[optics,"NAME"],element1],Message[opticsRange::badarg,element1],
		If[!MemberQ[mfsColumn[optics,"NAME"],element2],Message[opticsRange::badarg,element2],
	(	mfsRange[optics,"S",
		Sort[mfsColumn[mfsMember[optics,"NAME",{element1,element2}],"S"]
		         ]+{-.001,.001}	])
				]
	]/; MemberQ[mfsColumnNames[optics],"NAME"]


quadPastel[K1_]:=If[Positive[K1],RGBColor[.7,.7,1],RGBColor[1,.7,.7]]


quadGray[K1_]:=If[Positive[K1],GrayLevel[0],GrayLevel[.9]]


quadRectangle[{s_,len_,K1_,label_},colorFun_,quadMove_]:={colorFun[K1],Rectangle[{s-len/2,-(K1/2)+quadMove},{s+len/2,K1/2+quadMove}],RGBColor[0,0,0],Text[label,{s,K1/2+quadMove}]}


quadVerticalRectangle[{s_,len_,K1_,label_},colorFun_,quadMove_]:=quadRectangle[{s,len,K1,label},colorFun,quadMove]/.{Rectangle[{x_,y_},{x1_,y1_}]->Rectangle[{y,x},{y1,x1}],Text[a_,{u_,v_}]->Text[a,{v,u}]};


quadBlock[{s_,len_,K1_,label_},colorFun_]:={colorFun[K1],Cuboid[{s-len/2,-(K1/2),-(K1/2)},{s+len/2,K1/2,K1/2}],RGBColor[0,0,0],Text[label,{s,0,K1/2}]}


quadBar[{s_,len_,K1_,label_},colorFun_]:={colorFun[K1],If[Positive[K1],{Cuboid[{s-len/2,K1/4,-(K1/2)},{s+len/2,K1/2,K1/2}],Cuboid[{s-len/2,-(K1/4),-(K1/2)},{s+len/2,-(K1/2),K1/2}]},{Cuboid[{s-len/2,-(K1/2),K1/4},{s+len/2,K1/2,K1/2}],Cuboid[{s-len/2,-(K1/2),-(K1/4)},{s+len/2,K1/2,-(K1/2)}]}],Text[label,{s,0,(2 K1)/3}]}


quadWedge[{s_,len_,K1_,label_},colorFun_]:=
	{colorFun[K1],
		If[Positive[K1],
			{Polygon[{{s,K1/4,0},{s,K1/2,-(K1/4)},{s,K1/2,K1/4}}],
				Polygon[{{s,-(K1/4),0},{s,-(K1/2),-(K1/4)},{s,-(K1/2),K1/4}}],Line[{{s,-(K1/4),0},{s,K1/4,0}}],RGBColor[0,0,0],Text[label,{s,(2 K1)/3,0}]},
			{Polygon[{{s,0,-(K1/4)},{s,-(K1/4),-(K1/2)},{s,K1/4,-(K1/2)}}],Polygon[{{s,0,K1/4},{s,-(K1/4),K1/2},{s,K1/4,K1/2}}],Line[{{s,0,-(K1/4)},{s,0,K1/4}}],RGBColor[0,0,0],Text[label,{s,0,(2 K1)/3}]}]}


Options[opticsPlot]=Join[Options[MultipleListPlot],{quadGraphic->quadRectangle,quadRatio->.1,quadColor->quadPastel,quadShift->0,Axes->True,PlotRange->All,AxesOrigin->{0,0},PlotJoined->True,LegendSize->{.6,.3},LegendPosition->{-1,-1.1},AxesLabel->{"S",""}}];


opticsPlot[optics_mfs,opts___Rule]:=Module[{quadGraph,quadCol,quadMove,tempMove,propColNames,data,maxQuad,quadFact,gr,o,maxData,grfx},
		quadGraph=quadGraphic/.{opts} /. Options[opticsPlot];
		quadCol=quadColor/.{opts}/.Options[opticsPlot];
			quadMove=quadShift/.{opts}/.Options[opticsPlot];
				data=(ReplacePart[#,#[[3]]/#[[2]],3])&/@Transpose[mfsColumn[optics,{"S","L","K1L","NAME"}]];
		maxQuad=Max[Abs@(#[[3]])&/@data];
		data=(ReplacePart[#,200 #[[3]]/maxQuad,3])&/@data;
			gr=Map[(quadGraph[#,quadCol,tempMove])&,data];
	If[quadMove===quadShiftAutomatic,tempMove=-100,tempMove=quadMove];
		Show[Graphics[gr,AxesLabel->None,FilterOptions[Graphics,opts,Options[opticsPlot]]]]
		]/; OpticsQ[optics]


opticsPlot[optics_mfs,colNames_List,opts___Rule/;(quadGraphic/.{opts})===quadVerticalRectangle]:=Module[{propColNames,qRatio,quadCol,quadMove,tempMove,data,maxQuad,quadFact,gr,o,maxData,grfx},
		propColNames=padArgument/@colNames;
		qRatio=quadRatio/.{opts} /. Options[opticsPlot];
			quadCol=quadColor/.{opts}/.Options[opticsPlot];
		quadMove=quadShift/.{opts}/.Options[opticsPlot];
data=Transpose[mfsColumn[optics,{"S","L","K1L","NAME"}]];
		maxQuad=Max[Abs@(#[[3]]/#[[2]])&/@data];
		data=(ReplacePart[#,quadFact #[[3]]/#[[2]],3])&/@data;
	gr=Map[(quadVerticalRectangle[#,quadCol,tempMove])&,data];
		o=Options[MultipleListPlot];
		SetOptions[MultipleListPlot,FilterOptions[MultipleListPlot,Options[opticsPlot],opts],DisplayFunction->Identity,PlotLegend->legendArg/@colNames,Prolog->{gr},AxesLabel->{" ","S"}];
		data=(getData[optics,First[#],Last[#]])&/@propColNames;
		maxData=Max@Abs[Flatten@Map[(Last[#])&,data,{2}]];
			quadFact=2 qRatio maxData/maxQuad;
	If[quadMove===quadShiftAutomatic,tempMove=-qRatio maxData,tempMove=quadMove];
				data=Map[Reverse,data,{2}];
grfx=MultipleListPlot[(data)];
		(SetOptions[MultipleListPlot,#1]&)/@o;
		Show[grfx/.Identity->$DisplayFunction]
		]/; OpticsQ[optics]


opticsPlot[optics_mfs,colNames_List,opts___Rule]:=Module[{quadGraph,qRatio,quadCol,quadMove,tempMove,propColNames,data,maxQuad,quadFact,gr,o,maxData,grfx},
		quadGraph=quadGraphic/.{opts} /. Options[opticsPlot];
		qRatio=quadRatio/.{opts} /. Options[opticsPlot];
			quadCol=quadColor/.{opts}/.Options[opticsPlot];
			quadMove=quadShift/.{opts}/.Options[opticsPlot];
		propColNames=padArgument/@colNames;
data=Transpose[mfsColumn[optics,{"S","L","K1L","NAME"}]];
		maxQuad=Max[Abs@(#[[3]]/#[[2]])&/@data];
		data=(ReplacePart[#,quadFact #[[3]]/#[[2]],3])&/@data;
	gr=Map[(quadGraph[#,quadCol,tempMove])&,data];
		o=Options[MultipleListPlot];
		SetOptions[MultipleListPlot,FilterOptions[MultipleListPlot,Options[opticsPlot],opts],DisplayFunction->Identity,PlotLegend->legendArg/@colNames,Prolog->{gr}];
		data=(getData[optics,First[#],Last[#]])&/@propColNames;
		maxData=Max@Abs[Flatten@Map[(Last[#])&,data,{2}]];
		quadFact=2 qRatio maxData/maxQuad;
				If[quadMove===quadShiftAutomatic,tempMove=-qRatio maxData,tempMove=quadMove];
grfx=MultipleListPlot[(data)];
		(SetOptions[MultipleListPlot,#1]&)/@o;
		Show[grfx/.Identity->$DisplayFunction]
		]/; OpticsQ[optics]


opticsPlot[optics_mfs,colNames_String,opts___Rule]:=opticsPlot[optics,{colNames},opts]


opticsPlot[optics_mfs,colNames_String,fun_,opts___Rule]:=opticsPlot[optics,{{colNames,fun}},opts]


Options[opticsPlot3D]={quadGraphic->quadBlock,quadColor->quadPastel,Axes->True,PlotRange->All,AxesLabel->{"S",""," "},ViewPoint->{-1.157,-3.162,0.9},Lighting->False,BoxRatios->Automatic};


opticsPlot3D[optics_mfs,opts___Rule]:=Module[{quadGraph,quadCol,data,maxQuad,gr},
		quadGraph=quadGraphic/.{opts}/.Options[opticsPlot3D];
			quadCol=quadColor/.{opts}/.Options[opticsPlot];
		data=(ReplacePart[#,#[[3]]/#[[2]],3])&/@Transpose[mfsColumn[optics,{"S","L","K1L","NAME"}]];
		maxQuad=Max[Abs@(#[[3]])&/@data];
		data=(ReplacePart[#,200 #[[3]]/maxQuad,3])&/@data;
gr={Map[(quadGraph[#,quadCol])&,data],RGBColor[0.7,0.7,.5],Line[{{First[First[data]],0,0},{First[Last[data]],0,0}}]};
		Show[Graphics3D[gr,FilterOptions[Graphics3D,opts,Options[opticsPlot3D]]]]
		]


standardOpticsPlot[optics_mfs]:=Module[{Dxfac},
		Print[mfsKeyValue[optics,"COMMENT"]];
		Dxfac=100;
		MultipleListPlot[Transpose[mfsColumn[optics,{"S","BETX"}]],
			Transpose[mfsColumn[optics,{"S","BETY"}]],			
			Transpose[{1,Dxfac}mfsColumn[optics,{"S","DX"}]],
			PlotRange->All,
			PlotLegend->{"\!\(\[Beta]\_x\)","\!\(\[Beta]\_y\)","100\!\(D\_x\)"},
			LegendPosition->{-1,-1.1},
			LegendSize->{1,0.3},
			PlotJoined->True,
			Epilog->(
					(Text[#[[1]],{#[[2]],1.05Max[#[[3]],#[[4]]]}]) & /@ 
				(Transpose[mfsColumn[optics,{"NAME","S","BETX","BETY"}]])
					)
			]
	]


compareInsertionPlots[opt1_mfs,opt2_mfs,{el0_,el1_}]:=Module[{},
MultipleListPlot[
	Transpose[mfsColumn[opticsRange[opt1,{el0,el1}],{"S","BETX"}]],
	Transpose[{mfsColumn[opticsRange[opt1,{el0,el1}],"S"],mfsColumn[opt2,"BETX"]}],
	AxesLabel->{"S","BETX"},PlotJoined->True
	];
	MultipleListPlot[
	Transpose[mfsColumn[opticsRange[opt1,{el0,el1}],{"S","BETY"}]],
	Transpose[{mfsColumn[opticsRange[opt1,{el0,el1}],"S"],mfsColumn[opt2,"BETY"]}],
	AxesLabel->{"S","BETY"},PlotJoined->True
	];
	MultipleListPlot[
	Transpose[mfsColumn[opticsRange[opt1,{el0,el1}],{"S","DX"}]],
	Transpose[{mfsColumn[opticsRange[opt1,{el0,el1}],"S"],mfsColumn[opt2,"DX"]}	],
	AxesLabel->{"S","DX"},PlotJoined->True
]
	]/; OpticsQ[opt1] && OpticsQ[opt2]


Protect[ Evaluate[protected] ]


End[ ]


Protect[ compareOptics,opticsRange,opticsPlot,opticsPlot3D,standardOpticsPlot,compareInsertionPlots,quadRectangle,quadVerticalRectangle,quadBlock,quadBar,quadWedge,quadGraphic,quadRatio,quadColor,quadPastel,quadGray,quadShift,quadShiftAutomatic,calculateLEPOptics]


EndPackage[ ]



