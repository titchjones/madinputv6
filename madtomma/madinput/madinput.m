(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
BeginPackage["Madtomma`MADInput`MADInput`",{"Madtomma`Mfs`Mfs`","Madtomma`Mfs`MAD8Survey`","PlotLegends`"}];


(* ::Input::Initialization:: *)
Off[General::"spell1"]


(* ::Input::Initialization:: *)
Off[General::"spell"]


(* ::Input::Initialization:: *)
ResPlotColours={
{ColorData["Legacy","Black"],AbsoluteThickness[2]},
{ColorData["Legacy","Red"],AbsoluteThickness[2]},
{ColorData["Legacy","Blue"],AbsoluteThickness[2]},
{ColorData["Legacy","Black"],AbsoluteThickness[.5]},
{ColorData["Legacy","Red"],AbsoluteThickness[0.5]},
{ColorData["Legacy","Blue"],AbsoluteThickness[.5]},
{ColorData["Legacy","Green"],AbsoluteThickness[.2]},
{ColorData["Legacy","Orange"],AbsoluteThickness[.2]},
{ColorData["Legacy","YellowGreen"],AbsoluteThickness[.2]},
{RGBColor[.6,1,0],AbsoluteThickness[.2]},
{RGBColor[.8,1,0],AbsoluteThickness[.2]},
{RGBColor[1,1,0],AbsoluteThickness[.2]},
{RGBColor[1,1,.2],AbsoluteThickness[.2]},
{RGBColor[1,1,.4],AbsoluteThickness[.2]},
{RGBColor[1,1,.6],AbsoluteThickness[.2]},
{RGBColor[1,1,.8],AbsoluteThickness[.2]},
{RGBColor[1,1,1],AbsoluteThickness[.2]}};


(* ::Input::Initialization:: *)
Legend::usage="Options for ResonancePlot";


(* ::Input::Initialization:: *)
LegendData={
{Graphics[{Black,AbsoluteThickness[2],Line[{{0,0},{1,0}}]}],"1"},
{Graphics[{Red,AbsoluteThickness[2],Line[{{0,0},{1,0}}]}],"2"},
{Graphics[{Blue,AbsoluteThickness[2],Line[{{0,0},{1,0}}]}],"3"},
{Graphics[{Black,AbsoluteThickness[.5],Line[{{0,0},{1,0}}]}],"4"},
{Graphics[{Red,AbsoluteThickness[.5],Line[{{0,0},{1,0}}]}],"5"},
{Graphics[{Blue,AbsoluteThickness[.5],Line[{{0,0},{1,0}}]}],"6"},
{Graphics[{Green,AbsoluteThickness[.2],Line[{{0,0},{1,0}}]}],"7"},
{Graphics[{Orange,AbsoluteThickness[.2],Line[{{0,0},{1,0}}]}],"8"},
{Graphics[{ColorData["Legacy","YellowGreen"],AbsoluteThickness[.2],Line[{{0,0},{1,0}}]}],"9"},
{Graphics[{RGBColor[.8,1,0],AbsoluteThickness[.2],Line[{{0,0},{1,0}}]}],"10"},
{Graphics[{RGBColor[1,1,0],AbsoluteThickness[.2],Line[{{0,0},{1,0}}]}],"11"},
{Graphics[{RGBColor[1,1,.2],AbsoluteThickness[.2],Line[{{0,0},{1,0}}]}],"12"},
{Graphics[{RGBColor[1,1,.4],AbsoluteThickness[.2],Line[{{0,0},{1,0}}]}],"13"},
{Graphics[{RGBColor[1,1,.6],AbsoluteThickness[.2],Line[{{0,0},{1,0}}]}],"14"},
{Graphics[{RGBColor[1,1,.8],AbsoluteThickness[.2],Line[{{0,0},{1,0}}]}],"15"}};


(* ::Input::Initialization:: *)
File::usage="Option for MADPlot";
Colour::usage="Option for MADPlot";
HAxis::usage="Option for MADPlot";
VAxis::usage="Option for MADPlot";
VAxis1::usage="Option for MADPlot";
VAxis2::usage="Option for MADPlot";
VAxis3::usage="Option for MADPlot";
VAxis4::usage="Option for MADPlot";
Bars::usage="Option for MADPlot";
Style::usage="Option for MADPlot";
Symbol::usage="Option for MADPlot";
MaxPlot::usage="Option for MADPlot";
Sort::usage="Option for MADPlot";
Spline::usage="Option for MADPlot";
Multiple::usage="Option for MADPlot";
FFT::usage="Option for MADPlot";
HMin::usage="Option for MADPlot";
HMax::usage="Option for MADPlot";
VMin::usage="Option for MADPlot";
VMax::usage="Option for MADPlot";
Table::usage="Option for MADPlot";
Title::usage="Option for MADPlot";
Param::usage="Option for MADPlot";
Range::usage="Option for MADPlot";
Deltap::usage="Option for MADPlot";
Particle::usage="Option for MADPlot";
Turns::usage="Option for MADPlot";


(* ::Input::Initialization:: *)
Options[mfsPlotD]={Joined->True,
PlotStyle->{{AbsoluteThickness[2],RGBColor[1,0,0],AbsoluteDashing[{3}]},{AbsoluteThickness[2],RGBColor[0,0,1],AbsoluteDashing[{8}]},{AbsoluteThickness[2],RGBColor[0,0,0],AbsoluteDashing[{15}]},{AbsoluteThickness[2],RGBColor[0,1,0],AbsoluteDashing[{35}]}}
};


(* ::Input::Initialization:: *)
Options[mfsPlot]={Joined->True,
PlotStyle->{{AbsoluteThickness[2],RGBColor[1,0,0],AbsoluteDashing[{6}]},{AbsoluteThickness[2],RGBColor[0,0,1]},{AbsoluteThickness[2],RGBColor[0,0,0]},{AbsoluteThickness[2],RGBColor[0,1,0]},{AbsoluteThickness[2],RGBColor[.5,.5,.5]}}
};


(* ::Input::Initialization:: *)
Options[MADInfo]={NoTable->False,LineExpand->True};


(* ::Input::Initialization:: *)
Options[MADElementSummary]={ShowTable->True};


(* ::Input::Initialization:: *)
Options[RealTimeMADDraw3D]=Flatten[{{Lighting->Automatic,Labels->False,Thick->0.004`,Monitors->True,Lengths->False,Filled->False,WidthScale->1,Bends->True,Offset->0,ShowPicture->True,Fontsize->12,Imagesize->800,DrawLabel->"",CheckClosed->False},Options[Graphics3D]}];


(* ::Input::Initialization:: *)
Options[MADDraw3D]=Flatten[{{Lighting->None,Labels->False,Thick->0.004`,Monitors->True,Lengths->False,Filled->False,WidthScale->1,Bends->True,Offset->0,ShowPicture->True,Fontsize->12,Imagesize->800,DrawLabel->"",CheckClosed->False},Options[Graphics3D]}];


(* ::Input::Initialization:: *)
Fontsize::usage="Option for MADDraw";
Imagesize::usage="Option for MADDraw";
DrawLabel::usage="Option for MADDraw";
ShowPicture::usage="Option for MADDraw";
acceleratorlayout::usage="Option for MADDraw";
Offset::usage="Option for MADDraw";
Bends::usage="Option for MADDraw";
Symms::usage="Option for MADDraw";
WidthScale::usage="Option for MADDraw";
Filled::usage="Option for MADDraw";
Lengths::usage="Option for MADDraw";
Monitors::usage="Option for MADDraw";
Thickness::usage="Option for MADDraw";
Labels::usage="Option for MADDraw";
CheckClosed::usage="Option for MADDraw";



(* ::Input::Initialization:: *)
Options[MADDraw]={Labels->False,Thickness->0.001,Monitors->True,Lengths->False,Filled->False,WidthScale->1.4,Symms->True,Bends->True,Offset->0,ShowPicture->True,Fontsize->12,Imagesize->800,DrawLabel->"",CheckClosed->False,Frame->True};


(* ::Input::Initialization:: *)
Slice::usage="Option for MADWrite";
New::usage="Option for MADWrite";
datafile::usage="Option for MADWrite";


(* ::Input::Initialization:: *)
Symm::usage="Option for MADLineWrite";
Super::usage="Option for MADLineWrite";


(* ::Input::Initialization:: *)
Options[MADLineWrite]={Symm->0,Super->0};


(* ::Input::Initialization:: *)
MADLineName::usage="";


(* ::Input::Initialization:: *)
Data::usage="Option for MADPrint and MADSelect";
Range::usage="Option for MADPrint and MADSelect";
Type::usage="Option for MADPrint and MADSelect";
Full::usage="Option for MADPrint and MADSelect";
Clear::usage="Option for MADPrint and MADSelect";
Flag::usage="Option for MADPrint and MADSelect";


(* ::Input::Initialization:: *)
Error::usage="Option for MADCorrect & MADMicado";
NCorr::usage="Option for MADCorrect & MADMicado";
Iterate::usage="Option for MADCorrect";
C1List::usage="Option for MADCorrect";
C2List::usage="Option for MADCorrect & MADMicado";
M1List::usage="Option for MADCorrect & MADMicado";
M2List::usage="Option for MADCorrect";
DXWeight::usage="Option for MADCorrect & MADMicado";
DYWeight::usage="Option for MADCorrect & MADMicado";
Plane::usage="Option for MADCorrect & MADMicado";


(* ::Input::Initialization:: *)
Method::usage="Option for MADTracking";


(* ::Input::Initialization:: *)
PrintMatrix::usage="Option for MADMatrixTrack";
ReplaceWithZeros::usage="Option for MADMatrixTrack";


(* ::Input::Initialization:: *)
Options[MADTracking]={Method->"Lie4"};


(* ::Input::Initialization:: *)
Options[MADMatrixTrack]={PrintMatrix->False,ReplaceWithZeros->True,XOffset->0};


(* ::Input::Initialization:: *)
MADxfinal::usage="";


(* ::Input::Initialization:: *)
MADpxfinal::usage="";


(* ::Input::Initialization:: *)
MADyfinal::usage="";


(* ::Input::Initialization:: *)
MADpyfinal::usage="";


(* ::Input::Initialization:: *)
Qx::usage="";


(* ::Input::Initialization:: *)
Qy::usage="";


(* ::Input::Initialization:: *)
dQxdn::usage="";


(* ::Input::Initialization:: *)
dQydn::usage="";


(* ::Input::Initialization:: *)
MADTrackMatrix::usage="";


(* ::Input::Initialization:: *)
MADTrackData::usage="";


(* ::Input::Initialization:: *)
TrackData::usage="";


(* ::Input::Initialization:: *)
MADxytuneData::usage="";


(* ::Input::Initialization:: *)
Tunes::usage="Option for MADTwiss";
Chrom::usage="Option for MADTwiss";
Couple::usage="Option for MADTwiss";
Save::usage="Option for MADTwiss";
Tape::usage="Option for MADTwiss";
Deltap::usage="Option for MADTwiss";


(* ::Input::Initialization:: *)
Options[MADTwiss]={Tunes->False,Chrom->False,Couple->False,Save->False,Tape->False,Deltap->0};


(* ::Input::Initialization:: *)
Lines::usage="Option for MADBeam";
Particle::usage="Option for MADBeam";
Energy::usage="Option for MADBeam";
Charge::usage="Option for MADBeam";
Pc::usage="Option for MADBeam";
Mass::usage="Option for MADBeam";
Gamma::usage="Option for MADBeam";
Ex::usage="Option for MADBeam";
Ey::usage="Option for MADBeam";
Et::usage="Option for MADBeam";
Exn::usage="Option for MADBeam";
Eyn::usage="Option for MADBeam";
Sigt::usage="Option for MADBeam";
Sige::usage="Option for MADBeam";
KBunch::usage="Option for MADBeam";
NPart::usage="Option for MADBeam";
BCurrent::usage="Option for MADBeam";
Bunched::usage="Option for MADBeam";
Radiate::usage="Option for MADBeam";


(* ::Input::Initialization:: *)
NInt::usage="Option for MADBMPM";
DelQ::usage="Option for MADBMPM";
TauQ::usage="Option for MADBMPM";
MADBucket::usage="Option for MADBMPM";
Kappa::usage="Option for MADBMPM";
I4I2::usage="Option for MADBMPM";
EXData::usage="Option for MADBMPM";
FX::usage="Option for MADBMPM";
FY::usage="Option for MADBMPM";
KHM::usage="Option for MADBMPM";
SynRad::usage="Option for MADBMPM";
Clorb::usage="Option for MADBMPM";
Tousch::usage="Option for MADBMPM";
Single::usage="Option for MADBMPM";
EVary::usage="Option for MADBMPM";
MidArc::usage="Option for MADBMPM";
Interact::usage="Option for MADBMPM";
Range::usage="Option for MADBMPM";


(* ::Input::Initialization:: *)
Options[MADBeam]={Particle->"Electron",Energy->2, Charge->1,Pc->0,Mass->1,Gamma->0,Ex->0,Ey->0,Et->0,Exn->0,Eyn->0,Sigt->0,Sige->0,KBunch->0,NPart->0,BCurrent->0,Bunched->False,Radiate->False};


(* ::Input::Initialization:: *)
Options[MADBMPM]={NInt->0,DelQ->0,TauQ->0,MADBucket->0,Kappa->0,I4I2->0,EXData->0,FX->0,FY->0,KHM->0,SynRad->True,Clorb->False,Tousch->False,Single->True,EVary->False,MidArc->False,Interact->"",Range->""};


(* ::Input::Initialization:: *)
Depth::usage="Option for MADDelete";
DeleteAll::usage="Option for MADDelete";
Type::usage="Option for MADDelete";


(* ::Input::Initialization:: *)
Options[MADDelete]={DeleteAll->False,Depth->1,Type->Track};


(* ::Input::Initialization:: *)
Pos::usage="Option for MADElementFind";
Equals::usage="Option for MADElementFind";
Greater::usage="Option for MADElementFind";
Less::usage="Option for MADElementFind";
Columns::usage="Option for MADElementFind";
SortBy::usage="Option for MADElementFind";
Elements::usage="Option for MADElementFind";
Apertures::usage="Option for MADElementFind";


(* ::Input::Initialization:: *)
XApp::usage="Option for MADGetApertures";
YApp::usage="Option for MADGetApertures";


(* ::Input::Initialization:: *)
Options[MADSplitElements]={NoFlat->False};


(* ::Input::Initialization:: *)
I1::usage="";
I2::usage="";
I3::usage="";
I4::usage="";
I5::usage="";
I6X::usage="";
I6Y::usage="";
I8::usage="";


(* ::Input::Initialization:: *)
LinQx::usage="";


(* ::Input::Initialization:: *)
LinQy::usage="";


(* ::Input::Initialization:: *)
MADInfoData::usage="";


(* ::Input::Initialization:: *)
MADFileName::usage="";


(* ::Input::Initialization:: *)
MADMultipleData::usage="";


(* ::Input::Initialization:: *)
MADOrbitDatay::usage="";


(* ::Input::Initialization:: *)
MADOrbitDatax::usage="";


(* ::Input::Initialization:: *)
MADmonlist::usage="";


(* ::Input::Initialization:: *)
DiffTunes::usage="";


(* ::Input::Initialization:: *)
PlotMatrix::usage="";


(* ::Input::Initialization:: *)
MADElementCoordinates::usage="";
MADMagnetCoordinates::usage="";
MADPositions::usage="";
MADCalculateRayPositions::usage="";
MADCalculateRayPositions3D::usage="";


(* ::Input::Initialization:: *)
MADEnergy::usage="";


(* ::Input::Initialization:: *)
SetAttributes[MADErrors,HoldFirst]


(* ::Input::Initialization:: *)
SetAttributes[GetMADErrors,HoldFirst]


(* ::Input::Initialization:: *)
HOMmax=9;


(* ::Input::Initialization:: *)
MADErrors;


(* ::Input::Initialization:: *)
If[!ValueQ[MADElements[]],MADElements[]={}];


(* ::Input::Initialization:: *)
SetMADErrors;


(* ::Input::Initialization:: *)
GetMADErrors;


(* ::Input::Initialization:: *)
SetAttributes[SetMADOptions,HoldAll];


(* ::Input::Initialization:: *)
SetAttributes[MADOptions,HoldAll];


(* ::Input::Initialization:: *)
MADOptions;


(* ::Input::Initialization:: *)
NumberRight::usage="";


(* ::Input::Initialization:: *)
rfc::usage="rfc[name, Length, label, options]\n\nrfc creates an RF Cavity Element. \n\nSee MAD manual for options - passed as rules.";


(* ::Input::Initialization:: *)
lcav::usage="lcav[name, Length, label, options]\nlcav creates a Linear Accelerator Cavity Element.\nOptions:\n\tVoltageGain\n\tCavityPhase\n\tFrequency\n\tLossFactor\n\tVoltageError\n\tLagError\n\tNumberBins\n\tMaxBinLength\n\tLWakefieldFile\n\tTWakefieldFile\n\tE0 (Not Used in MAD)\n\tInitialEnergy (Not Used in MAD)";


(* ::Input::Initialization:: *)
multipole::usage="multipole[name, Label, options]\n\nmultipole creates a Multipole Element. \n\nSee MAD manual for options - passed as rules.";


(* ::Input::Initialization:: *)
gwiggler::usage="gwiggler[Name, L, Focusing, Type] 
\nCreates a Genesis Wiggler Element.";


(* ::Input::Initialization:: *)
charge::usage="charge[Name, Total Charge, Type] 
\nCreates a Charge Element.";


(* ::Input::Initialization:: *)
watch::usage="watch[Name, Filename, Type] 
\nCreates a Watch Element.";


(* ::Input::Initialization:: *)
quad::usage="quad[Name, Length [Number], Focus [Number], Type] 
\nCreates a Quadrupole Element.";


(* ::Input::Initialization:: *)
freetext::usage="freetext[Name, Type, Text->\"<text>\"] 
\nCreates a FreeText Element.";


(* ::Input::Initialization:: *)
solenoid::usage="solenoid[Name, Length [Number], KS [Number], Type] 
\nCreates a Solenoid Element.";


(* ::Input::Initialization:: *)
yrot::usage="yrot[Name, Angle [Number], Type] 
\nCreates a YROT Element.";


(* ::Input::Initialization:: *)
srot::usage="srot[Name, Angle [Number], Type] 
\nCreates an SROT Element.";


(* ::Input::Initialization:: *)
drift::usage="drift[Name , Length [Number], Type] 
\nCreates a Drift Element.";


(* ::Input::Initialization:: *)
csrdrift::usage="csrdrift[Name , Length [Number], Type] 
\nCreates a CSRDrift Element.";


(* ::Input::Initialization:: *)
ecoll::usage="ecoll[Name, Length [Number], XSize, YSize, Type] 
\nCreates an Elliptic collimator.";


(* ::Input::Initialization:: *)
rcoll::usage="rcoll[Name, Length [Number], XSize, YSize, Type] 
\nCreates a Rectangular collimator.";


(* ::Input::Initialization:: *)
marker::usage="marker[Name, Type] 
\nCreates a Marker Element.";


(* ::Input::Initialization:: *)
imonitor::usage="imonitor[Name, Type] 
\nCreates an imonitor Element.";


(* ::Input::Initialization:: *)
profile::usage="profile[Name, Type] 
\nCreates a profile Element.";


(* ::Input::Initialization:: *)
maxamp::usage="maxamp[Name, xmax, ymax, Type] 
\nCreates a profile Element.";


(* ::Input::Initialization:: *)
monitor::usage="monitor[Name, Type] 
\nCreates a monitor Element.";


(* ::Input::Initialization:: *)
wire::usage="wire[Name, Type] 
\nCreates a wire Element.";


(* ::Input::Initialization:: *)
instrument::usage="instrument[Name, Type] 
\nCreates a instrument Element.";


(* ::Input::Initialization:: *)
cwiggler::usage="cwiggler[Name, Length [Number], B Max [Number], Bx File, By File, Type, Options] 
\nCreates a CWiggler Element.
Options include:
Periods, StepsPerPeriod, BxMax, ByMax, Sinusoidal, Vertical, Helical, DX, DY, DZ, Tilt.";


(* ::Input::Initialization:: *)
sbend::usage="sbend[Name, Length [Number], Focus [Number], Angle, Type] 
\nCreates a Sector Bending Magnet Element.";


(* ::Input::Initialization:: *)
csbend::usage="csbend[Name, Length [Number], Focus [Number], Angle, Type] 
\nCreates a CSector Bending Magnet Element.";


(* ::Input::Initialization:: *)
csrcsbend::usage="csrcsbend[Name, Length [Number], Focus [Number], Angle, Type] 
\nCreates a CSRCSector Bending Magnet Element.";


(* ::Input::Initialization:: *)
rbend::usage="rbend[Name, Length [Number], Focus [Number], Angle, Type] 
\nCreates a Rectangular Bending Magnet Element.";


(* ::Input::Initialization:: *)
sext::usage="sext[Name, Length [Number], Focus [Number], Type] 
\nCreates a Sextupole Element.";


(* ::Input::Initialization:: *)
oct::usage="oct[Name, Length [Number], Focus [Number], Type] 
\nCreates an Octupole Element.";


(* ::Input::Initialization:: *)
vkick::usage="vkick[Name, Length [Number], Vertical Kick Angle [Number], Type] 
\nCreates a Vertical Corrector with Vertical Kick Angle as given.";


(* ::Input::Initialization:: *)
hkick::usage="hkick[Name, Length [Number], Horizontal Kick Angle [Number], Type] 
\nCreates a Horizontal Corrector with Horizontal Kick Angle as given.";


(* ::Input::Initialization:: *)
kick::usage="vkick[Name, Length [Number], Vertical Kick Angle [Number], Horizontal Kick Angle [Number], Type] 
\nCreates a Corrector with Vertical Kick Angle and Horizontal Kick Angle as given.";


(* ::Input::Initialization:: *)
vbpm::usage="vbpm[Name, Length [Number] (Default:0), Type] 
\nCreates a Vertical Beam Position Monitor.";


(* ::Input::Initialization:: *)
hbpm::usage="hbpm[Name, Length [Number] (Default:0), Type] 
\nCreates a Horizontal Beam Position Monitor.";


(* ::Input::Initialization:: *)
bpm::usage="bpm[Name, Length [Number] (Default:0), Type] 
\nCreates a Vertical and Horizontal Beam Position Monitor.";


(* ::Input::Initialization:: *)
line::usage="line[Name, List of Elements] 
\nCreates a line of elements to be added to the MAD file. Use ExpandLattice[linename] to see elements.";


(* ::Input::Initialization:: *)
LinesLattice::usage="LinesLattice[Name] 
\nExpands line elements to show all elements contained with nested lines.";


(* ::Input::Initialization:: *)
ExpandLattice::usage="line[Name] 
\nExpands line elements to show all elements contained with nested lines.";


(* ::Input::Initialization:: *)
reverse::usage="reverse[line]
\nreverse generates a ReversedLine";


(* ::Input::Initialization:: *)
matrix::usage="matrix[Name, Type, MatrixTerms->{RM[i,j]->Rij, TM[i,j,k]->Tijk}]
\nmatrix Generates a Matrix Element.";


(* ::Input::Initialization:: *)
error::usage="error[Name, Type, dx\[Rule]Number, dy\[Rule]Number}]
\nerror Generates an Error Element.";


(* ::Input::Initialization:: *)
ReverseError::usage="error[Name, Type, dx->Number, dy->Number}]
\nerror Generates an Error Element.";


(* ::Input::Initialization:: *)
MADFlatten::usage="Exapnds a lattice then flattens and partitions it into 7's";


(* ::Input::Initialization:: *)
MADFlat::usage="Flatten and Partitions lists into 7's";


(* ::Input::Initialization:: *)
ExpandLattice::usage="Expands line definitions.";


(* ::Input::Initialization:: *)
LineLattice::usage="Shows all line definitions within a lattice definition.";


(* ::Input::Initialization:: *)
MADGetLengths::usage="MADGetLengths[Lattice, Slices: 1,XAp->True/False, YAp->True/False]";


(* ::Input::Initialization:: *)
MADGetApertures::usage="MADGetApertures[Lattice, Slices: 1, XAp->True/False, YAp->True/False]";


(* ::Input::Initialization:: *)
MADGetCollimators::usage="MADGetCollimators[Lattice, Slices: 1, XAp->True/False, YAp->True/False]";


(* ::Input::Initialization:: *)
MADGetAperturesJAV::usage="MADGetApertures set up with same rules as MADSplitElements for consistency";


(* ::Input::Initialization:: *)
MADSplitElements::usage="Internal command to split elements into slices";


(* ::Input::Initialization:: *)
MADSplitElementsAll::usage="Internal command to split elements into slices";


(* ::Input::Initialization:: *)
MADSplitElementsAllSpecific::usage="Internal command to split elements into slices";


(* ::Input::Initialization:: *)
MADSplitElementsSextQuad::usage="Internal command to split elements into slices";


(* ::Input::Initialization:: *)
MADSplitDipoles::usage="Internal command to split Dipoles into slices";


(* ::Input::Initialization:: *)
MADSplitDipolesLength::usage="Internal command to split Dipoles into slices";


(* ::Input::Initialization:: *)
MADSplitElementsLength::usage="Internal command to split Dipoles into slices";


(* ::Input::Initialization:: *)
MADElementFind::usage="MADElementFind[Data, Options]\nMADElementFind is used to interogate lists of data.\nMADElementFind takes 5 options\n
Columns \[Rule] Number\t\tis used to specify the no. of columns per line\n
Equals \[Rule] {Column, Value} or {{Column, Value},{Column, Value}}\tis used to look for data in a column equal to Value\n
Greater and Less\t\tare used similar to equals\n
SortBy \[Rule] Column\t\t is used to sort the relevant data by a given column";


(* ::Input::Initialization:: *)
MADClear::usage="Use MADClear to clear variable names for re-assignment. This should be used to clear options associated with element definitions";


(* ::Input::Initialization:: *)
MADInfo::usage="MADInfo[Line] \nProvides Information on Elements and Element Lines.";


(* ::Input::Initialization:: *)
MADElementSummary::usage="MADElementSummary[Line] \nProvides summary information on magnetic elements.";


(* ::Input::Initialization:: *)
MADElementList::usage="MADElementList[Line] \nReturns a list of element informations that includes all extra information. The list has elements 30 units long.";


(* ::Input::Initialization:: *)
MADSumLength::usage="MADSumLength[line]\nAdds a line printing the combined length of all elements in Line";


(* ::Input::Initialization:: *)
MADGetElementLengths::usage="MADGetElementLengths[lattice]\nReturns a list of the lengths of all elements in <lattice>";


(* ::Input::Initialization:: *)
MADBETA0::usage="Creates a MAD BETA0 Command\nMADBETA0[file_,name_String,{twissrules__Rule}]\nMADBETA0[file_,name_String,alfx_:Null,betx_:Null,alfy_:Null,bety_:Null,dx_:Null,dpx_:Null,x_:Null,px_:Null,y_:Null,py_:Null]";


(* ::Input::Initialization:: *)
MADOptics::usage="Creates a MAD Optics Command";


(* ::Input::Initialization:: *)
MADPrint::usage="Creates a MAD Print Command";


(* ::Input::Initialization:: *)
MADSelect::usage="Creates a MAD Select Command";


(* ::Input::Initialization:: *)
MADPlot::usage="Creates a MAD Plot Command";


(* ::Input::Initialization:: *)
MADGetDisp::usage="Creates a MAD GetDisp Command";
MADPutDisp::usage="Creates a MAD PutDisp Command";
MADGetKick::usage="Creates a MAD GetKick Command";
MADPutKick::usage="Creates a MAD PutKick Command";
MADGetOrbit::usage="Creates a MAD GetOrbit Command";
MADPutOrbit::usage="Creates a MAD PutOrbit Command";
MADMicado::usage="Creates a MAD Micado Command";
MADCorrect::usage="Creates a MAD Correct Command";


(* ::Input::Initialization:: *)
MADBMPM::usage="MADBMPM[Options]\nMADBMPM is used to write a BMPM command to a MAD text file.\nMADBMPM takes the same options as in the MAD manual, with the exception of\nFilename \[Rule] filename\t\t which gives the filename to write to.\nMADBMPM defaults to writing to the last MAD file written using MADWrite";


(* ::Input::Initialization:: *)
MADDropLines::usage="MADDropLines[File, Options]\n\nMADDropLines is used to delete lines from File.\nIt takes options\n
Lines->Number\t\tLine numbers to drop. Will accept a list of lines. Use Range[] to Drop a set of lines.\n
Out->Filename\t\tFile to write to. Defaults to input filename\n\n
With no input, MADDroplines prints the contents of a file with line numbers.";


(* ::Input::Initialization:: *)
MADBeam::usage="MADBeam[Options]\nMADBeam take the following options\n\nParticle\[Rule]\"Electron/Positron/Proton/Anti-Proton\"\nCharge\[Rule]Particle Charge [Number]\nPc\[Rule]Particle Momentum [Number]\nMass\[Rule]Particle Mass [Number]\nEnergy\[Rule]Beam Energy [Number]\nGamma\[Rule]Relativistic Gamma [Number]\nEx\[Rule]Horizontal Emittance [Number]\nEy\[Rule]Vertical Emittance [Number]\nEt\[Rule]Longtidunal Emittance [Number]\nExn\[Rule]Normalised Horizontal Emittance [Number]\nEyn\[Rule]Normalised Vertical Emittance [Number]\nSigt\[Rule]Bunch Length [Number]\nSige\[Rule]Relative Energy Spread [Number]\nKBunch\[Rule]Particles per Bunch [Number]\nNPart\[Rule]Number of Particles [Number]\nBCurrent\[Rule]Total Beam Current [Number]\nBunched\[Rule]Bunched Train [True/False]\nRadiate\[Rule]Synchrotron Radiation? [True/False]";


(* ::Input::Initialization:: *)
MADStringWrite::usage="MADStringWrite[filename, string]\nMADStringWrite is used to write String Data to the file \"filename\"";


(* ::Input::Initialization:: *)
MADXStringWrite::usage="MADXStringWrite[filename, string]\nMADXStringWrite is used to write String Data to the file \"filename\"";


(* ::Input::Initialization:: *)
MADWrite::usage="MADWrite[Filename, Element List]\nMADWrite opens and then writes the definitions of all elements in List.\nIt also adds a MAD \"Line=\" command, with the line being given the name of the variable Line";


(* ::Input::Initialization:: *)
MADXWrite::usage="MADXWrite[Filename, Element List,BeamEnergy->1, Beam Particle->Electron]\nMADXWrite opens and then writes the definitions of all elements in List.\nIt also adds a MAD \"Line=\" command, with the line being given the name of the variable Line";


(* ::Input::Initialization:: *)
MADLineWrite::usage="MADLineWrite[List, Linename]\nMADLineWrite writes the MAD \"Line=\" command to the currently open filename. It is called from MADWrite";


(* ::Input::Initialization:: *)
MADLines::usage="MADLines[FileName, Line, Extra]\nMADLines writes the MAD \"Line=\" command to filename.";


(* ::Input::Initialization:: *)
MADWhatisit::usage="MADWhatisit[List]\nMADWhatisit runs through an element definition and depending on the element type, creates and writes an element definition. It is normally called from MADWrite.\nMADWhatisit calls various element Write functions, depending on the element.";


(* ::Input::Initialization:: *)
MADFileWrite::usage="MADFileWrite[Data]\nMADFileWrite is used to write strings to the currently open file.";


(* ::Input::Initialization:: *)
RunMAD::usage="RunMAD[Filename]\nRunMAD is used to run the MAD program on a selected input file";


(* ::Input::Initialization:: *)
RunMADX::usage="RunMADX[Filename]\nRunMADX is used to run the MAD program on a selected input file";


(* ::Input::Initialization:: *)
MADGetMomentumCompaction::usage="";


(* ::Input::Initialization:: *)
MADTrackingJAV::usage="MADTrackingMore without the RUN and ARCHIVE commands, for when you want to do more complicated RUNs";


(* ::Input::Initialization:: *)
MADTrackingJKJ::usage="MADTrackingMore without the RUN and ARCHIVE commands, for when you want to do more complicated RUNs";


(* ::Input::Initialization:: *)
MADTrackingMore::usage="MADTracking with more parameters: x,px,y,py,t,deltap";


(* ::Input::Initialization:: *)
MADGetChromaticity::usage="";


(* ::Input::Initialization:: *)
MADGetSRI::usage="MADGetSRI[filename]\nMADGetSRI is used to read in the SRI from a MAD Print Command";


(* ::Input::Initialization:: *)
MADCreateSRIData::usage="MADCreateSRIData[filename]\nMADCreateSRIData is used to write a SRI line to the MAD file";


(* ::Input::Initialization:: *)
MADGetTunes::usage="MADGetTunes[filename]\nUse MADGetTunes to extract Tune Data from a print File. Filename defaults to MADFileName.print.txt";


(* ::Input::Initialization:: *)
MADDeleteTrack::usage="MadDeleteTrack[Filename (Default: MADFileName)]\nMADDeleteTrack is used to remove any previous MAD tracking arguments found in MAD data files, it then writes the data to filename.";


(* ::Input::Initialization:: *)
MADcreateData::usage="MADcreateData[xmin, xmax, xstep, ymin, ymax, ystep]\nMADcreateData is used to create data lists to be used in the MADTracking command. It create regularly spaced data arrays.";


(* ::Input::Initialization:: *)
MADMatrixTrack::usage="matrixTrack[]\nmatrixTrack is used to format data read in by John Jowetts Mfs package. It should be applied on data read in from a MAD track data file.";


(* ::Input::Initialization:: *)
MADTracking::usage="MADTracking[Data array, No. of Turns]\nMADTracking is used to write MAD tracking lines to the last opend MAD data file, given by MADFileName. The data array should be given as all the {x,y} values for a given x. Increasing in x. i.e.
\n
\n           Y2 |  2  |  4  |  6
\n            -------------------
\n           Y1 |  1  |  3  |  5
\n            -------------------
\n              |  X1 |  X2 | X3";


(* ::Input::Initialization:: *)
MADTwiss::usage="MADTwiss[Options]\nMADTwiss is used to create a twiss command. It accepts the following options\n\nTunes\tChrom\tCouple\nSave\tTape\tTwiss";


(* ::Input::Initialization:: *)
MADcreateData::usage="MADcreateData[xmin,xmax,xstep,ymin,ymax,ystep]\nMADcreateData creates data for MADTrack command";


(* ::Input::Initialization:: *)
ResonanceLegend::usage="ResonanceLegend[Min. Order , Max. Order]\nResonanceLegend creates a legend for ResonancePlot";


(* ::Input::Initialization:: *)
ResEqn::usage="ResEqn[M, N]\nResEqn creates the resonance equation for a given M and N";


(* ::Input::Initialization:: *)
ResNumAtOrder::usage="ResNumAtOrder[Range]\nResNumAtOrder is used to create ranges of points for Resonance Plots";


(* ::Input::Initialization:: *)
RangePoints::usage="RangePoints[Range]\nRangePoints is used to find the corners of the resonant range";


(* ::Input::Initialization:: *)
PValues::usage="PValues[Resonance Numbers, Range, Periodicity]\nPValues Creates a list of P-Values that solve the Resonance Equation";


(* ::Input::Initialization:: *)
ResonanceEquationsAtOrder::usage="ResonanceEquationsAtOrder[Range, Order, Periodicity]\nResonanceEquationsAtOrder Creates a list of Resonance Equations that apply within the Range";


(* ::Input::Initialization:: *)
ResonanceEquations::usage="ResonanceEquations[Range, OrderStart, OrderEnd, Periodicity\nResonanceEquations solves the Resonance Equations for a selection of resonance orders";


(* ::Input::Initialization:: *)
ResonancePlot::usage="ResonancePlot[Range, OrderStart, OrderEnd, Periodicity]\nResonancePlot plots the relevant Resonance Equations in Range, and with Order between OrderStart and OrderEnd";


(* ::Input::Initialization:: *)
HanningElement::usage="INTERNAL";


(* ::Input::Initialization:: *)
Hanning::usage="INTERNAL";


(* ::Input::Initialization:: *)
BartInt::usage="INTERNAL";
PeakPosition::usage="INTERNAL";
BaseTuneEstimate::usage="INTERNAL";
BartIntCorrNum1::usage="INTERNAL";
BartIntCorrNum2::usage="INTERNAL";
TuneCorrection::usage="INTERNAL";
TuneEstimate::usage="INTERNAL";
TuneEstimateDescending::usage="INTERNAL";
AllTuneCorrection::usage="INTERNAL";
AllBaseTuneEstimate::usage="INTERNAL";


(* ::Input::Initialization:: *)
RealTimeMADDraw3D::usage="MADDraw3D[Lattice, Options]\n\nMADDraw is a function used to draw 3-Dimensional lattice elements in the RealTime3D environment. It takes account of the bends from bending magnets, but not from kickers, and only in the horizontal plane.\n MADDraw takes the following options with their default values\n\n

WidthScale->1.4\t\tThe width to height ratio\n
Bends->True\t\tTake account of bending magnet bends
";


(* ::Input::Initialization:: *)
MADDraw3D::usage="MADDraw3D[Lattice, Options]\n\nMADDraw3D is a function used to draw 3-Dimensional lattice elements. It takes account of the bends from bending magnets, but not from kickers, and only in the horizontal plane.\n MADDraw takes the following options with their default values\n\n

WidthScale->1.4\t\tThe width to height ratio\n
Bends->True\t\tTake account of bending magnet bends
";


(* ::Input::Initialization:: *)
MADDraw::usage="MADDraw[Lattice, Options]\n\nMADDraw is a function used to draw lattice elements. It takes account of the bends from bending magnets.\n MADDraw takes the following options with their default values\n\n

Labels->True\t\tInclude Text Labels\n
Thick->0.004\t\tThe relative thickness of the lines\n
Monitors->True\t\tInclude BPM positions\n
Lengths->False\t\tInclude element length labels\n
Filled->False\t\tFill in elements\n
WidthScale->1.4\t\tThe width to height ratio\n
Symms->True\t\tInclude Symmetry lines\n
Bends->True\t\tTake account of bending magnet bends
";


(* ::Input::Initialization:: *)
MADDrawSurvey::usage="MADDrawSurvey[Filename, Options]\n\nMADDrawSurvey is a function used to draw lattice elements based on data taken from a MAD SURVEY command. \n MADDrawSurvey takes the following options, with their default values shown,\n\n

Thick->0.004\t\tThe relative thickness of the lines\n
Filled->False\t\tFill in elements\n
WidthScale->1.4\t\tThe width to height ratio\n
Bends->True\t\tTake account of bending magnet bends
";


(* ::Input::Initialization:: *)
MADPositions::usage="MADPositions[Lattice, Options]\n\nMADPositions gives a list in {X, Y} pairs of the position of the end of each element.\n\n";


(* ::Input::Initialization:: *)
MADFootPrint::usage="MADPositions[Lattice]\n\nMADFootPrint gives the size of the lattice layout, in metres, in both planes. No account is taken of the physical dimensions of elements.\n\n";


(* ::Input::Initialization:: *)
FancyElements::usage="Options for MADDraw.";


(* ::Input::Initialization:: *)
MADGetZAPData::usage="MADGetZAPData[filename]\nMADGetZAPData is used to add an optics line to a MAD file to produce suitable ZAP optics data";


(* ::Input::Initialization:: *)
MADOutputZAPData::usage="MADOutputZAPData[Lattice, InputFile :\"zap.optics.txt\", OuputFile :\"zaplat.dat\"]\nMADOutputZAPData is used to create a ZAP lattice file using Aperture definitions from the elements in Lattice.";


(* ::Input::Initialization:: *)
MADZAP::usage="MADZAP[Lattice, Slices, MADFileName :\"madzap\", InputFile :\"zap.optics.txt\", OuputFile :\"zaplat.dat\"]\nMADZAP is used to create a ZAP lattice file from Lattice.";


(* ::Input::Initialization:: *)
FindTurningPoints::usage="FindPeaks[X data, Y data]\nFindTroughs is used to determine minimums in the data and gives output as {x,y} data";


(* ::Input::Initialization:: *)
FindPeaks::usage="FindPeaks[X data, Y data]\nFindTroughs is used to determine minimums in the data and gives output as {x,y} data";


(* ::Input::Initialization:: *)
FindTroughs::usage="FindTroughs[X data, Y data]\nFindTroughs is used to determine minimums in the data and gives output as {x,y} data";


(* ::Input::Initialization:: *)
MADInput::Usage="nb to do stuff";


(* ::Input::Initialization:: *)
MADClearExtra::usage="Use MADClear to clear variable names for re-assignment. This should be used to clear options associated with element definitions";


(* ::Input::Initialization:: *)
genExtra::usage="Generates extra Element information. INTERNAL";


(* ::Input::Initialization:: *)
MADLength::usage="MADLength[line]\n\nMADLength prints the total length of a line of elements";


(* ::Input::Initialization:: *)
MADxytunes::usage="MADxytunes[Tracking Data, Qx values, Qy values]\nMADxytunes is used to create a list of {x,y,Qx,Qy} data. It will accept matrix data, and will output the appended data in the same matrix format.";


(* ::Input::Initialization:: *)
MADDelete::usage="MADDelete[file, options]\nMADDelete deletes lines from files. It can delete Tracking, Usemonitor, Twiss or Beam lines from a file.\n Option \"Type\" is a rule which gives the type of lines to delete, Track, Monitor, Twiss or Beam\ni.e. MADDelete[file, Type\[Rule]Beam]\tDeletes all beam lines in \"file\"";


(* ::Input::Initialization:: *)
MADMonitors::usage="MADMonitors[data]\nMADMonitors is used to create a list of all monitors in a Line.";


(* ::Input::Initialization:: *)
MADLengthAdd::usage="MADLengthAdd[Line]\nAdds a column to Line printing the current Length of all elements upto that point";


(* ::Input::Initialization:: *)
MADDeleteMultiple::usage="MADDeleteMultiple[List]\nMADDeleteMultiple removes all repeated elements from an Element list. It returns the variable \[Epsilon], and is called from MADWrite";


(* ::Input::Initialization:: *)
MADmakeMonitorList::usage="MADmakeMonitorList[Line]\nMADmakeMonitorList is used to create a list of all Monitor elements in a Line.";


(* ::Input::Initialization:: *)
MADUseMonitors::usage="MADUseMonitors[Line,{Monitors}]\nMADUseMonitors is a command to produce a \"usemonitor,on,\" MAD command.
\n{Monitors} should be a list of monitor names, as Strings.";


(* ::Input::Initialization:: *)
MADOrbitPlotFile::usage="MADOrbitPlotFile[Filename, Line]\nMADOrbitPlotFile is used to Plot MAD Orbit files. The data is automatically plotted against S.\n\nThe Line variable should be used to ensure that the monitor positions are plotted for the correct Element Line!";


(* ::Input::Initialization:: *)
MADOrbitPlotLine::usage="MADOrbitPlotLine[Line]\nMADOrbitPlotLine is used to plot MAD Orbit data, and is called from MADOrbitPlotFile";


(* ::Input::Initialization:: *)
MADPlot::usage="MADPlot[Filename]\nMADPlot imports and plots MAD \"PLOT\" command output .ps files.";


(* ::Input::Initialization:: *)
mfsPlot::usage="mfsPlot[Variables,Options]\nmfsPlot is used to plot variables defined from mfs Datafiles. mfsPlot can take any number of variables to plot, but it accepts variables only in list format.\nTherefore all variable input should be either as a list variable (a={X,Y}; mfsPlot[a]), or as explicit Lists (mfsPlot[{X}]).\n\nmfsPlot takes as options - \n\tSurvey\[Rule]True/False. Where if True, plot variables against Z.\n\tLegend\[Rule]{Legend-Names}   Where Legend-Names are the names of the variables being plotted\n\tPlotstyle\[Rule]{Colour Definitions etc.} Where Plotstyle defines the style of the points to be plotted. (See PlotStyle Help)\n\tSymbolShape\[Rule]{Shape Definition}  Where Shape Definition is the shapes of the points to be ploted (See SymbolShape Help)";


(* ::Input::Initialization:: *)
DropLines::usage="DropLines[FileName, Lines\[Rule](Number), Output\[Rule]FileNames]\nDropLines is used to drop specific lines from a file.\nThe option \"Output\" is used to change the output file. If no output file is given, the original file is overwritten.\nIf no Lines are given, DropLines prints a table of the File showing Line Numbers";


(* ::Input::Initialization:: *)
MADWriteErrors::usage="";


(* ::Input::Initialization:: *)
Begin["`Private`"];


(* ::Input::Initialization:: *)
UnsortedUnion[x_]:=Module[{f},f[Rule[y_,z_]]:=(f[Rule[y,_]]=Sequence[];y->z);f/@x]


(* ::Input::Initialization:: *)
Options[MADErrors]={Global`MADdx->0,Global`MADdy->0,Global`MADds->0,Global`MADdtheta->0,Global`MADdphi->0,Global`MADdpsi->0,Global`MADmrex->0,Global`MADmrey->0,Global`MADradius->0,Global`MADdbl->0,Sequence@@Table[Global`MADdkl[i]->0,{i,0,9}],Global`MADdblr->0,Global`MADbrot->0,Sequence@@Table[Global`MADrot[i]->0,{i,0,9}],Global`MADdbln->0,Sequence@@Table[Global`MADdkln[i]->0,{i,0,9}],Global`MADdbls->0,Sequence@@Table[Global`MADdkls[i]->0,{i,0,9}],Global`MADEalign->{Global`MADdx,Global`MADdy,Global`MADds,Global`MADdtheta,Global`MADdphi,Global`MADdpsi,Global`MADmrex,Global`MADmrey},Global`MADEfield->{Global`MADradius,Global`MADdbl,Sequence@@Table[Global`MADdkl[i],{i,0,9}],Global`MADdblr,Global`MADbrot,Sequence@@Table[Global`MADrot[i],{i,0,9}],Global`MADdbln,Sequence@@Table[Global`MADdkln[i],{i,0,9}],Global`MADdbls,Sequence@@Table[Global`MADdkls[i],{i,0,9}]}}


(* ::Input::Initialization:: *)
Options[MADErrors]={"dx"->0,"dy"->0,"ds"->0,"dtheta"->0,"dphi"->0,"dpsi"->0,"mrex"->0,"mrey"->0,"radius"->0,"dbl"->0,"etilt"->0,Sequence@@Table[Evaluate["dkl"<>ToString[i]]->0,{i,0,9}],"dblr"->0,"brot"->0,Sequence@@Table[Evaluate["rot"<>ToString[i]]->0,{i,0,9}],"dbln"->0,Sequence@@Table["dkln"<>ToString[i]->0,{i,0,9}],"dbls"->0,Sequence@@Table["dkls"<>ToString[i]->0,{i,0,9}],"HKICK"->0,"VKICK"->0,Ealign->{"dx","dy","ds","dtheta","dphi","dpsi","mrex","mrey"},Efield->{"radius","dbl",Sequence@@Table["dkl"<>ToString[i],{i,0,9}],"dblr","brot",Sequence@@Table["rot"<>ToString[i],{i,0,9}],"dbln",Sequence@@Table["dkln"<>ToString[i],{i,0,9}],"dbls",Sequence@@Table["dkls"<>ToString[i],{i,0,9}]}}


(* ::Input::Initialization:: *)
Options[MADOptions]={Global`XAp->0,Global`YAp->0,Global`PL->0,Global`PN->4,Global`Name->"",Global`Porder->0,(Global`PB[#]->0&/@Join[Reverse[-#],#]&[Range[9]]),Global`Pthick->False,Global`Pirho->0}


(* ::Input::Initialization:: *)
Protect[Global`PL,Global`PN,Global`Pthick,Global`PB]


(* ::Input::Initialization:: *)
Options[MADElements]={Global`Quadrupoles->{},Global`Sextupoles->{},Global`Dipoles->{}}


(* ::Input::Initialization:: *)
SetMADOptions[name_,var___Rule]:=MADOptions[Evaluate[ToString[name]]]=MADOptions[name]={Sequence@@FilterRules[Flatten[{UnsortedUnion[Join[{var},If[ListQ[MADOptions[name]],MADOptions[name],{}]]]}],Options[MADOptions]]}


(* ::Input::Initialization:: *)
MADOptions[name_,var_]:=var/.MADOptions[name]/.Options[MADOptions]


(* ::Input::Initialization:: *)
MADOptions[name_,Global`PB]:=(Global`PB[#]&/@Join[Reverse[-#],#]&[Range[9]])/.MADOptions[name]/.Options[MADOptions]


(* ::Input::Initialization:: *)
MADOptions[]:=Definition[MADOptions]


(* ::Input::Initialization:: *)
SetAttributes[SetMADErrors,HoldFirst]


(* ::Input::Initialization:: *)
SetMADErrors[Global`Quadrupoles,var___Rule]:=(#->ToExpression["MADErrors["<>ToString[#]<>",All]={FilterOptions[MADErrors,"<>ToString[{Select[{var},#[[2]]=!=0&&#[[2]]=!=0.&]}]<>"]}"])&/@MADElements[Global`Quadrupoles]


(* ::Input::Initialization:: *)
SetMADErrors[Global`Sextupoles,var___Rule]:=(#->ToExpression["MADErrors["<>ToString[#]<>",All]={FilterOptions[MADErrors,"<>ToString[{Select[{var},#[[2]]=!=0&&#[[2]]=!=0.&]}]<>"]}"])&/@MADElements[Global`Sextupoles]


(* ::Input::Initialization:: *)
SetMADErrors[Global`Dipoles,var___Rule]:=(#->ToExpression["MADErrors["<>ToString[#]<>",All]={FilterOptions[MADErrors,"<>ToString[{Select[{var},#[[2]]=!=0&&#[[2]]=!=0.&]}]<>"]}"])&/@MADElements[Global`Dipoles]


(* ::Input::Initialization:: *)
SetMADErrors[name_,Clear]:=MADErrors[name]={}
SetMADErrors[name_,no_:Integer,Clear]:=MADErrors[HoldForm[name],no]={}
SetMADErrors[name_String,no_:Integer,Clear]:=ToExpression["MADErrors["<>name<>","<>ToString[no]<>"]={}"]


(* ::Input::Initialization:: *)
SetMADErrors[All,Clear]:=DownValues[MADErrors]={}


(* ::Input::Initialization:: *)
SetMADErrors[name_,no_:Integer,var___Rule]:=MADErrors[\!\(\*
TagBox["name",
HoldForm]\),no]={Sequence@@FilterRules[Flatten[{Sequence[{var}]}],Options[MADErrors]]}


(* ::Input::Initialization:: *)
SetMADErrors[name_,var___Rule]:=MADErrors[name]={Sequence@@Flatten[If[#[[2]]==0,{},#]&/@DeleteDuplicates[Join[FilterRules[Flatten[{var}],Options[MADErrors]],GetMADErrors[name]],#1[[1]]===#2[[1]]&]]}


(* ::Input::Initialization:: *)
GetMADErrors[name_]:=If[ListQ[#],#,{}]&[MADErrors[name]]


(* ::Input::Initialization:: *)
GetMADErrors[name_String]:=If[ListQ[#],#,{}]&[ToExpression["MADErrors["<>name<>"]"]]


(* ::Input::Initialization:: *)
GetMADErrors[All]:=#->Quiet[Check[ToExpression["MADErrors["<>ToString[#]<>"]"],{}]]&/@Flatten[{MADElements[Global`Quadrupoles],MADElements[Global`Sextupoles],MADElements[Global`Dipoles]}]


(* ::Input::Initialization:: *)
GetMADErrors[Global`Quadrupoles]:=#->ToExpression["MADErrors["<>ToString[#]<>"]"]&/@MADElements[Global`Quadrupoles]


(* ::Input::Initialization:: *)
GetMADErrors[Global`Sextupoles]:=#->ToExpression["MADErrors["<>ToString[#]<>"]"]&/@MADElements[Global`Sextupoles]


(* ::Input::Initialization:: *)
GetMADErrors[Global`Dipoles]:=#->ToExpression["MADErrors["<>ToString[#]<>"]"]&/@MADElements[Global`Dipoles]


(* ::Input::Initialization:: *)
GetMADErrors[name_,no_:Integer,var_]:=var/.MADErrors[HoldForm[name],no]/.{var->0}


(* ::Input::Initialization:: *)
GetMADErrors[name_,var_]:=var/.MADErrors[name]/.{var->0}


(* ::Input::Initialization:: *)
GetMADErrors[name_String,no_:Integer,var_]:=var/.ToExpression["MADErrors[HoldForm["<>name<>"],"<>ToString[no]<>"]"]/.{var->0}


(* ::Input::Initialization:: *)
GetMADErrors[name_String,var_]:=var/.ToExpression["MADErrors["<>name<>"]"]/.{var->0}


(* ::Input::Initialization:: *)
SetMADElements[var___List]:=MADElements[]={Sequence@@FilterRules[Flatten[{Sequence@@Flatten[var]}],Options[MADElements]]}


(* ::Input::Initialization:: *)
MADElements[Global`Quadrupoles]:=(Global`Quadrupoles/.MADElements[]/.Options[MADElements])


(* ::Input::Initialization:: *)
MADElements[Global`Sextupoles]:=(Global`Sextupoles/.MADElements[]/.Options[MADElements])


(* ::Input::Initialization:: *)
MADElements[Global`Dipoles]:=(Global`Dipoles/.MADElements[]/.Options[MADElements])


(* ::Input::Initialization:: *)
SetMADElements[Quadrupole,name_]:=If[!MemberQ[MADElements[Global`Quadrupoles],HoldForm[name]],SetMADElements[{Global`Quadrupoles->Append[MADElements[Global`Quadrupoles],HoldForm[name]],Global`Sextupoles->MADElements[Global`Sextupoles],Global`Dipoles->MADElements[Global`Dipoles]}]]


(* ::Input::Initialization:: *)
SetMADElements[Sextupole,name_]:=If[!MemberQ[MADElements[Global`Sextupoles],HoldForm[name]],SetMADElements[{Global`Quadrupoles->MADElements[Global`Quadrupoles],Global`Sextupoles->Append[MADElements[Global`Sextupoles],HoldForm[name]],Global`Dipoles->MADElements[Global`Dipoles]}]]


(* ::Input::Initialization:: *)
SetMADElements[Dipole,name_]:=If[!MemberQ[MADElements[Global`Dipoles],HoldForm[name]],SetMADElements[{Global`Quadrupoles->MADElements[Global`Quadrupoles],Global`Sextupoles->MADElements[Global`Sextupoles],Global`Dipoles->Append[MADElements[Global`Dipoles],HoldForm[name]]}]]


(* ::Input::Initialization:: *)
SetAttributes[genExtra,HoldFirst]


(* ::Input::Initialization:: *)
genExtra[name_,Extra___]:=Block[{tilt,xap,yap},xap=Global`XAp/.{Extra}/.{Global`XAp->0};
yap=Global`YAp/.{Extra}/.{Global`YAp->0};
tilt=Global`Tilt/.{Extra}/.{Global`Tilt->0};
Evaluate[(Symbol@(ToString[name]<>"Extra"))]=List[name,"Extra",xap,yap,tilt];]


(* ::Input::Initialization:: *)
ealignFields={"dx","dy","ds","dphi","dtheta","dpsi","mrex","mrey"};


(* ::Input::Initialization:: *)
efieldFields={"order","radius","dbl","dkl","dklr","dklr","brot","rot"};


(* ::Input::Initialization:: *)
efcompFields={"order","radius","dbln","dkln","dbls","dkls","dblnr","dklnr","dblsr","dklsr","brot","rot"};


(* ::Input::Initialization:: *)
Clear[errorWriteealign,errorWriteefield]


(* ::Input::Initialization:: *)
SetAttributes[{errorWriteealign,errorWriteefield},HoldFirst];


(* ::Input::Initialization:: *)
errorWriteealign[rules_]:=Block[{},If[Length[rules]>0&&Max[Abs[rules[[All,2]]]]>0,
"ealign"<>StringJoin[","<>ToString[#[[1]]]<>"="<>ToString[NumberRight[Evaluate[#[[2]]]]]&/@rules]<>";\n",""]]


(* ::Input::Initialization:: *)
errorWriteefield[rules_]:=Block[{},If[Length[rules]>0,
"efield"<>StringJoin[","<>ToString[#[[1]]]<>"="<>ToString[NumberRight[#[[2]]]]&/@rules]<>";\n",""]]


(* ::Input::Initialization:: *)
errorWriteefcomp[rules_]:=Block[{},If[Length[rules]>0,
"efcomp"<>StringJoin[","<>ToString[#[[1]]]<>"="<>ToString[NumberRight[#[[2]]]]&/@rules]<>";\n",""]]


(* ::Input::Initialization:: *)
Clear[MADWriteErrors];
MADWriteErrors[filename_:"",eopt_:True]:=Block[{file,errors,errorsindividual},
If[filename==="",file=MADFileName,file=filename];
errors=Select[GetMADErrors[All],#[[2]]=!={}&&Not[Head[#[[2]]]===MADErrors]&];
errorsindividual=Select[Cases[DownValues[MADErrors],x:HoldPattern[MADErrors[\!\(\*
TagBox["z_",
HoldForm]\),y_]]:>{x,y,If[StringQ[z],z,z[[1,1]]]},\[Infinity]],Length[#[[1]]]>0&&Max[Abs[#[[1,All,2]]]]>0&];
If[eopt,MADStringWrite[file,"EOPT,ADD=TRUE
"]];
Block[{err=#[[2]]},
MADStringWrite[file,"select,error,pattern=\""<>ToString[#[[1]]]<>"\";\n"];
MADStringWrite[file,errorWriteealign[Select[err,Or@@StringMatchQ[ealignFields,ToString[#[[1]]]]&]]];
MADStringWrite[file,errorWriteefield[Select[err,Or@@StringMatchQ[efieldFields,ToString[#[[1]]]]&]]];
MADStringWrite[file,errorWriteefcomp[Select[err,Or@@StringMatchQ[efcompFields,ToString[#[[1]]]]&]]];
MADStringWrite[file,"select,error,clear;\n"]]&/@errors;
Block[{err=Select[#[[1]],Max[Abs[#[[2]]]]>0&]},
MADStringWrite[file,"select,error,"<>ToString[#[[3]]]<>"["<>ToString[#[[2]]]<>"];\n"];
MADStringWrite[file,errorWriteealign[Select[err,Or@@StringMatchQ[ealignFields,ToString[err[[1,1]]]]&]]];
MADStringWrite[file,errorWriteefield[Select[err,Or@@StringMatchQ[efieldFields,ToString[err[[1,1]]]]&]]];
MADStringWrite[file,errorWriteefcomp[Select[err,Or@@StringMatchQ[efcompFields,ToString[err[[1,1]]]]&]]];
MADStringWrite[file,"select,error,clear;\n"]]&/@errorsindividual;
]


(* ::Input::Initialization:: *)
Unprotect[quad];


(* ::Input::Initialization:: *)
SetAttributes[quad,HoldFirst]


(* ::Input::Initialization:: *)
quad[name_:Quad,L_,Focus_,Type_:"",Extra___]:=Block[{thin,name2,delayed},
thin=Global`Thin/.{Extra}/.{Global`Thin->False};
delayed=Global`Delayed/.{Extra}/.{Global`Delayed->False};
If[MatrixQ[name]||VectorQ[name],
If[Length[name]===3,
name2=StringDrop[ToString[name[[1,1]]],-6];
MADClear[Evaluate[(name2<>"lens")]];
MADClear[Evaluate[(name2<>"drift1")]];
MADClear[name];,
name2=ToString[name[[1,1]]];
MADClear[name];],name2=ToString[name];];

SetMADOptions[Evaluate[Symbol@ToString[name]],Extra,Global`Name->ToString[name],Order->2,K[2]->Focus,Thick->Not[Global`Thin],Global`L->L,Global`Kl->focus*l

];

SetMADErrors[name,Clear];SetMADElements[Quadrupole,ToExpression[name]];
If[thin===True,
drift[Evaluate[(Symbol@(ToString[name2]<>"drift1"))],(L/2),""];multipole[Evaluate[Symbol@(ToString[name2]<>"lens")],0,"",Global`LRAD->(L),Global`K1L->(Focus*L)];
name=Partition[Flatten[{Evaluate[(Symbol@(ToString[Unevaluated[name]]<>"drift1"))],Evaluate[Symbol@(ToString[name2]<>"lens")],Evaluate[(Symbol@(ToString[name2]<>"drift1"))]}],7];,
name2=ToString[name];
MADClear[name];
ToExpression["Evaluate[Symbol@ToString["<>name2<>"]]"<>If[delayed,":",""]<>"={{\""<>name2<>"\",\"Quadrupole\","<>ToString[NumberRight[L]]<>","<>ToString@Focus<>",\"---\",\"---\",\""<>Type<>"\"}};"]];
genExtra[name2,Extra];]


(* ::Input::Initialization:: *)
Protect[quad];


(* ::Input::Initialization:: *)
Unprotect[drift]


(* ::Input::Initialization:: *)
SetAttributes[drift,HoldFirst]


(* ::Input::Initialization:: *)
SetAttributes[csrdrift,HoldFirst]


(* ::Input::Initialization:: *)
drift[name_:Drift,L_,Type_:"",Extra___]:=Block[{name2},
If[MatrixQ[name]||VectorQ[name],
name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"Drift",L,"---","---","---",ToString[Type]}};,
name2=ToString[name];
MADClear[name];
If[NumberQ[L],
Evaluate[Symbol@ToString[name]]={{ToString[name],"Drift",L,"---","---","---",ToString[Type]}},
Evaluate[Symbol@ToString[name]]={{ToString[name],"Drift",L,"---","---","---",ToString[Type]}}];];
genExtra[name2,Extra]]


(* ::Input::Initialization:: *)
csrdrift[name_:Drift,L_,Type_:"",Extra___]:=Block[{name2},
If[MatrixQ[name]||VectorQ[name],
name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"CSRDrift",L,"---","---","---",ToString[Type]}};,
name2=ToString[name];
MADClear[name];
If[NumberQ[L],
Evaluate[Symbol@ToString[name]]={{ToString[name],"CSRDrift",L,"---","---","---",ToString[Type]}},
Evaluate[Symbol@ToString[name]]={{ToString[name],"CSRDrift",L,"---","---","---",ToString[Type]}}];];
genExtra[name2,Extra]]


(* ::Input::Initialization:: *)
Protect[drift]


(* ::Input::Initialization:: *)
Unprotect[yrot]


(* ::Input::Initialization:: *)
SetAttributes[yrot,HoldFirst]


(* ::Input::Initialization:: *)
yrot[name_:YROT,Angle_,Type_:"",Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"YROT",0,"---","---",Angle,ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"YROT",0,"---","---",Angle,ToString[Type]}};];
genExtra[name2,Extra]]


(* ::Input::Initialization:: *)
Protect[yrot]


(* ::Input::Initialization:: *)
Unprotect[srot]


(* ::Input::Initialization:: *)
SetAttributes[srot,HoldFirst]


(* ::Input::Initialization:: *)
srot[name_:SROT,Angle_,Type_:"",Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"SROT",0,"---","---",Angle,ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"SROT",0,"---","---",Angle,ToString[Type]}};];
genExtra[name2,Extra]]


(* ::Input::Initialization:: *)
Protect[srot]


(* ::Input::Initialization:: *)
Unprotect[ecoll]


(* ::Input::Initialization:: *)
SetAttributes[ecoll,HoldFirst]


(* ::Input::Initialization:: *)
ecoll[name_:ECOLL,L_,XSIZE_,YSIZE_,Type_:"",Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"ECOLLIMATOR",L,"---",XSIZE,YSIZE,ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"ECOLLIMATOR",L,"---",XSIZE,YSIZE,ToString[Type]}};];
genExtra[name2,Global`XAp->XSIZE,Global`YAp->YSIZE]]


(* ::Input::Initialization:: *)
Protect[ecoll]


(* ::Input::Initialization:: *)
Unprotect[rcoll]


(* ::Input::Initialization:: *)
SetAttributes[rcoll,HoldFirst]


(* ::Input::Initialization:: *)
rcoll[name_:RCOLL,L_,XSIZE_,YSIZE_,Type_:"",Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"RCOLLIMATOR",L,"---",XSIZE,YSIZE,ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"RCOLLIMATOR",L,"---",XSIZE,YSIZE,ToString[Type]}};];
genExtra[name2,Global`XAp->XSIZE,Global`YAp->YSIZE]]


(* ::Input::Initialization:: *)
Protect[rcoll]


(* ::Input::Initialization:: *)
SetAttributes[marker,HoldFirst]


(* ::Input::Initialization:: *)
marker[name_:Marker,Type_:"",Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"Marker",0,"---","---","---",ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"Marker",0,"---","---","---",ToString[Type]}};];
genExtra[name2,Extra]]


(* ::Input::Initialization:: *)
SetAttributes[wire,HoldFirst]


(* ::Input::Initialization:: *)
wire[name_:Wire,Length_:0,Type_:"",Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"Wire",Length,"---","---","---",ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"Wire",Length,"---","---","---",ToString[Type]}};];
genExtra[name2,Extra]]


(* ::Input::Initialization:: *)
SetAttributes[instrument,HoldFirst]


(* ::Input::Initialization:: *)
instrument[name_:Instr,Length_:0,Type_:"",Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"Instrument",Length,"---","---","---",ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"Instrument",Length,"---","---","---",ToString[Type]}};];
genExtra[name2,Extra]]


(* ::Input::Initialization:: *)
SetAttributes[monitor,HoldFirst]


(* ::Input::Initialization:: *)
monitor[name_:Monitor,Length_:0,Type_:"",Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"Monitor",Length,"---","---","---",ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"Monitor",Length,"---","---","---",ToString[Type]}};];
genExtra[name2,Extra]]


(* ::Input::Initialization:: *)
SetAttributes[imonitor,HoldFirst]


(* ::Input::Initialization:: *)
imonitor[name_:Monitor,Length_:0,Type_:"",Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"IMonitor",Length,"---","---","---",ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"IMonitor",Length,"---","---","---",ToString[Type]}};];
genExtra[name2,Extra]]


(* ::Input::Initialization:: *)
SetAttributes[profile,HoldFirst]


(* ::Input::Initialization:: *)
profile[name_:Monitor,Length_:0,Type_:"",Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"Profile",Length,"---","---","---",ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"Profile",Length,"---","---","---",ToString[Type]}};];
genExtra[name2,Extra]]


(* ::Input::Initialization:: *)
maxamp[name_:MAXAMP,xmax_:0.01,ymax_:0.01,Type_:"",Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"Profile",Length,"---","---","---",ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"MAXAMP",0,xmax,ymax,"---",ToString[Type]}};];
genExtra[name2,Extra]]


(* ::Input::Initialization:: *)
SetAttributes[scraper,HoldFirst]


(* ::Input::Initialization:: *)
scraper[name_:Scraper,Length_:0,Type_:"",Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"Wire",Length,"---","---","---",ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"Scraper",Length,"---","---","---",ToString[Type]}};];
genExtra[name2,Extra]]


(* ::Input::Initialization:: *)
Unprotect[sbend]


(* ::Input::Initialization:: *)
SetAttributes[sbend,HoldFirst]


(* ::Input::Initialization:: *)
SetAttributes[csbend,HoldFirst]


(* ::Input::Initialization:: *)
SetAttributes[csrcsbend,HoldFirst]


(* ::Input::Initialization:: *)
sbend[name_:SBend,L_,Focus_,Angle_,Type_:"",Extra___]:=Block[{name2,delayed},
delayed=Global`Delayed/.{Extra}/.{Global`Delayed->False};
If[MatrixQ[name]||VectorQ[name],
name2=ToString[name[[1,1]]],
name2=ToString[name]];
MADClear[name];
SetMADErrors[name,Clear];SetMADElements[Dipole,name];
If[delayed,
ToExpression["Evaluate[Symbol@ToString["<>name2<>"]]:={{\""<>name2<>"\",\"SectorBend\","<>ToString[L]<>","<>ToString[Focus]<>",\"---\","<>ToString[Angle]<>",\""<>Type<>"\"}};"],
Evaluate[Symbol@ToString[name]]={{ToString[name],"SectorBend",L,Focus,"---",Angle,ToString[Type]}}];
sbendExtra[name2,Extra]];


(* ::Input::Initialization:: *)
csbend[name_:SBend,L_,Focus_,Angle_,Type_:"",Extra___]:=Block[{name2,delayed},
delayed=Global`Delayed/.{Extra}/.{Global`Delayed->False};
If[MatrixQ[name]||VectorQ[name],
name2=ToString[name[[1,1]]],
name2=ToString[name]];
MADClear[name];
SetMADErrors[name,Clear];SetMADElements[Dipole,name];
If[delayed,
ToExpression["Evaluate[Symbol@ToString["<>name2<>"]]:={{\""<>name2<>"\",\"CSectorBend\","<>ToString[L]<>","<>ToString[Focus]<>",\"---\","<>ToString[Angle]<>",\""<>Type<>"\"}};"],
Evaluate[Symbol@ToString[name]]={{ToString[name],"CSectorBend",L,Focus,"---",Angle,ToString[Type]}}];
sbendExtra[name2,Extra]];


(* ::Input::Initialization:: *)
csrcsbend[name_:SBend,L_,Focus_,Angle_,Type_:"",Extra___]:=Block[{name2,delayed},
delayed=Global`Delayed/.{Extra}/.{Global`Delayed->False};
If[MatrixQ[name]||VectorQ[name],
name2=ToString[name[[1,1]]],
name2=ToString[name]];
MADClear[name];
SetMADErrors[name,Clear];SetMADElements[Dipole,name];
If[delayed,
ToExpression["Evaluate[Symbol@ToString["<>name2<>"]]:={{\""<>name2<>"\",\"CSRCSectorBend\","<>ToString[L]<>","<>ToString[Focus]<>",\"---\","<>ToString[Angle]<>",\""<>Type<>"\"}};"],
Evaluate[Symbol@ToString[name]]={{ToString[name],"CSRCSectorBend",L,Focus,"---",Angle,ToString[Type]}}];
sbendExtra[name2,Extra]];


(* ::Input::Initialization:: *)
sbendExtra[name_,Extra___]:=Block[{e1,e2,tilt,k2,h1,hgap,fint,k3,xap,yap,fintx,delayed},
delayed=Global`Delayed/.{Extra}/.{Global`Delayed->False};
xap=Global`XAp/.{Extra}/.{Global`XAp->0};
yap=Global`YAp/.{Extra}/.{Global`YAp->0};
e1=Global`E1/.{Extra}/.{Global`E1->0};
e2=Global`E2/.{Extra}/.{Global`E2->0};
tilt=Global`Tilt/.{Extra}/.{Global`Tilt->0};
k2=Global`K2/.{Extra}/.{Global`K2->0};
h1=Global`H1/.{Extra}/.{Global`H1->0};
hgap=Global`HGap/.{Extra}/.{Global`HGap->0};
fint=Global`FInt/.{Extra}/.{Global`FInt->0};
k3=Global`K3/.{Extra}/.{Global`K3->0};
fintx=Global`FIntX/.{Extra}/.{Global`FIntX->0};
If[delayed,
ToExpression["Evaluate[(Symbol@(ToString[\""<>name<>"\"]<>\"Extra\"))]:=List[\""<>name<>"\",\"Extra\","<>ToString[xap]<>","<>ToString[yap]<>","<>ToString[e1]<>","<>ToString[e2]<>","<>ToString[tilt]<>","<>ToString[k2]<>","<>ToString[h1]<>","<>ToString[hgap]<>","<>ToString[fint]<>","<>ToString[k3]<>","<>ToString[fintx]<>"]"],
Evaluate[(Symbol@(ToString[name]<>"Extra"))]=List[name,"Extra",xap,yap,e1,e2,tilt,k2,h1,hgap,fint,k3,fintx]];]


(* ::Input::Initialization:: *)
Protect[sbend]


(* ::Input::Initialization:: *)
Unprotect[rbend]


(* ::Input::Initialization:: *)
SetAttributes[rbend,HoldFirst]


(* ::Input::Initialization:: *)
rbend[name_:RBend,L_,Focus_,Angle_,Type_:"",Extra___]:=Block[{name2},
If[MatrixQ[name]||VectorQ[name],
name2=ToString[name[[1,1]]],
name2=ToString[name]];
MADClear[name];
SetMADErrors[name,Clear];SetMADElements[Dipole,name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"RectBend",L,Focus,"---",Angle,ToString[Type]}};
rbendExtra[name2,Extra]];


(* ::Input::Initialization:: *)
rbendExtra[name_,Extra___]:=Block[{e1,e2,tilt,k2,h1,hgap,fint,k3,xap,yap},xap=Global`XAp/.{Extra}/.{Global`XAp->0};
yap=Global`YAp/.{Extra}/.{Global`YAp->0};
e1=Global`E1/.{Extra}/.{Global`E1->0};
e2=Global`E2/.{Extra}/.{Global`E2->0};
tilt=Global`Tilt/.{Extra}/.{Global`Tilt->0};
k2=Global`K2/.{Extra}/.{Global`K2->0};
h1=Global`H1/.{Extra}/.{Global`H1->0};
hgap=Global`HGap/.{Extra}/.{Global`HGap->0};
fint=Global`FInt/.{Extra}/.{Global`FInt->0};
k3=Global`K3/.{Extra}/.{Global`K3->0};
fintx=Global`FIntX/.{Extra}/.{Global`FIntX->0};
Evaluate[(Symbol@(ToString[name]<>"Extra"))]=List[name,"Extra",xap,yap,e1,e2,tilt,k2,h1,hgap,fint,k3,fintx];]


(* ::Input::Initialization:: *)
Protect[rbend]


(* ::Input::Initialization:: *)
Unprotect[sext]


(* ::Input::Initialization:: *)
SetAttributes[sext,HoldFirst]


(* ::Input::Initialization:: *)
sext[name_:Sext,L_,Focus_,Type_:"",Extra___]:=Block[{thin,name2},thin=Global`Thin/.{Extra}/.{Global`Thin->False};
If[MatrixQ[name]||VectorQ[name],If[Length[name]===3,
name2=StringDrop[ToString[name[[1,1]]],-6];
MADClear[Evaluate[(name2<>"lens")]];
MADClear[Evaluate[(name2<>"drift1")]];
MADClear[name];
name2=ToString[name];,
name2=ToString[name[[1,1]]];
MADClear[name];],name2=ToString[name];];

SetMADOptions[Evaluate[Symbol@ToString[name]],Extra,Global`Name->ToString[name],Global`Porder->3,Global`PB[3]->Focus/2,Pirho->0,Pthick->False,Global`PL->L

];

SetMADErrors[name,Clear];SetMADElements[Sextupole,name];
If[thin===True,
drift[Evaluate[(Symbol@(ToString[name2]<>"drift1"))],(L/2),""];multipole[Evaluate[Symbol@(ToString[name2]<>"lens")],"",Global`K2L->(Focus*L)];
name=Partition[Flatten[{Evaluate[(Symbol@(ToString[Unevaluated[name]]<>"drift1"))],Evaluate[Symbol@(ToString[name2]<>"lens")],Evaluate[(Symbol@(ToString[name2]<>"drift1"))]}],7];,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"Sextupole",L,Focus,"---","---",ToString[Type]}};];
genExtra[name2,Extra];]


(* ::Input::Initialization:: *)
Protect[sext]


(* ::Input::Initialization:: *)
Unprotect[oct]


(* ::Input::Initialization:: *)
SetAttributes[oct,HoldFirst]


(* ::Input::Initialization:: *)
oct[name_:Oct,L_,Focus_,Type_:"",Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"Octupole",L,Focus,"---","---",ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"Octupole",L,Focus,"---","---",ToString[Type]}};];
genExtra[name2,Extra]]


(* ::Input::Initialization:: *)
Protect[oct]


(* ::Input::Initialization:: *)
SetAttributes[vkick,HoldFirst]


(* ::Input::Initialization:: *)
vkick[name_:Vkick,L_,VAngle_,Type_:"",Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"VKicker",L,"---",VAngle,"---",ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"VKicker",L,"---",VAngle,"---",ToString[Type]}};];
genExtra[name2,Extra]]


(* ::Input::Initialization:: *)
SetAttributes[hkick,HoldFirst]


(* ::Input::Initialization:: *)
hkick[name_:Hkick,L_,HAngle_,Type_:"",Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"HKicker",L,"---","---",HAngle,ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"HKicker",L,"---","---",HAngle,ToString[Type]}};];
genExtra[name2,Extra]]


(* ::Input::Initialization:: *)
SetAttributes[kick,HoldFirst]


(* ::Input::Initialization:: *)
kick[name_:Kick,L_,VAngle_,HAngle_,Type_,Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"Kicker",L,"---",VAngle,HAngle,ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"Kicker",L,"---",VAngle,HAngle,ToString[Type]}};];
genExtra[name2,Extra]]


(* ::Input::Initialization:: *)
SetAttributes[vbpm,HoldFirst]


(* ::Input::Initialization:: *)
vbpm[name_:VBPM,L_,Type_,Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"VBPM",L,"---","---","---",ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"VBPM",L,"---","---","---",ToString[Type]}};];
genExtra[name2,Extra]]


(* ::Input::Initialization:: *)
SetAttributes[hbpm,HoldFirst]


(* ::Input::Initialization:: *)
hbpm[name_:HBPM,L_,Type_,Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"HBPM",L,"---","---","---",ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"HBPM",L,"---","---","---",ToString[Type]}};];
genExtra[name2,Extra]]


(* ::Input::Initialization:: *)
SetAttributes[bpm,HoldFirst]


(* ::Input::Initialization:: *)
bpm[name_:BPM,L_,Type_,Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"BPM",L,"---","---","---",ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"BPM",L,"---","---","---",ToString[Type]}};];
genExtra[name2,Extra];]


(* ::Input::Initialization:: *)
SetAttributes[rfc,HoldFirst]


(* ::Input::Initialization:: *)
rfc[name_:RFC,L_,Type_,Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"RFC",L,"---","---","---",ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"RFC",L,"---","---","---",ToString[Type]}};];
rfcExtra[name2,Extra];]


(* ::Input::Initialization:: *)
rfcExtra[name_,opt___]:=Block[{volt,lag,harmon,betrf,pg,shunt,tfill,xap,yap},
xap=Global`XAp/.{opt}/.{Global`XAp->0};
yap=Global`YAp/.{opt}/.{Global`YAp->0};
volt=Global`MADVolt/.{opt}/.{Global`MADVolt->0};
lag=Global`Lag/.{opt}/.{Global`Lag->0};
harmon=Global`Harmon/.{opt}/.{Global`Harmon->0};
betrf=Global`BetRF/.{opt}/.{Global`BetRF->0};
pg=Global`PG/.{opt}/.{Global`PG->0};
shunt=Global`Shunt/.{opt}/.{Global`Shunt->0};
tfill=Global`TFill/.{opt}/.{Global`TFill->0};
freq=Global`MADFreq/.{opt}/.{Global`MADFreq->0};
Evaluate[(Symbol@(ToString[Unevaluated[name]]<>"Extra"))]=List[ToString[name],"Extra",xap,yap,volt,lag,harmon,betrf,pg,shunt,tfill,freq]]


(* ::Input::Initialization:: *)
SetAttributes[lcav,HoldFirst]


(* ::Input::Initialization:: *)
lcav[name_:LCAV,L_,Type_,Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"LCAV",L,"---","---","---",ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"LCAV",L,"---","---","---",ToString[Type]}};];
lcavExtra[name2,Extra];]


(* ::Input::Initialization:: *)
lcavExtra[name_,opt___]:=Block[{volt,lag,harmon,betrf,pg,shunt,tfill,xap,yap},
xap=Global`XAp/.{opt}/.{Global`XAp->0};
yap=Global`YAp/.{opt}/.{Global`YAp->0};
e0=Global`E0/.{opt}/.{Global`E0->0};
deltae=Global`VoltageGain/.{opt}/.{Global`VoltageGain->0};
phi0=Global`CavityPhase/.{opt}/.{Global`CavityPhase->0};
freq=Global`Frequency/.{opt}/.{Global`Frequency->0};
eloss=Global`LossFactor/.{opt}/.{Global`LossFactor->0};
volterr=Global`VoltageError/.{opt}/.{Global`VoltageError->0};
lagerr=Global`LagError/.{opt}/.{Global`LagError->0};
nbin=Global`NumberBins/.{opt}/.{Global`NumberBins->0};
binmax=Global`MaxBinLength/.{opt}/.{Global`MaxBinLength->0};
lfile=Global`LWakefieldFile/.{opt}/.{Global`LWakefieldFile->""};
tfile=Global`TWakefieldFile/.{opt}/.{Global`TWakefieldFile->""};
energy=Global`InitialEnergy/.{opt}/.{Global`InitialEnergy->0};
Evaluate[(Symbol@(ToString[Unevaluated[name]]<>"Extra"))]=List[ToString[name],"Extra",xap,yap,deltae,phi0,freq,eloss,volterr,lagerr,nbin,binmax,lfile,tfile,e0,energy]]


(* ::Input::Initialization:: *)
Unprotect[line]


(* ::Input::Initialization:: *)
SetAttributes[line,HoldFirst]


(* ::Input::Initialization:: *)
line[name_,list_,Extra___]:=
Block[{name2},
If[
MatrixQ[name]||VectorQ[name]||ValueQ[name],name2=ToString[HoldForm[name]];MADClear[name];name={{ToString[name2],"Line",MADLength[list],"---","---","---",""}},
name2=ToString[name];MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name2],"Line",MADLength[list],"---","---","---",""}}];
lineExtra[name2,list,Extra];]


(* ::Input::Initialization:: *)
line[name_]:=ExpandLattice[name]


(* ::Input::Initialization:: *)
line[name_,Global`NoExpand]:=If[name[[1,2]]==="Line",Evaluate[(Symbol@(ToString[name[[1,1]]]<>"Extra"))][[3]],MADFlat[name]]


(* ::Input::Initialization:: *)
lineExtra[name_,list_,Extra___]:=(SetDelayed[Evaluate[(Symbol@(ToString[name]<>"Extra"))],List[ToString[name],"Extra",reversed[#]&/@MADFlat[list][[All,{1,2}]],Global`Repetition/.{Extra}/.{Global`Repetition->1}]])


(* ::Input::Initialization:: *)
reversed[{name_,type_}]:=Switch[type,"ReversedLine",reverse[ToExpression[name]],_,ToExpression[name]]


(* ::Input::Initialization:: *)
reverse[list_/;(list[[1,2]]==="Line")]:=ReplacePart[list,"ReversedLine",{1,2}]


(* ::Input::Initialization:: *)
SetAttributes[multipole,HoldFirst]


(* ::Input::Initialization:: *)
multipole[name_:MULTIPOLE,Type_,Extra___]:=Block[{name2},
If[MatrixQ[name]||VectorQ[name],
name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name2],"MULTIPOLE",0,"---","---","---",ToString[Type]}};,
name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name2],"MULTIPOLE",0,"---","---","---",ToString[Type]}};];
MADOptions[Symbol@ToString[name]]=Select[List[Extra],Head[#]==Rule&];
multipoleExtra[name2,Extra];]


(* ::Input::Initialization:: *)
multipole[name_:MULTIPOLE,length_,Type_,Extra___]:=Block[{name2},
If[MatrixQ[name]||VectorQ[name],
name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name2],"MULTIPOLE",length,"---","---","---",ToString[Type]}};,
name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name2],"MULTIPOLE",length,"---","---","---",ToString[Type]}};];
MADOptions[Symbol@ToString[name]]=Select[List[Extra],Head[#]==Rule&];
multipoleExtra[name2,Extra];]


(* ::Input::Initialization:: *)
multipoleExtra[name_,opts___]:=Block[{lrad,k0l,t0,k1l,t1,k2l,t2,k3l,t3,k4l,t4,k5l,t5,k6l,t6,k7l,t7,k8l,t8,k9l,t9,xap,yap},xap=Global`XAp/.{opts}/.{Global`XAp->0};
yap=Global`YAp/.{opts}/.{Global`YAp->0};
lrad=Global`LRAD/.{opts}/.{Global`LRAD->0};
k0l=Global`K0L/.{opts}/.{Global`K0L->0};
t0=Global`T0/.{opts}/.{Global`T0->0};
k1l=Global`K1L/.{opts}/.{Global`K1L->0};
t1=Global`T1/.{opts}/.{Global`T1->0};
k2l=Global`K2L/.{opts}/.{Global`K2L->0};
t2=Global`T2/.{opts}/.{Global`T2->0};
k3l=Global`K3L/.{opts}/.{Global`K3L->0};
t3=Global`T3/.{opts}/.{Global`T3->0};
k4l=Global`K4L/.{opts}/.{Global`K4L->0};
t4=Global`T4/.{opts}/.{Global`T4->0};
k5l=Global`K5L/.{opts}/.{Global`K5L->0};
t5=Global`T5/.{opts}/.{Global`T5->0};
k6l=Global`K6L/.{opts}/.{Global`K6L->0};
t6=Global`T6/.{opts}/.{Global`T6->0};
k7l=Global`K7L/.{opts}/.{Global`K7L->0};
t7=Global`T7/.{opts}/.{Global`T7->0};
k8l=Global`K8L/.{opts}/.{Global`K8L->0};
t8=Global`T8/.{opts}/.{Global`T8->0};
k9l=Global`K9L/.{opts}/.{Global`K9L->0};
t9=Global`T9/.{opts}/.{Global`T9->0};
Evaluate[(Symbol@(ToString[Unevaluated[name]]<>"Extra"))]=List[ToString[name],"Extra",xap,yap,lrad,k0l,t0,k1l,t1,k2l,t2,k3l,t3,k4l,t4,k5l,t5,k6l,t6,k7l,t7,k8l,t8,k9l,t9]]


(* ::Input::Initialization:: *)
Unprotect[matrix]


(* ::Input::Initialization:: *)
SetAttributes[matrix,HoldFirst]


(* ::Input::Initialization:: *)
matrix[name_:Mat,L_:0,Type_:"",Extra___]:=Block[{name2,Extra2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"MATRIX",L,"---","---","---",ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"MATRIX",L,"---","---","---",ToString[Type]}};];
matrixExtra[name2,Extra]]


(* ::Input::Initialization:: *)
matrixExtra[name_,opts___]:=Block[{rmat,tmat,kicks},
rmat=Select[Global`MatrixTerms/.{opts}/.{Global`MatrixTerms->{}},Head[First[#]]==Global`RM&];
tmat=Select[Global`MatrixTerms/.{opts}/.{Global`MatrixTerms->{}},Head[First[#]]==Global`TM&];
kicks=Global`KickTerms/.{opts}/.{Global`KickTerms->{}};
Evaluate[(Symbol@(ToString[Unevaluated[name]]<>"Extra"))]=List[ToString[name],"Extra",rmat,tmat,kicks];]


(* ::Input::Initialization:: *)
Protect[matrix]


(* ::Input::Initialization:: *)
Unprotect[ReverseError]


(* ::Input::Initialization:: *)
Unprotect[error]


(* ::Input::Initialization:: *)
SetAttributes[error,HoldFirst]


(* ::Input::Initialization:: *)
error[name_:Error,Type_:"",Extra___]:=Block[{name2,Extra2,dx,dy},
dx=Global`dx/.{Extra}/.{Global`dx->0};
dy=Global`dy/.{Extra}/.{Global`dy->0};
If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"Error",0.0,dx,dy,"---",ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"Error",0.0,dx,dy,"---",ToString[Type]}};];
errorExtra[name2,Extra]]


(* ::Input::Initialization:: *)
errorExtra[name_,opts___]:=Block[{},
Evaluate[(Symbol@(ToString[Unevaluated[name]]<>"Extra"))]=List[ToString[name],"Extra"];]


(* ::Input::Initialization:: *)
ReverseError[error_]:={1,1,1,-1,-1,1,1}*error[[1]]/;(Length[error]===1&&error[[1,2]]==="Error")


(* ::Input::Initialization:: *)
ReverseError[error_]:={1,1,1,-1,-1,1,1}*error/;(Length[error]>1&&error[[2]]==="Error")


(* ::Input::Initialization:: *)
Protect[error]


(* ::Input::Initialization:: *)
Protect[ReverseError]


(* ::Input::Initialization:: *)
SetAttributes[beta0,HoldFirst]


(* ::Input::Initialization:: *)
beta0[name_:ECOLL,Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"BETA0",0,"---",XSIZE,YSIZE,ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"BETA0",0,"---","---","---","---"}};];
beta0Extra[name2,Extra]]


(* ::Input::Initialization:: *)
beta0Extra[name_,opts___]:=Block[{rmat,tmat},
alfax=Global`ALFX/.{opts}/.{Global`ALFX->True};
betax=Global`BETX/.{opts}/.{Global`BETX->True};
mux=Global`MUX/.{opts}/.{Global`MUX->True};
alfay=Global`ALFY/.{opts}/.{Global`ALFY->True};
betay=Global`BETY/.{opts}/.{Global`BETY->True};
muy=Global`MUY/.{opts}/.{Global`MUY->True};
Evaluate[(Symbol@(ToString[Unevaluated[name]]<>"Extra"))]=List[ToString[name],"Extra",rmat,tmat];]


(* ::Input::Initialization:: *)
Unprotect[solenoid]


(* ::Input::Initialization:: *)
SetAttributes[solenoid,HoldFirst]


(* ::Input::Initialization:: *)
solenoid[name_:Sol,L_,Focus_,Type_:"",Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"Solenoid",L,Focus,"---","---",ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"Solenoid",L,Focus,"---","---",ToString[Type]}};];
genExtra[name2,Extra]]


(* ::Input::Initialization:: *)
Protect[solenoid]


(* ::Input::Initialization:: *)
Unprotect[charge]


(* ::Input::Initialization:: *)
SetAttributes[charge,HoldFirst]


(* ::Input::Initialization:: *)
charge[name_:charge,Charge_:0,Type_:"",Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"Charge",0,Charge,"---","---",ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"Charge",0,Charge,"---","---",ToString[Type]}};];
genExtra[name2,Extra]]


(* ::Input::Initialization:: *)
Protect[charge]


(* ::Input::Initialization:: *)
Unprotect[watch]


(* ::Input::Initialization:: *)
SetAttributes[watch,HoldFirst]


(* ::Input::Initialization:: *)
watch[name_:watch,filename_:"",Type_:"",Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"Watch",0,filename,"---","---",ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"Watch",0,filename,"---","---",ToString[Type]}};];
genExtra[name2,Extra]]


(* ::Input::Initialization:: *)
Protect[watch]


(* ::Input::Initialization:: *)
Unprotect[cwiggler]


(* ::Input::Initialization:: *)
SetAttributes[cwiggler,HoldFirst]


(* ::Input::Initialization:: *)
cwiggler[name_:cwiggler,L_,bmax_:0,bxfile_:"",byfile_:"",Type_:"",Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"CWiggler",L,bmax,bxfile,byfile,ToString[Type]}};,
name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"CWiggler",L,bmax,bxfile,byfile,ToString[Type]}};];
cwigglerExtra[name2,Extra]]


(* ::Input::Initialization:: *)
cwigglerExtra[name_,opts___]:=Block[{periods,stepsperperiod,bxmax,bymax,sinusoidal,vertical,helical,dx,dy,dz,tilt},
periods=Global`Periods/.{opts}/.{Global`Periods->0};
stepsperperiod=Global`StepsPerPeriod/.{opts}/.{Global`StepsPerPeriod->10};
bxmax=Global`BxMax/.{opts}/.{Global`BxMax->0};
bymax=Global`ByMax/.{opts}/.{Global`ByMax->0};
sinusoidal=Global`Sinusoidal/.{opts}/.{Global`Sinusoidal->0};
vertical=Global`Vertical/.{opts}/.{Global`Vertical->0};
helical=Global`Helical/.{opts}/.{Global`Helical->0};
dx=Global`DX/.{opts}/.{Global`DX->0};
dy=Global`DY/.{opts}/.{Global`DY->0};
dz=Global`DZ/.{opts}/.{Global`DZ->0};
tilt=Global`Tilt/.{opts}/.{Global`Tilt->0};
Evaluate[(Symbol@(ToString[Unevaluated[name]]<>"Extra"))]=List[ToString[name],"Extra",periods,stepsperperiod,bxmax,bymax,sinusoidal,vertical,helical,dx,dy,dz,tilt];]


(* ::Input::Initialization:: *)
Protect[cwiggler]


(* ::Input::Initialization:: *)
Unprotect[gwiggler]


(* ::Input::Initialization:: *)
SetAttributes[gwiggler,HoldFirst]


(* ::Input::Initialization:: *)
gwiggler[name_:gwiggler,L_,focus_:0,Type_:"",Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"GWiggler",L,focus,"---","---",ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"GWiggler",L,focus,"---","---",ToString[Type]}};];
genExtra[name2,Extra]]


(* ::Input::Initialization:: *)
Protect[gwiggler]


(* ::Input::Initialization:: *)
Unprotect[freetext]


(* ::Input::Initialization:: *)
SetAttributes[freetext,HoldFirst]


(* ::Input::Initialization:: *)
freetext[name_:FreeText,L_,Type_:"",Extra___]:=Block[{name2},If[MatrixQ[name]||VectorQ[name],name2=ToString[name[[1,1]]];MADClear[name];
name={{ToString[name],"FreeText",L,0,"---","---",ToString[Type]}};,name2=ToString[name];
MADClear[name];
Evaluate[Symbol@ToString[name]]={{ToString[name],"FreeText",L,0,"---","---",ToString[Type]}};];
freetextExtra[name2,Extra]]


(* ::Input::Initialization:: *)
freetextExtra[name_,Extra___]:=Block[{text},
text=Global`FreeText/.{Extra}/.{Global`FreeText->""};
Evaluate[(Symbol@(ToString[name]<>"Extra"))]=List[name,"Extra",text];]


(* ::Input::Initialization:: *)
Protect[freetext]


(* ::Input::Initialization:: *)
SetAttributes[MADClear,HoldAll]


(* ::Input::Initialization:: *)
MADClear[var__]:=(Apply[Clear,HoldForm[var]];Map[Clear[Evaluate[ToString[#]<>"Extra"]]&,{var}];)


(* ::Input::Initialization:: *)
SetAttributes[MADClearExtra,HoldAll]


(* ::Input::Initialization:: *)
MADClearExtra[var__]:=Map[Clear[Evaluate[ToString[#]<>"Extra"]]&,{var}]


(* ::Input::Initialization:: *)
MADInfo[data2_,Opts___]:=Block[{a,data},
notable=NoTable/.{Opts}/.Options[MADInfo];
expand=LineExpand/.{Opts}/.Options[MADInfo];
data=If[expand===True,ExpandLattice[data2],LinesLattice[data2]];
a=Partition[Flatten[MapThread[List,{data,Drop[FoldList[Plus,0,data[[All,3]]],1]}]],8];
If[notable===False,Print[TableForm[a,TableAlignments->Center, TableHeadings->{Automatic,{"Name","Element","Length","Focus","VAngle","HAngle","Type","Position"}}]];
Print["Total Length = "<>ToString[Fold[Plus,0,data[[All,3]]]]<>" m"],a]
]


(* ::Input::Initialization:: *)
MADLengthAdd[data_]:=Block[{},MADInfoData=Partition[Flatten[MapThread[List,{MADFlatten[data],Drop[FoldList[Plus,0,MADFlatten[data][[All,3]]],1]}]],8]];


(* ::Input::Initialization:: *)
MADSumLength[data_]:=Print["Total Length = "<>ToString[Fold[Plus,0,MADFlatten[data][[All,3]]]]<>" m"]


(* ::Input::Initialization:: *)
MADElementList[list_]:=Block[{ExtraList,StripUnusedExtraFields,ElementList},
MADExtraList[lattice_]:=ToExpression[(#<>"Extra")&/@(Transpose[MADFlatten[lattice]][[1]])];
MADStripUnusedExtraFields[extralist_]:=Drop[#,2]&/@extralist;
ElementList[lattice_]:=PadRight[Join[#[[1]],#[[2]]],30]&/@Transpose[{MADFlatten[lattice],MADStripUnusedExtraFields[MADExtraList[lattice]]}];
ElementList[list]
]


(* ::Input::Initialization:: *)
mflat[list_,Repetition_]:=Partition[Flatten[Table[list,{Repetition}]],7];


(* ::Input::Initialization:: *)
mflat[list_]:=Partition[Flatten[list],7];


(* ::Input::Initialization:: *)
ExpandLattice[lattice_]:=Block[{expand,expandline},
expandline[x_]:=expandline[x]=mflat[Sequence@@Evaluate[Symbol[ToString[x[[1]]]<>"Extra"]][[{3,4}]]];
expand[line_]:=
(If[#1[[2]]==="Line",expandline[#],If[#1[[2]]==="ReversedLine",Reverse[expandline[#]],#1]]&)/@mflat[line];
mflat[FixedPoint[expand[#1]&,lattice]]]


(* ::Input::Initialization:: *)
OrderedUnion[li_]:=Block[{i},i[n_]:=(i[n]=Sequence[];n);i/@li]


(* ::Input::Initialization:: *)
LineLattice[lattice_]:=
Block[{expand,expandline,linelist={}},
expandline[x_]:=expandline[x]=mflat[Evaluate[Symbol[ToString[x[[1]]]<>"Extra"]][[3]]];
expand[line_]:=((If[#[[2]]==="Line"||#[[2]]==="ReversedLine",AppendTo[linelist,#];expandline[#],#]&/@mflat[line]));
mflat[FixedPoint[expand[#]&,lattice]];
Reverse[OrderedUnion[linelist]]
]


(* ::Input::Initialization:: *)
LinesLattice[lattice_]:=
Block[{expand,expandline,linelist={}},
expandline[x_]:=expandline[x]=mflat[Evaluate[Symbol[ToString[x[[1]]]<>"Extra"]][[3]]];
expand[line_]:=((If[#[[2]]==="Line"||#[[2]]==="ReversedLine",AppendTo[linelist,#];expandline[#],#]&/@mflat[line]));
mflat[expand[lattice]]
]


(* ::Input::Initialization:: *)
AbsMax[list_]:=list[[Position[Abs[list],Max[Abs[list]]][[1,1]]]]


(* ::Input::Initialization:: *)
MADElementSummary[list_,opts___]:=Block[{},elementlist=MADFlatten[list];table=ShowTable/. {opts}/. Options[MADElementSummary];data1=Flatten[(Split[Sort[#1,#1[[3]]<#2[[3]]&],#1[[3]]===#2[[3]]&]&)/@Split[Sort[Union[Select[elementlist,#1[[2]]==="SectorBend"||#1[[2]]==="Quadrupole"||#1[[2]]==="Sextupole"&]],elementsortfunction],#1[[2]]===#2[[2]]&],1];If[table,data2=(Switch[#1[[1,2]],
"SectorBend",{{Style["Max",FontWeight->"Bold"],"SectorBend",#1[[1,3]],"","",Style[AbsMax[#1[[All,6]]],FontWeight->"Bold"],Plus@@(Block[{a=#1},Length[Select[elementlist[[All,1]],#1===a&]]]&)/@#1[[All,1]]}},
"Quadrupole",{{Style["Max",FontWeight->"Bold"],"Quadrupole",#1[[1,3]],Style[AbsMax[#1[[All,4]]],FontWeight->"Bold"],"","",Plus@@(Block[{a=#1},Length[Select[elementlist[[All,1]],#1===a&]]]&)/@#1[[All,1]]}},
"Sextupole",{{Style["Max",FontWeight->"Bold"],"Sextupole",#1[[1,3]],Style[AbsMax[#1[[All,4]]],FontWeight->"Bold"],"","",Plus@@(Block[{a=#1},Length[Select[elementlist[[All,1]],#1===a&]]]&)/@#1[[All,1]]}}]&)/@data1;Print[\!\(\*
TagBox[
RowBox[{"Flatten", "[", 
RowBox[{
RowBox[{"Transpose", "[", 
RowBox[{"{", 
RowBox[{"Join", "[", 
RowBox[{"data1", ",", 
RowBox[{"{", 
RowBox[{"{", "\"\<----\>\"", "}"}], "}"}], ",", "data2"}], "]"}], "}"}], "]"}], ",", "2"}], "]"}],
Function[BoxForm`e$, TableForm[BoxForm`e$, TableHeadings -> {None, Map[Style[#, FontSlant -> "Italic"]& , {"Name", "Element", "Length", "Focus", "VAngle", "HAngle", "Type"}]}]]]\)],data2=(Switch[#1[[1,2]],
"SectorBend",{{"Max","SectorBend",#1[[1,3]],"","",AbsMax[#1[[All,6]]],Plus@@(Block[{a=#1},Length[Select[elementlist[[All,1]],#1===a&]]]&)/@#1[[All,1]]}},
"Quadrupole",{{"Max","Quadrupole",#1[[1,3]],AbsMax[#1[[All,4]]],"","",Plus@@(Block[{a=#1},Length[Select[elementlist[[All,1]],#1===a&]]]&)/@#1[[All,1]]}},
"Sextupole",{{"Max","Sextupole",#1[[1,3]],AbsMax[#1[[All,4]]],"","",Plus@@(Block[{a=#1},Length[Select[elementlist[[All,1]],#1===a&]]]&)/@#1[[All,1]]}}]&)/@data1;Flatten[Transpose[{Join[data1,data2]}],2]]]


(* ::Input::Initialization:: *)
MADLength[lattice_]:=Fold[Plus,0,ExpandLattice[lattice][[All,3]]]


(* ::Input::Initialization:: *)
MADGetElementLengths[lattice_]:=ExpandLattice[lattice][[All,3]]


(* ::Input::Initialization:: *)
NumberRight[a_,acc_:15]:=NumberForm[N[a],acc,ExponentFunction->(Null&)]


(* ::Input::Initialization:: *)
SetAttributes[MADWrite,HoldRest];


(* ::Input::Initialization:: *)
MADWrite[filename_,list2_,Extra___]:=Block[{acc,new,echo,symm,super,MADXSwitch,MADMultipleData,list,slice,datafile},slice=Slice/.{Extra}/.{Slice->1};
new=New/.{Extra}/.{New->True};
acc=Accuracy/.{Extra}/.{Accuracy->8};
echo=Global`Echo/.{Extra}/.{Global`Echo->On};
symm=Symm/.{Extra}/.Options[MADLineWrite];
super=Super/.{Extra}/.Options[MADLineWrite];
MADXSwitch=False;
If[slice>1,list=MADSplitElements[list2,slice],list=list2];
MADLineName=If[Head[Unevaluated[list2]]===Symbol,ToString[Unevaluated[HoldForm[list2]]],"lattice"];
MADFileName=ToString[filename]<>".mff";
If[new===False,datafile=OpenAppend[MADFileName],datafile=OpenWrite[MADFileName]];
Close[datafile];
MADMultipleData=Union[ExpandLattice[list]];
If[ToLowerCase[ToString[echo]]==="off",
MADFileWrite["option,-echo;\n",filename];
];
MADFileWrite["assign, print=\""<>ToString[filename]<>".print.txt\",&\necho=\""<>ToString[filename]<>".echo.txt\"\n"];
MADFileWrite["Title,\""<>ToString[filename]<>" - Created With MADInput\";\n",filename];
MADWhatisit[#]&/@MADMultipleData;
If[LineLattice[list]=!={},MADWhatisit[#]&/@LineLattice[list];If[Head[Unevaluated[list2]]=!=Symbol,MADLineWrite[list,MADLineName,Extra]];,MADLineWrite[list,MADLineName,Extra]];
If[ToLowerCase[ToString[echo]]==="off",
MADFileWrite["option,echo;\n",filename];
];
MADFileWrite["\n\nUse,"<>StringReplace[ToString[MADLineName],{"$"->"_","\[Sterling]"->""}]<>If[symm===True,", symm",""]<>If[super=!=0,", Super="<>ToString[super],""]<>";\n",filename];
]


(* ::Input::Initialization:: *)
SetAttributes[MADXWrite,HoldRest];


(* ::Input::Initialization:: *)
MADXWrite[filename_,list2_,Extra___]:=Block[{acc,new,echo,symm,super,MADXSwitch,MADMultipleData,list,slice,datafile,energy,particle},
slice=Slice/.{Extra}/.{Slice->1};
new=New/.{Extra}/.{New->True};
acc=Accuracy/.{Extra}/.{Accuracy->8};
energy=Energy/.{Extra}/.{Energy->1};
particle=Global`MADParticle/.{Extra}/.{Global`MADParticle->"electron"};
MADXSwitch=True;
If[slice>1,list=MADSplitElements[list2,slice],list=list2];
MADLineName=If[Head[Unevaluated[list2]]===Symbol,ToString[Unevaluated[HoldForm[list2]]],"lattice"];
MADFileName=ToString[filename]<>".mfx";
If[new===False,datafile=OpenAppend[MADFileName],datafile=OpenWrite[MADFileName]];
Close[datafile];
MADMultipleData=Union[ExpandLattice[list]];
MADFileWrite["assign,echo=\""<>ToString[filename]<>".echo.txt\"\n",filename];
MADFileWrite["Title,\""<>ToString[filename]<>" - Created With MADInput\";\n"];
MADWhatisit[#]&/@MADMultipleData;
If[LineLattice[list]=!={},MADWhatisit[#]&/@LineLattice[list];If[Head[Unevaluated[list2]]=!=Symbol,MADXLineWrite[list,MADLineName,Extra]];,MADXLineWrite[list,MADLineName,Extra]];
MADFileWrite["beam,energy="<>ToString[energy]<>",particle="<>ToString[particle]<>";\n"];
MADFileWrite["Use,period="<>ToString[MADLineName]<>";\n"];
]


(* ::Input::Initialization:: *)
MADLineWrite[list_,linename_,Extra___]:=Block[{\[Lambda],\[Chi],\[Beta]},
symm=Symm/.{Extra}/.Options[MADLineWrite];
super=Super/.{Extra}/.Options[MADLineWrite];
\[Lambda]=Partition[Flatten[list],7];\[Chi]="";\[Beta]=StringReplace[ToString[linename],{"$"->"_","\[Sterling]"->""}]<>": Line= ( ";
While[Length[\[Lambda]]>0,
\[Iota]=0;
While[(\[Iota]+1)<=Length[\[Lambda]]&&StringLength[\[Beta]<>ToString[Part[Part[\[Lambda],(\[Iota]+1)],1]]]<70,\[Iota]+=1;\[Beta]=\[Beta]<>StringReplace[ToString[Part[Part[\[Lambda],\[Iota]],1]],{"$"->"_","\[Sterling]"->""}]<>", "];
\[Chi]=\[Chi]<>\[Beta];
\[Lambda]=Drop[\[Lambda],\[Iota]];
If[Length[\[Lambda]]>0,\[Chi]=StringDrop[\[Chi],-1]<>"&\n",\[Chi]=StringInsert[StringDrop[\[Chi],-2]," );\n",-1]];\[Beta]="";
];
MADFileWrite[\[Chi]]]


(* ::Input::Initialization:: *)
MADXLineWrite[list_,linename_,Extra___]:=Block[{\[Lambda],\[Chi],\[Beta]},
symm=Symm/.{Extra}/.Options[MADLineWrite];
super=Super/.{Extra}/.Options[MADLineWrite];
\[Lambda]=Partition[Flatten[list],7];\[Chi]="";\[Beta]=StringReplace[ToString[linename],{"$"->"_","\[Sterling]"->""}]<>": Line= ( ";
While[Length[\[Lambda]]>0,
\[Iota]=0;
While[(\[Iota]+1)<=Length[\[Lambda]]&&StringLength[\[Beta]<>ToString[Part[Part[\[Lambda],(\[Iota]+1)],1]]]<70,\[Iota]+=1;\[Beta]=\[Beta]<>StringReplace[ToString[Part[Part[\[Lambda],\[Iota]],1]],{"$"->"_","\[Sterling]"->""}]<>", "];
\[Chi]=\[Chi]<>\[Beta];
\[Lambda]=Drop[\[Lambda],\[Iota]];
If[Length[\[Lambda]]>0,\[Chi]=StringDrop[\[Chi],-1]<>"\n",\[Chi]=StringInsert[StringDrop[\[Chi],-2]," );\n",-1]];\[Beta]="";
];
MADFileWrite[\[Chi]]]


(* ::Input::Initialization:: *)
SetAttributes[MADLines,HoldRest];


(* ::Input::Initialization:: *)
MADLines[file_,line_,Extra___]:=Block[{\[Lambda],\[Chi],\[Beta]},
symm=Symm/.{Extra}/.Options[MADLineWrite];
super=Super/.{Extra}/.Options[MADLineWrite];
linename=ToString[Unevaluated[HoldForm[line]]];
\[Lambda]=Partition[Flatten[line],7];\[Chi]="";\[Beta]=ToString[linename]<>": Line= ( ";
While[Length[\[Lambda]]>0,
\[Iota]=0;
While[(\[Iota]+1)<=Length[\[Lambda]]&&StringLength[\[Beta]<>Part[Part[\[Lambda],(\[Iota]+1)],1]]<70,\[Iota]+=1;\[Beta]=\[Beta]<>StringReplace[ToString[Part[Part[\[Lambda],\[Iota]],1]],{"$"->"_","\[Sterling]"->""}]<>", "];
\[Chi]=\[Chi]<>\[Beta];
\[Lambda]=Drop[\[Lambda],\[Iota]];
If[Length[\[Lambda]]>0,\[Chi]=StringDrop[\[Chi],-1]<>"&\n",\[Chi]=StringInsert[StringDrop[\[Chi],-2]," );\n",-1]];\[Beta]="";
];MADFileWrite[\[Chi],file];]


(* ::Input::Initialization:: *)
MADDeleteMultiple[list_List]:=Do[MADMultipleData=list;\[Alpha]=1;
While[\[Alpha]<=Length[MADMultipleData],
\[Chi]=Position[list,Part[list,\[Alpha]]];
\[Delta]=Position[MADMultipleData,Part[MADMultipleData,\[Alpha]]];
While[
Length[\[Delta]]>1,
MADMultipleData=Drop[MADMultipleData,{Part[Part[\[Delta],2],1]}];
\[Delta]=Position[MADMultipleData,Part[MADMultipleData,\[Alpha]]];
];
\[Alpha]+=1;];Return[MADMultipleData]]


(* ::Input::Initialization:: *)
MADWhatisit2[list_]:=If[Part[list,2]==="Quadrupole",
quadWrite[list],
If[Part[list,2]==="Drift",
driftWrite[list],
If[Part[list,2]==="SectorBend",
sbendWrite[list],
If[Part[list,2]==="RectBend",
rbendWrite[list],
If[Part[list,2]==="Sextupole",
sextWrite[list],
If[Part[list,2]==="Octupole",
octWrite[list],
If[Part[list,2]==="VKicker",
vkickWrite[list],
If[Part[list,2]==="HKicker",
hkickWrite[list],
If[Part[list,2]==="Kicker",
kickWrite[list],
If[Part[list,2]==="VBPM",
vbpmWrite[list],
If[Part[list,2]==="HBPM",
hbpmWrite[list],
If[Part[list,2]==="BPM",
bpmWrite[list],
If[Part[list,2]==="RFC",
rfcWrite[list],
If[Part[list,2]==="MULTIPOLE",
multipoleWrite[list]
]]]]]]]]]]]]]]


(* ::Input::Initialization:: *)
MADWhatisit[list_]:=Block[{data=list[[2]]},
Switch[data,"Quadrupole",quadWrite[list],
"Drift",driftWrite[list],
"CSRDrift",driftWrite[list],
"SectorBend",sbendWrite[list],
"CSectorBend",sbendWrite[list],
"CSRCSectorBend",sbendWrite[list],
"RectBend",rbendWrite[list],
"Sextupole",sextWrite[list],
"Octupole",octWrite[list],
"VKicker",vkickWrite[list],
"HKicker",hkickWrite[list],
"Kicker",kickWrite[list],
"VBPM",vbpmWrite[list],
"HBPM",hbpmWrite[list],
"BPM",bpmWrite[list],
"Monitor",monitorWrite[list],
"IMonitor",imonitorWrite[list],
"Profile",profileWrite[list],
"Wire",wireWrite[list],
"Instrument",instrumentWrite[list],
"RFC",rfcWrite[list],
"MULTIPOLE",multipoleWrite[list],
"Marker",markerWrite[list],
"ECOLLIMATOR",ecollWrite[list],
"RCOLLIMATOR",rcollWrite[list],
"YROT",yrotWrite[list],
"SROT",srotWrite[list],
"Line",lineWrite[list],
"ReversedLine",lineWriteReverse[list],
"LCAV",lcavWrite[list],
"MATRIX",matrixWrite[list],
"Solenoid",solenoidWrite[list],
"FreeText",freetextWrite[list],
"GWiggler",driftWrite[list]
]]


(* ::Input::Initialization:: *)
MADStringWrite[filename_,data_]:=Block[{datafile},
MADFileName=If[StringTake[filename,-3]==="mff"||StringTake[filename,-3]==="mfx",filename,ToString[filename]<>".mff"];
datafile=OpenAppend[MADFileName];
WriteString[datafile,data];
Close[datafile]]


(* ::Input::Initialization:: *)
MADXStringWrite[filename_,data_]:=Block[{datafile},
MADFileName=If[StringTake[filename,-3]==="mfx",filename,ToString[filename]<>".mfx"];
datafile=OpenAppend[MADFileName];
WriteString[datafile,data];
Close[datafile]]


(* ::Input::Initialization:: *)
MADFileWrite[data_,filename_:MADFileName]:=Block[{datafile},
datafile=OpenAppend[MADFileName];
WriteString[datafile,data];
Close[datafile];
]


(* ::Input::Initialization:: *)
MADString[inputstring_String]:=Block[{string=inputstring,string2="",stringpos},
stringpos:=Last[Select[StringPosition[string,","][[All,1]],#<80&]];
If[MADXSwitch===True,
While[StringLength[string]>80,string2=StringJoin[string2,StringTake[string,stringpos]<>"\n"];string=StringDrop[string,stringpos]];,
While[StringLength[string]>80,string2=StringJoin[string2,StringTake[string,stringpos]<>"&\n"];string=StringDrop[string,stringpos];]];
string2=StringReplace[StringJoin[string2,string],{" "->"","$"->"_","\[Sterling]"->""}];
string2]


(* ::Input::Initialization:: *)
quadWrite[quad_]:=MADFileWrite[MADString[ToString[Part[quad,1]]<>": QUADRUPOLE, L="<>ToString[NumberRight@Part[quad,3]]<>", K1="<>ToString[NumberRight@Part[quad,4]]<>
 If[Part[quad,7]=!="",", Type="<>ToString[Part[quad,7]],""]<>If[Evaluate[Symbol@(ToString[Part[quad,1]]<>"Extra")][[5]]=!=0,",Tilt="<>(ToString[Evaluate[Symbol@(ToString[Part[quad,1]]<>"Extra")][[5]]]),""]<>";\n"]]


(* ::Input::Initialization:: *)
solenoidWrite[sol_]:=MADFileWrite[MADString[ToString[Part[sol,1]]<>": SOLENOID, L="<>ToString[NumberRight@Part[sol,3]]<>", KS="<>ToString[NumberRight@Part[sol,4]]<>
 If[Part[sol,7]=!="",", Type="<>ToString[Part[sol,7]],""]<>If[Evaluate[Symbol@(ToString[Part[sol,1]]<>"Extra")][[5]]=!=0,",Tilt="<>(ToString[Evaluate[Symbol@(ToString[Part[sol,1]]<>"Extra")][[5]]]),""]<>";\n"]]


(* ::Input::Initialization:: *)
lineWrite[line_]:=MADFileWrite[MADString[ToString[Part[line,1]]<>": LINE="<>"("<>If[Evaluate[Symbol@(ToString[Part[line,1]]<>"Extra")][[4]]>1,ToString[Evaluate[Symbol@(ToString[Part[line,1]]<>"Extra")][[4]]]<>"*(",""]<>StringReplace[ToString[mflat[Evaluate[Symbol@(ToString[Part[line,1]]<>"Extra")][[3]]][[All,1]]],{"{"->"","}"->"","  "->" "}]<>If[Evaluate[Symbol@(ToString[Part[line,1]]<>"Extra")][[4]]>1,")",""]<>");\n"]]


(* ::Input::Initialization:: *)
lineWriteReverse[line_]:=MADFileWrite[MADString[ToString[Part[line,1]]<>": LINE="<>StringReplace[ToString[Reverse[mflat[Evaluate[Symbol@(ToString[Part[line,1]]<>"Extra")][[3]]]][[All,1]]],{"{"->"(","}"->")","  "->" "}]<>";\n"]]


(* ::Input::Initialization:: *)
yrotWrite[yrot_]:=MADFileWrite[MADString[ToString[Part[yrot,1]]<>": YROT, ANGLE="<>ToString[NumberRight@Part[yrot,6]]<>
 If[Part[yrot,7]=!="",", Type="<>ToString[Part[yrot,7]],""]<>";\n"]]


(* ::Input::Initialization:: *)
srotWrite[srot_]:=MADFileWrite[MADString[ToString[Part[srot,1]]<>": SROT, ANGLE="<>ToString[NumberRight@Part[srot,6]]<>
 If[Part[srot,7]=!="",", Type="<>ToString[Part[srot,7]],""]<>";\n"]]


(* ::Input::Initialization:: *)
sextWrite[sext_]:=MADFileWrite[MADString[ToString[Part[sext,1]]<>": SEXTUPOLE, L="<>ToString[NumberRight@Part[sext,3]]<>", K2="<>ToString[NumberRight@Part[sext,4]]<> If[Part[sext,7]=!="",", Type="<>ToString[Part[sext,7]],""]<>If[Evaluate[Symbol@(ToString[Part[sext,1]]<>"Extra")][[5]]=!=0,",Tilt="<>(ToString[Evaluate[Symbol@(ToString[Part[sext,1]]<>"Extra")][[5]]]),""]<>";\n"]]


(* ::Input::Initialization:: *)
driftWrite[drift_]:=MADFileWrite[MADString[ToString[Part[drift,1]]<>": DRIFT, L="<>ToString[NumberRight@Part[drift,3]]<> If[Part[drift,7]=!="",", Type="<>ToString[Part[drift,7]]<>";\n",";\n"]]]


(* ::Input::Initialization:: *)
ecollWrite[ecoll_]:=MADFileWrite[MADString[ToString[Part[ecoll,1]]<>": ECOLLIMATOR, L="<>ToString[NumberRight@Part[ecoll,3]]<>", XSIZE="<>ToString[NumberRight@Part[ecoll,5]]<>", YSIZE="<>ToString[NumberRight@Part[ecoll,6]]<>
 If[Part[ecoll,7]=!="",", Type="<>ToString[Part[ecoll,7]],""]<>";\n"]]


(* ::Input::Initialization:: *)
rcollWrite[rcoll_]:=MADFileWrite[MADString[ToString[Part[rcoll,1]]<>": RCOLLIMATOR, L="<>ToString[NumberRight@Part[rcoll,3]]<>", XSIZE="<>ToString[NumberRight@Part[rcoll,5]]<>", YSIZE="<>ToString[NumberRight@Part[rcoll,6]]<>
 If[Part[rcoll,7]=!="",", Type="<>ToString[Part[rcoll,7]],""]<>";\n"]]


(* ::Input::Initialization:: *)
markerWrite[marker_]:=MADFileWrite[MADString[ToString[Part[marker,1]]<>": MARKER,"<> If[Part[marker,7]=!="","Type="<>ToString[Part[marker,7]],""]<>";\n"]]


(* ::Input::Initialization:: *)
sbendWrite[sbend_]:=MADFileWrite[MADString[ToString[Part[sbend,1]]<>": SBEND, L="<>ToString[NumberRight@Part[sbend,3]]<>", K1="<>ToString[NumberRight@Part[sbend,4]]<> ", Angle="<>ToString[NumberRight@Part[sbend,6]]<>If[Part[sbend,7]=!="",", Type="<>ToString[Part[sbend,7]],""]<>
If[Evaluate[Symbol@(ToString[Part[sbend,1]]<>"Extra")][[5]]=!=0,",E1="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[sbend,1]]<>"Extra")][[5]]]),""]<>
If[Evaluate[Symbol@(ToString[Part[sbend,1]]<>"Extra")][[6]]=!=0,",E2="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[sbend,1]]<>"Extra")][[6]]]),""]<>If[Evaluate[Symbol@(ToString[Part[sbend,1]]<>"Extra")][[7]]=!=0,",Tilt="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[sbend,1]]<>"Extra")][[7]]]),""]<>If[Evaluate[Symbol@(ToString[Part[sbend,1]]<>"Extra")][[8]]=!=0,",K2="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[sbend,1]]<>"Extra")][[8]]]),""]<>If[Evaluate[Symbol@(ToString[Part[sbend,1]]<>"Extra")][[9]]=!=0,",H1="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[sbend,1]]<>"Extra")][[9]]]),""]<>If[Evaluate[Symbol@(ToString[Part[sbend,1]]<>"Extra")][[10]]=!=0,",HGap="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[sbend,1]]<>"Extra")][[10]]]),""]<>If[Evaluate[Symbol@(ToString[Part[sbend,1]]<>"Extra")][[11]]=!=0,",FInt="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[sbend,1]]<>"Extra")][[11]]]),""]<>If[Evaluate[Symbol@(ToString[Part[sbend,1]]<>"Extra")][[12]]=!=0,",K3="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[sbend,1]]<>"Extra")][[12]]]),""]<>
If[Evaluate[Symbol@(ToString[Part[sbend,1]]<>"Extra")][[13]]=!=0,",FIntx="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[sbend,1]]<>"Extra")][[13]]]),""]<>";\n"]]


(* ::Input::Initialization:: *)
rbendWrite[rbend_]:=MADFileWrite[MADString[ToString[Part[rbend,1]]<>": RBEND, L="<>ToString[NumberRight@Part[rbend,3]]<>", K1="<>ToString[NumberRight@Part[rbend,4]]<> ", Angle="<>ToString[NumberRight@Part[rbend,6]]<>If[Part[rbend,7]=!="",", Type="<>ToString[Part[rbend,7]],""]<>
If[Evaluate[Symbol@(ToString[Part[rbend,1]]<>"Extra")][[5]]=!=0,",E1="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[rbend,1]]<>"Extra")][[5]]]),""]<>
If[Evaluate[Symbol@(ToString[Part[rbend,1]]<>"Extra")][[6]]=!=0,",E2="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[rbend,1]]<>"Extra")][[6]]]),""]<>If[Evaluate[Symbol@(ToString[Part[rbend,1]]<>"Extra")][[7]]=!=0,",Tilt="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[rbend,1]]<>"Extra")][[7]]]),""]<>If[Evaluate[Symbol@(ToString[Part[rbend,1]]<>"Extra")][[8]]=!=0,",K2="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[rbend,1]]<>"Extra")][[8]]]),""]<>If[Evaluate[Symbol@(ToString[Part[rbend,1]]<>"Extra")][[9]]=!=0,",H1="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[rbend,1]]<>"Extra")][[9]]]),""]<>If[Evaluate[Symbol@(ToString[Part[rbend,1]]<>"Extra")][[10]]=!=0,",HGap="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[rbend,1]]<>"Extra")][[10]]]),""]<>If[Evaluate[Symbol@(ToString[Part[rbend,1]]<>"Extra")][[11]]=!=0,",FInt="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[rbend,1]]<>"Extra")][[11]]]),""]<>If[Evaluate[Symbol@(ToString[Part[rbend,1]]<>"Extra")][[12]]=!=0,",K3="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[rbend,1]]<>"Extra")][[12]]]),""]<>
If[Evaluate[Symbol@(ToString[Part[rbend,1]]<>"Extra")][[13]]=!=0,",FIntx="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[rbend,1]]<>"Extra")][[13]]]),""]<>";\n"]]


(* ::Input::Initialization:: *)
octWrite[oct_]:=MADFileWrite[MADString[ToString[Part[oct,1]]<>": OCTUPOLE, L="<>ToString[NumberRight@Part[oct,3]]<>", K3="<>ToString[NumberRight@Part[oct,4]]<> If[Part[oct,7]=!="",", Type="<>ToString[Part[oct,7]],""]<>If[Evaluate[Symbol@(ToString[Part[oct,1]]<>"Extra")][[5]]=!=0,",Tilt="<>(ToString[Evaluate[Symbol@(ToString[NumberRight@Part[oct,1]]<>"Extra")][[5]]]),""]<>";\n"]]


(* ::Input::Initialization:: *)
vkickWrite[kick_]:=MADFileWrite[MADString[ToString[Part[kick,1]]<>": VKICKER, L="<>ToString[NumberRight@Part[kick,3]]<>", Kick="<>ToString[NumberRight@Part[kick,5]]<> If[Part[kick,7]=!="",", Type="<>ToString[Part[kick,7]],""]<>If[Evaluate[Symbol@(ToString[Part[kick,1]]<>"Extra")][[5]]=!=0,",Tilt="<>(ToString[Evaluate[Symbol@(ToString[Part[kick,1]]<>"Extra")][[5]]]),""]<>";\n"]]


(* ::Input::Initialization:: *)
hkickWrite[kick_]:=MADFileWrite[MADString[ToString[Part[kick,1]]<>": HKICKER, L="<>ToString[NumberRight@Part[kick,3]]<>", Kick="<>ToString[NumberRight@Part[kick,6]]<> If[Part[kick,7]=!="",", Type="<>ToString[Part[kick,7]],""]<>If[Evaluate[Symbol@(ToString[Part[kick,1]]<>"Extra")][[5]]=!=0,",Tilt="<>(ToString[Evaluate[Symbol@(ToString[Part[kick,1]]<>"Extra")][[5]]]),""]<>";\n"]]


(* ::Input::Initialization:: *)
kickWrite[kick_]:=MADFileWrite[MADString[ToString[Part[kick,1]]<>": KICKER, L="<>ToString[NumberRight@Part[kick,3]]<>", VKick="<>ToString[NumberRight@Part[kick,5]]<>", HKick="<>ToString[NumberRight@Part[kick,6]]<> If[Part[kick,7]=!="",", Type="<>ToString[Part[kick,7]],""]<>If[Evaluate[Symbol@(ToString[Part[kick,1]]<>"Extra")][[5]]=!=0,",Tilt="<>(ToString[Evaluate[Symbol@(ToString[Part[kick,1]]<>"Extra")][[5]]]),""]<>";\n"]]


(* ::Input::Initialization:: *)
vbpmWrite[vbpm_]:=MADFileWrite[MADString[ToString[Part[vbpm,1]]<>": VMONITOR, L="<>ToString[NumberRight@Part[vbpm,3]]<>If[Part[vbpm,7]=!="",", Type="<>ToString[Part[vbpm,7]],""]<>If[Evaluate[Symbol@(ToString[Part[vbpm,1]]<>"Extra")][[5]]=!=0,",Tilt="<>(ToString[Evaluate[Symbol@(ToString[Part[vbpm,1]]<>"Extra")][[5]]]),""]<>";\n"]]


(* ::Input::Initialization:: *)
hbpmWrite[hbpm_]:=MADFileWrite[MADString[ToString[Part[hbpm,1]]<>": HMONITOR, L="<>ToString[NumberRight@Part[hbpm,3]]<>If[Part[hbpm,7]=!="",", Type="<>ToString[Part[hbpm,7]],""]<>If[Evaluate[Symbol@(ToString[Part[hbpm,1]]<>"Extra")][[5]]=!=0,",Tilt="<>(ToString[Evaluate[Symbol@(ToString[Part[hbpm,1]]<>"Extra")][[5]]]),""]<>";\n"]]


(* ::Input::Initialization:: *)
bpmWrite[bpm_]:=MADFileWrite[MADString[ToString[Part[bpm,1]]<>": MONITOR, L="<>ToString[Part[bpm,3]]<>If[Part[bpm,7]=!="",", Type="<>ToString[Part[bpm,7]],""]<>If[Evaluate[Symbol@(ToString[Part[bpm,1]]<>"Extra")][[5]]=!=0,",Tilt="<>(ToString[Evaluate[Symbol@(ToString[Part[bpm,1]]<>"Extra")][[5]]]),""]<>";\n"]]


(* ::Input::Initialization:: *)
imonitorWrite[bpm_]:=MADFileWrite[MADString[ToString[Part[bpm,1]]<>": IMONITOR, L="<>ToString[Part[bpm,3]]<>If[Part[bpm,7]=!="",", Type="<>ToString[Part[bpm,7]],""]<>If[Evaluate[Symbol@(ToString[Part[bpm,1]]<>"Extra")][[5]]=!=0,",Tilt="<>(ToString[Evaluate[Symbol@(ToString[Part[bpm,1]]<>"Extra")][[5]]]),""]<>";\n"]]


(* ::Input::Initialization:: *)
monitorWrite[bpm_]:=MADFileWrite[MADString[ToString[Part[bpm,1]]<>": MONITOR"<>If[Part[bpm,7]=!="",", Type="<>ToString[Part[bpm,7]],""]<>If[Evaluate[Symbol@(ToString[Part[bpm,1]]<>"Extra")][[5]]=!=0,",Tilt="<>(ToString[Evaluate[Symbol@(ToString[Part[bpm,1]]<>"Extra")][[5]]]),""]<>";\n"]]


(* ::Input::Initialization:: *)
profileWrite[bpm_]:=MADFileWrite[MADString[ToString[Part[bpm,1]]<>": PROFILE, L="<>ToString[Part[bpm,3]]<>If[Part[bpm,7]=!="",", Type="<>ToString[Part[bpm,7]],""]<>If[Evaluate[Symbol@(ToString[Part[bpm,1]]<>"Extra")][[5]]=!=0,",Tilt="<>(ToString[Evaluate[Symbol@(ToString[Part[bpm,1]]<>"Extra")][[5]]]),""]<>";\n"]]


(* ::Input::Initialization:: *)
wireWrite[wire_]:=MADFileWrite[MADString[ToString[Part[wire,1]]<>": WIRE,"<>If[Part[wire,3]=!=""," L="<>ToString[Part[wire,3]],""]<>If[Part[wire,7]=!="",", Type="<>ToString[Part[wire,7]],""]<>";\n"]]


(* ::Input::Initialization:: *)
instrumentWrite[instrument_]:=MADFileWrite[MADString[ToString[Part[instrument,1]]<>": INSTRUMENT,"<>If[Part[instrument,3]=!=""," L="<>ToString[Part[instrument,3]],""]<>If[Part[instrument,7]=!="",", Type="<>ToString[Part[instrument,7]],""]<>";\n"]]


(* ::Input::Initialization:: *)
rfcWrite[rfc_]:=MADFileWrite[MADString[ToString[Part[rfc,1]]<>": RFCAVITY, L="<>ToString[NumberRight@Part[rfc,3]]<>If[Part[rfc,7]=!="",", Type="<>ToString[NumberRight@Part[rfc,7]],""]<>
If[Evaluate[Symbol@(ToString[Part[rfc,1]]<>"Extra")][[5]]=!=0,",Volt="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[rfc,1]]<>"Extra")][[5]]]),""]<>
If[Evaluate[Symbol@(ToString[Part[rfc,1]]<>"Extra")][[6]]=!=0,",Lag="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[rfc,1]]<>"Extra")][[6]]]),""]<>If[Evaluate[Symbol@(ToString[Part[rfc,1]]<>"Extra")][[7]]=!=0,",Harmon="<>(ToString[Evaluate[Symbol@(ToString[Part[rfc,1]]<>"Extra")][[7]]]),""]<>If[Evaluate[Symbol@(ToString[Part[rfc,1]]<>"Extra")][[8]]=!=0,",Betrf="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[rfc,1]]<>"Extra")][[8]]]),""]<>If[Evaluate[Symbol@(ToString[Part[rfc,1]]<>"Extra")][[9]]=!=0,",Pg="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[rfc,1]]<>"Extra")][[9]]]),""]<>If[Evaluate[Symbol@(ToString[Part[rfc,1]]<>"Extra")][[10]]=!=0,",Shunt="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[rfc,1]]<>"Extra")][[10]]]),""]<>If[Evaluate[Symbol@(ToString[Part[rfc,1]]<>"Extra")][[11]]=!=0,",Tfill="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[rfc,1]]<>"Extra")][[11]]]),""]<>
If[Evaluate[Symbol@(ToString[Part[rfc,1]]<>"Extra")][[12]]=!=0,",Freq="<>(ToString[NumberRight@Evaluate[Symbol@(ToString[Part[rfc,1]]<>"Extra")][[12]]]),""]<>
";\n"]]


(* ::Input::Initialization:: *)
matrixWrite[mat_]:=MADFileWrite[MADString[StringJoin[ToString[Part[mat,1]],": MATRIX",If[Part[mat,7]=!="",", Type="<>ToString[Part[mat,7]],""],If[Evaluate[Symbol@(ToString[Part[mat,1]]<>"Extra")][[3]]=!={},",",""],
Apply[Sequence,Map[StringJoin[StringReplace[ToString[First[#]],{"["->"(","]"->")"}],"=",ToString[NumberRight@Part[#,2]],",&\n"]&,Evaluate[Symbol@(ToString[Part[mat,1]]<>"Extra")][[3]]]],
If[Evaluate[Symbol@(ToString[Part[mat,1]]<>"Extra")][[4]]=!={},",",""],Apply[Sequence,Map[StringJoin[",",StringReplace[ToString[First[#]],{"["->"(","]"->")"}],"=",ToString[NumberRight@Part[#,2]]]&,Evaluate[Symbol@(ToString[Part[mat,1]]<>"Extra")][[4]]]],
If[Evaluate[Symbol@(ToString[Part[mat,1]]<>"Extra")][[5]]=!={},",",""],Apply[Sequence,Map[StringJoin[StringReplace[ToString[First[#]],{"["->"(","]"->")"}],"=",ToString[NumberRight@Part[#,2]],",&\n"]&,Evaluate[Symbol@(ToString[Part[mat,1]]<>"Extra")][[5]]]]";\n"]]]


(* ::Input::Initialization:: *)
lcavWrite[lcav_]:=MADFileWrite[MADString[ToString[Part[lcav,1]]<>": LCAVITY, L="<>ToString[Part[lcav,3]]<>If[Part[lcav,7]=!="",", Type="<>ToString[Part[lcav,7]],""]<>
If[Evaluate[Symbol@(ToString[Part[lcav,1]]<>"Extra")][[5]]=!=0,",DELTAE="<>(ToString[Evaluate[Symbol@(ToString[Part[lcav,1]]<>"Extra")][[5]]]),""]<>
If[Evaluate[Symbol@(ToString[Part[lcav,1]]<>"Extra")][[6]]=!=0,",PHI0="<>(ToString[Evaluate[Symbol@(ToString[Part[lcav,1]]<>"Extra")][[6]]]),""]<>If[Evaluate[Symbol@(ToString[Part[lcav,1]]<>"Extra")][[7]]=!=0,",FREQ="<>(ToString[Evaluate[Symbol@(ToString[Part[lcav,1]]<>"Extra")][[7]]]),""]<>If[Evaluate[Symbol@(ToString[Part[lcav,1]]<>"Extra")][[8]]=!=0,",ELOSS="<>(ToString[Evaluate[Symbol@(ToString[Part[lcav,1]]<>"Extra")][[8]]]),""]<>If[Evaluate[Symbol@(ToString[Part[lcav,1]]<>"Extra")][[9]]=!=0,",VOLTERR="<>(ToString[Evaluate[Symbol@(ToString[Part[lcav,1]]<>"Extra")][[9]]]),""]<>If[Evaluate[Symbol@(ToString[Part[lcav,1]]<>"Extra")][[10]]=!=0,",LAGERR="<>(ToString[Evaluate[Symbol@(ToString[Part[lcav,1]]<>"Extra")][[10]]]),""]<>If[Evaluate[Symbol@(ToString[Part[lcav,1]]<>"Extra")][[11]]=!=0,",NBIN="<>(ToString[Evaluate[Symbol@(ToString[Part[lcav,1]]<>"Extra")][[11]]]),""]<>
If[Evaluate[Symbol@(ToString[Part[lcav,1]]<>"Extra")][[12]]=!=0,",BINMAX="<>(ToString[Evaluate[Symbol@(ToString[Part[lcav,1]]<>"Extra")][[12]]]),""]<>
If[Evaluate[Symbol@(ToString[Part[lcav,1]]<>"Extra")][[13]]=!="",",LFILE="<>(ToString[Evaluate[Symbol@(ToString[Part[lcav,1]]<>"Extra")][[13]]]),""]<>
If[Evaluate[Symbol@(ToString[Part[lcav,1]]<>"Extra")][[14]]=!="",",TFILE="<>(ToString[Evaluate[Symbol@(ToString[Part[lcav,1]]<>"Extra")][[14]]]),""]<>
";\n"]]


(* ::Input::Initialization:: *)
multipoleWrite[multipole_]:=MADFileWrite[MADString[ToString[Part[multipole,1]]<>": MULTIPOLE"<>
If[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[5]]=!=0,",LRAD="<>(ToString[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[5]]]),""]<>
If[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[6]]=!=0,",K0L="<>(ToString[NumberForm[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[6]],ExponentFunction->(Null&)]]),""]<>If[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[7]]=!=0,",T0="<>(ToString[NumberForm[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[7]],ExponentFunction->(Null&)]]),""]<>If[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[8]]=!=0,",K1L="<>(ToString[NumberForm[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[8]],ExponentFunction->(Null&)]]),""]<>If[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[9]]=!=0,",T1="<>(ToString[NumberForm[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[9]],ExponentFunction->(Null&)]]),""]<>If[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[10]]=!=0,",K2L="<>(ToString[NumberForm[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[10]],ExponentFunction->(Null&)]]),""]<>If[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[11]]=!=0,",T2="<>(ToString[NumberForm[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[11]],ExponentFunction->(Null&)]]),""]<>
If[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[12]]=!=0,",K3L="<>(ToString[NumberForm[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[12]],ExponentFunction->(Null&)]]),""]<>If[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[13]]=!=0,",T3="<>(ToString[NumberForm[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[13]],ExponentFunction->(Null&)]]),""]<>
If[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[14]]=!=0,",K4L="<>(ToString[NumberForm[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[14]],ExponentFunction->(Null&)]]),""]<>If[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[15]]=!=0,",T4="<>(ToString[NumberForm[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[15]],ExponentFunction->(Null&)]]),""]<>
If[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[16]]=!=0,",K5L="<>(ToString[NumberForm[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[16]],ExponentFunction->(Null&)]]),""]<>If[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[17]]=!=0,",T5="<>(ToString[NumberForm[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[17]],ExponentFunction->(Null&)]]),""]<>
If[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[18]]=!=0,",K6L="<>(ToString[NumberForm[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[18]],ExponentFunction->(Null&)]]),""]<>If[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[19]]=!=0,",T6="<>(ToString[NumberForm[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[19]],ExponentFunction->(Null&)]]),""]<>
If[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[20]]=!=0,",K7L="<>(ToString[NumberForm[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[20]],ExponentFunction->(Null&)]]),""]<>If[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[21]]=!=0,",T7="<>(ToString[NumberForm[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[21]],ExponentFunction->(Null&)]]),""]<>
If[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[22]]=!=0,",K8L="<>(ToString[NumberForm[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[22]],ExponentFunction->(Null&)]]),""]<>If[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[23]]=!=0,",T8="<>(ToString[NumberForm[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[23]],ExponentFunction->(Null&)]]),""]<>
If[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[24]]=!=0,",K9L="<>(ToString[NumberForm[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[24]],ExponentFunction->(Null&)]]),""]<>If[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[25]]=!=0,",T9="<>(ToString[NumberForm[Evaluate[Symbol@(ToString[Part[multipole,1]]<>"Extra")][[25]],ExponentFunction->(Null&)]]),""]<>
";\n"]]


(* ::Input::Initialization:: *)
freetextWrite[freetext_]:=MADFileWrite[MADString[Evaluate[Symbol@(ToString[Part[freetext,1]]<>"Extra")][[3]]<>";\n"]]


(* ::Input::Initialization:: *)
MADBeam[opts___]:=Block[{particle,mass,charge,energy,pc,gamma,ex,exn,ey,eyn,et,sigt,sige,kbunch,npart,bcurrent,bunched,radiate,ptrue,etrue,newline=0},
particle=Particle/.{opts}/.Options[MADBeam];
If[StringMatchQ[ToString[particle],"electron",IgnoreCase->True],ptrue=1];
If[StringMatchQ[ToString[particle],"positron",IgnoreCase->True],ptrue=1];
If[StringMatchQ[ToString[particle],"proton",IgnoreCase->True],ptrue=1];
If[StringMatchQ[ToString[particle],"anti-proton",IgnoreCase->True],ptrue=1];
mass=Mass/.{opts}/.Options[MADBeam];
charge=Charge/.{opts}/.Options[MADBeam];
energy=Energy/.{opts}/.Options[MADBeam];
If[ptrue===1,mass=0;charge=0];
pc=Pc/.{opts}/.Options[MADBeam];
gamma=Gamma/.{opts}/.Options[MADBeam];
ex=Ex/.{opts}/.Options[MADBeam];
ey=Ey/.{opts}/.Options[MADBeam];
et=Et/.{opts}/.Options[MADBeam];
exn=Exn/.{opts}/.Options[MADBeam];
eyn=Eyn/.{opts}/.Options[MADBeam];
sigt=Sigt/.{opts}/.Options[MADBeam];
sige=Sige/.{opts}/.Options[MADBeam];
kbunch=KBunch/.{opts}/.Options[MADBeam];
npart=NPart/.{opts}/.Options[MADBeam];
bcurrent=BCurrent/.{opts}/.Options[MADBeam];
bunched=Bunched/.{opts}/.Options[MADBeam];
radiate=Radiate/.{opts}/.Options[MADBeam];

beamline="Beam,"<>"Particle="<>ToString[particle]<>If[StringMatchQ[ToString[particle],"electron",IgnoreCase->True]||StringMatchQ[ToString[particle],"positron",IgnoreCase->True]||StringMatchQ[ToString[particle],"proton",IgnoreCase->True]||StringMatchQ[ToString[particle],"anti-proton",IgnoreCase->True],"",",charge="<>ToString[NumberRight[charge]]<>",mass="<>ToString[NumberRight[mass]]]<>
If[energy=!=0,",energy="<>ToString[NumberRight[energy]],""]<>
If[pc=!=0,",pc="<>ToString[NumberRight[pc]],""]<>
If[gamma=!=0,",gamma="<>ToString[NumberRight[gamma]],""]<>
If[ex=!=0,",ex="<>ToString[NumberRight[ex]],""]<>
If[ey=!=0,",ey="<>ToString[NumberRight[ey]],""]<>
If[et=!=0,",et="<>ToString[NumberRight[et]],""]<>
If[ex===0||ey===0,
If[exn=!=0,",exn="<>ToString[NumberRight[exn]],""]<>
If[eyn=!=0,",eyn="<>ToString[NumberRight[eyn]],""]
,""]<>
If[sige=!=0,",sige="<>ToString[NumberRight[sige]],""]<>
If[sigt=!=0,",sigt="<>ToString[NumberRight[sigt]],""]<>
If[kbunch=!=0,",kbunch="<>ToString[NumberRight[kbunch]],""]<>
If[npart=!=0,",npart="<>ToString[NumberRight[npart]],""]<>
If[bcurrent=!=0,",bcurrent="<>ToString[NumberRight[bcurrent]],""]<>
If[bunched===True,",&\nbunched=True",""]<>
If[radiate===True,",radiate=True",""]<>";\n";
MADStringWrite[MADFileName,beamline]
]


(* ::Input::Initialization:: *)
MADUseMonitors[data_,opts___]:=
Block[{monuse},
MADStringWrite[MADFileName,"usemonitor,on,"<>ToString[#]<>";\n"]& /@opts;]


(* ::Input::Initialization:: *)
MADMonitors[data_,opts___]:=Block[{},
Print["These Monitors are available:"];
MADElementFind[data,Elements->True,Equals->{{2,"HBPM"},{2,"VBPM"},{2,"BPM"}},Monitor->True,TableHeadings->{Automatic,{"Name","Element","Length","Focus","VAngle","HAngle","Type","Position"}}];
]


(* ::Input::Initialization:: *)
MADElementFind[data_,Extra___]:=Block[{data2,pos,equaldata,greatdata,lesserdata,equals,greater,less,MADelementlist,columns,optTable,ApertureListx,ApertureListxy,apertures},pos=Pos/. {Extra};equaldata=Equals/. {Extra};greatdata=Greater/. {Extra};lesserdata=Less/. {Extra};columns=Columns/. {Extra};apertures=Apertures/. {Extra};sortcolumn=SortBy/. {Extra}/. {SortBy->8};If[columns===Columns,columns=Length[data[[1]]]];optTable=Sequence@@FilterRules[Flatten[{Extra}],Options[TableForm]];If[(Elements/. {Extra})===True,MADLengthAdd[data];columns=8;AppendTo[{optTable},TableHeadings->{Automatic,{"Name","Element","Length","Focus","VAngle","HAngle","Type","Position"}}],MADInfoData=Partition[Flatten[data],columns];AppendTo[{optTable},TableHeadings->Automatic];];If[(Equals/. {Extra})=!=Equals,If[ListQ[equaldata]&&Length[Flatten[equaldata]]>2,equals=(Extract[MADInfoData,Position[MADInfoData[[All,#1[[1]]]],#1[[2]]]]&)/@equaldata,If[ListQ[equaldata]&&Length[Flatten[equaldata]]===2,equals=Select[MADInfoData,#1[[equaldata[[1]]]]===equaldata[[2]]&],equals=Select[MADInfoData,#1[[pos]]===equaldata&]]],equals={}];If[(Greater/. {Extra})=!=Greater,If[ListQ[greatdata]&&Length[Flatten[greatdata]]>2,greater=Union[(Extract[MADInfoData,data2=#1[[2]];Position[MADInfoData[[All,#1[[1]]]],_?(#1>data2&)]]&)/@greatdata],If[ListQ[greatdata]&&Length[Flatten[greatdata]]===2,greater=Select[MADInfoData,#1[[greatdata[[1]]]]>greatdata[[2]]&],greater=Select[MADInfoData,#1[[pos]]>greatdata&]]],greater={}];If[(Less/. {Extra})=!=Less,If[ListQ[lesserdata]&&Length[Flatten[lesserdata]]>2,less=Union[(Extract[MADInfoData,data2=#1[[2]];Position[MADInfoData[[All,#1[[1]]]],_?(#1<data2&)]]&)/@lesserdata],If[ListQ[lesserdata]&&Length[Flatten[lesserdata]]===2,less=Select[MADInfoData,#1[[lesserdata[[1]]]]<lesserdata[[2]]&],less=Select[MADInfoData,#1[[pos]]<lesserdata&]]],less={}];If[(Equals/. {Extra})=!=Equals||(Greater/. {Extra})=!=Greater||(Less/. {Extra})=!=Less,MADelementlist=Sort[Partition[Flatten[{equals,greater,less}],columns],#1[[sortcolumn]]<#2[[sortcolumn]]&];,MADelementlist=MADInfoData;];If[apertures===True,ApertureListx=(Evaluate[Symbol[ToString[#1[[1]]]<>"Extra"]][[3]]&)/@MADelementlist;ApertureListy=(Evaluate[Symbol[ToString[#1[[1]]]<>"Extra"]][[4]]&)/@MADelementlist;MADelementlist=Partition[Flatten[MapThread[List,{MADelementlist,ApertureListx,ApertureListy}]],columns+2];];Print[\!\(\*
TagBox["MADelementlist",
Function[BoxForm`e$, TableForm[BoxForm`e$, NotebookCompatibility`Dump`Symbols`optTable]]]\)];If[(Elements/. {Extra})===True&&(Monitor/. {Extra})=!=True,MADSumLength[MADelementlist]];If[(Monitor/. {Extra})===True,MADmonlist=MADelementlist];]


(* ::Input::Initialization:: *)
MADOrbitPlotFile[file_String,line_:MADLineName]:=Module[{a,b,c,d,ex,fx,gx,ey,fy,gy,x},
Do[
x=(ReadList[file,Word,WordSeparators->{" "},NullWords->False]);
a=(Drop[x,(Part[Part[Position[x,"TIME"],1],1]+2)]);
b=(Partition[a,4]);
c=(Drop[#,{4}]&/@b);
d=(Drop[#,{1}]&/@c);
ex=(Part[#,1]&/@d);
fx=(DeleteCases[ex,"0.00000"]);
gx=(ReadList[StringToStream[#],Number]&/@fx);
MADOrbitDatax=Flatten[gx];
ey=(Part[#,2]&/@d);
fy=(DeleteCases[ey,"0.00000"]);
gy=(ReadList[StringToStream[#],Number]&/@fy);
MADOrbitDatay=(Flatten[gy]);
MADOrbitPlotLine[line]]]


(* ::Input::Initialization:: *)
MADOrbitPlotLine[line_:ToString[MADLineName]]:=Module[{a,by,bx,cy,cx},Do[MADmakeMonitorList[line];a=MADmonlist;by=DeleteCases[a,{_,"HBPM",_,_,_,_,_,_}];bx=DeleteCases[a,{_,"VBPM",_,_,_,_,_,_}];cy=(#1[[8]]&)/@by;Print[cy];cx=(#1[[8]]&)/@bx;dx=MapThread[List,{cx,MADOrbitDatax}];dy=MapThread[List,{cy,MADOrbitDatay}];ListPlot[{dx,dy},Joined->True,AxesLabel->{"S (m)","Deviation (mm)"},PlotLegend->{"x","y"}]]]


(* ::Input::Initialization:: *)
MADPlot[file_String:"mad.metafile.ps"]:=Module[{graphic},graphic=Import["Mad.metafile.ps","PSImage"];Show[graphic]]


(* ::Input::Initialization:: *)
orbitFix[line_:MADLineName]:=Module[{by,bx,cy,cx,x2,y2},Do[MADmakeMonitorList[line];
by=DeleteCases[MAD,{_,"HBPM",_,_,_,_,_,_}];
bx=DeleteCases[monlist,{_,"VBPM",_,_,_,_,_,_}];
cy=Part[#,8]&/@by;
cx=Part[#,8]&/@bx;
x2=Delete[X,Position[monlist,{_,"VBPM",_,_,_,_,_,_}]];
y2=Delete[Y,Position[monlist,{_,"HBPM",_,_,_,_,_,_}]];
X2=MapThread[List,{cx,X2}];
Y2=MapThread[List,{cy,Y2}];]]


(* ::Input::Initialization:: *)
lengthPlotAdd[list_List,line_:MADLineName]:=If[Length[Part[list,1]]>7,list,MapThread[List,{(Part[#,8]&/@lengthAdd[If[StringQ[line],Symbol[line],line]]),list}]]


(* ::Input::Initialization:: *)
mfsPlot[var_,opts___]:=ListPlot[{Sequence@@(If[Depth[#]<4,MapThread[List,#1],Sequence@@#1]&)/@var},Sequence@@Join[Options[mfsPlot],{opts}]]


(* ::Input::Initialization:: *)
ServerRunMAD[file_]:=Run["\\\\Sroserve\\ap\\Software\\MAD\\MAD8dl\\mad8dl.bat "<>Directory[]<>"\\"<>ToString[file]];


(* ::Input::Initialization:: *)
getShortDirectory[]:=StringReplace[ReadList["!for %I in (.) do %~sI",String],Directory[]<>">"->""][[1]]<>"\\"


(* ::Input::Initialization:: *)
RunMAD[file_]:=Block[{},
If[DirectoryName[file]==="",
Import["!"<>"c:\\MAD8dl\\mad8dl.bat "<>getShortDirectory[]<>"\\"<>ToString[file],"String"];,
Import["!"<>"c:\\MAD8dl\\mad8dl.bat "<>ToString[file],"String"]];
Return[]];


(* ::Input::Initialization:: *)
RunMADX[file_]:=Block[{},Import["!"<>"c:\\MADX\\MADX.bat "<>Directory[]<>"\\"<>ToString[file],"String"];Return[]];


(* ::Input::Initialization:: *)
MADTracking[data_,turns_,opts___]:=Block[{a,b,method},
MADTrackData=data;
method=Method/.{opts}/.Options[MADTracking];
a="track;\n";
b=("start,x="<>ToString[NumberForm[Part[#,1],ExponentFunction->(Null&)]]<>",y="<>ToString[NumberForm[Part[#,2],ExponentFunction->(Null&)]]<>",deltap="<>ToString[NumberForm[Part[#,3],ExponentFunction->(Null&)]]<>";\n"&/@Partition[Flatten[data],3]);

MADStringWrite[MADFileName,a<>b<>"run,method="<>ToString[method]<>",turns="<>ToString[turns]<>
",table=ttrack;\nArchive,table=ttrack,filename=trackht.dat;\nendtrack;\n"];]


(* ::Text::Initialization:: *)
MADTracking[data_, turns_, opts___] := Block[{a, b, method, datafile}, datafile = OpenAppend[ToString[MADFileName]];
  MADTrackData = data;
  method = Method /. {opts} /. Options[MADTracking];
  a = "track;\n";
  b = ("start,x=" <> ToString[NumberForm[Part[#, 1], ExponentFunction -> (Null &)]] <> ",y=" <> ToString[NumberForm[Part[#, 2], ExponentFunction -> (Null &)]] <> ",deltap=" <> ToString[NumberForm[Part[#, 3], ExponentFunction -> (Null &)]] <> ";\n" & /@ Partition[Flatten[data], 3]);
  
  WriteString[datafile, a <> b <> "run,method=" <> ToString[method] <> ",turns=" <> ToString[turns] <>
    ",table=ttrack;\nArchive,table=ttrack,filename=trackht.dat;\nendtrack;\n"];
  Close[datafile];]


(* ::Input::Initialization:: *)
MADcreateData[xmin_,xmax_,xstep_,ymin_,ymax_,ystep_,deltap_]:=Do[TrackData={};Do[AppendTo[TrackData,{\[Iota],\[CurlyPhi],deltap}],{\[Iota],xmin,xmax,xstep},{\[CurlyPhi],ymin,ymax,ystep}]]


(* ::Input::Initialization:: *)
MADTrackingJAV[data_,opts___]:=Block[{a,b,method,datafile},datafile=OpenAppend[ToString[MADFileName]];
MADTrackData=data;
method=Method/.{opts}/.Options[MADTracking];
a="track;\n";
b=("start,"<>ToString[NumberForm[Part[#,1],ExponentFunction->(Null&)]]<>","<>ToString[NumberForm[Part[#,2],ExponentFunction->(Null&)]]<>","<>ToString[NumberForm[Part[#,3],ExponentFunction->(Null&)]]<>","<>ToString[NumberForm[Part[#,4],ExponentFunction->(Null&)]]<>","<>ToString[NumberForm[Part[#,5],ExponentFunction->(Null&)]]<>","<>ToString[NumberForm[Part[#,6],ExponentFunction->(Null&)]]<>";\n"&/@Partition[Flatten[data],6]);
WriteString[datafile,a<>b];
Close[datafile];]


(* ::Input::Initialization:: *)
MADTrackingJKJ[data_,opts___]:=Block[{a,b,method,datafile},datafile=OpenAppend[ToString[MADFileName]];
MADTrackData=data;
method=Method/.{opts}/.Options[MADTracking];
a="track;\n";
b=("start,"<>ToString[NumberForm[Part[#,1],ExponentFunction->(Null&)]]<>","<>ToString[NumberForm[Part[#,2],ExponentFunction->(Null&)]]<>","<>ToString[NumberForm[Part[#,3],ExponentFunction->(Null&)]]<>","<>ToString[NumberForm[Part[#,4],ExponentFunction->(Null&)]]<>","<>ToString[NumberForm[Part[#,5],ExponentFunction->(Null&)]]<>","<>ToString[NumberForm[Part[#,6],ExponentFunction->(Null&)]]<>";\n"&/@Partition[Flatten[data],6]);
WriteString[datafile,a<>b];
Close[datafile];]


(* ::Input::Initialization:: *)
MADTrackingMore[data_,turns_,opts___]:=Block[{a,b,method,datafile},datafile=OpenAppend[ToString[MADFileName]];
MADTrackData=data;
method=Method/.{opts}/.Options[MADTracking];
a="track;\n";
b=("start,"<>ToString[NumberForm[Part[#,1],ExponentFunction->(Null&)]]<>","<>ToString[NumberForm[Part[#,2],ExponentFunction->(Null&)]]<>","<>ToString[NumberForm[Part[#,3],ExponentFunction->(Null&)]]<>","<>ToString[NumberForm[Part[#,4],ExponentFunction->(Null&)]]<>","<>ToString[NumberForm[Part[#,5],ExponentFunction->(Null&)]]<>","<>ToString[NumberForm[Part[#,6],ExponentFunction->(Null&)]]<>";\n"&/@Partition[Flatten[data],6]);
WriteString[datafile,a<>b<>"run,method="<>ToString[method]<>",turns="<>ToString[turns]<>
",table=ttrack;\nArchive,table=ttrack,filename=trackht.dat;\nendtrack;\n"];
Close[datafile];]


(* ::Input::Initialization:: *)
HanningElement[x_,{k_}]:=x 2 Sin[(\[Pi] k)/n]^2


(* ::Input::Initialization:: *)
HanningElement2=Compile[{{x,_Real},{k,_Real,1},{n,_Integer}},x 2 Sin[(\[Pi] k)/n]^2];


(* ::Input::Initialization:: *)
Clear[Hanning];
Hanning[X_]:=MapIndexed[HanningElement,X]/.n->Length[X]


(* ::Input::Initialization:: *)
Hanning2[X_]:=Block[{test},test[a_,{b_}]:=HanningElement[a,{b},Length[X]];Flatten[MapIndexed[test,X]]]


(* ::Input::Initialization:: *)
BartInt[a_,b_,c_]:=(-(a+b c)(a-b)+b Sqrt[c^2 (a+b)^2-2a b(2c^2-c-1)])/(a^2+b^2+2a b c)


(* ::Input::Initialization:: *)
PeakPosition[X_]:=Part[First[Position[Abs[Fourier[Hanning[X]]],Max[Abs[Fourier[Hanning[X]]]]]],1]


(* ::Input::Initialization:: *)
Clear[AllPeakPositions];
AllPeakPositions[X_,\[Epsilon]_]:=Block[{fh=Take[Abs[Fourier[Hanning[X]]],Round[Length[X]/2]]},Sort[Select[FindTurningPoints[Range[Length[fh]],fh],#[[2]]>Max[fh]*\[Epsilon]&],#1[[2]]>#2[[2]]&]]


(* ::Input::Initialization:: *)
BaseTuneEstimate[X_]:=PeakPosition[X]/Length[X]


(* ::Input::Initialization:: *)
AllBaseTuneEstimate[X_,\[Epsilon]_:0.01]:={#[[1]]/Length[X],#[[2]]}&/@AllPeakPositions[X,\[Epsilon]]


(* ::Input::Initialization:: *)
BartIntCorrNum1[X_]:=Abs[Fourier[Hanning[X]]][[PeakPosition[X]]]


(* ::Input::Initialization:: *)
BartIntCorrNum2[X_]:=Abs[Fourier[Hanning[X]]][[PeakPosition[X]+1]]


(* ::Input::Initialization:: *)
TuneCorrection[X_]:=
1/(2\[Pi]) ArcSin[
BartInt[Abs[Fourier[Hanning[X]]][[PeakPosition[X]]]
,Abs[Fourier[Hanning[X]]][[PeakPosition[X]+1]],Cos[(2 \[Pi])/Length[X]]] Sin [(2 \[Pi])/Length[X]]]


(* ::Input::Initialization:: *)
AllTuneCorrection[X_,\[Epsilon]_]:=
{1/(2\[Pi]) ArcSin[
BartInt[Abs[Fourier[Hanning[X]]][[#[[1]]]]
,Abs[Fourier[Hanning[X]]][[#[[1]]+1]],Cos[(2 \[Pi])/Length[X]]] Sin [(2 \[Pi])/Length[X]]],0}&/@AllPeakPositions[X,\[Epsilon]]


(* ::Input::Initialization:: *)
TuneEstimateDescending[X_,\[Epsilon]_:0.01]:=AllBaseTuneEstimate[X,\[Epsilon]]+AllTuneCorrection[X,\[Epsilon]]


(* ::Input::Initialization:: *)
TuneEstimate[X_]:=(((First[First[Position[#,Max[#]]]]-1)/Length[X])+ArcSin[
BartInt[#[[First[First[Position[#,Max[#]]]]]]
,#[[First[First[Position[#,Max[#]]]]+1]],Cos[2 \[Pi]/Length[X]]] Sin [2 \[Pi]/Length[X]]]/(2 Pi))&[Abs[Fourier[Hanning[X]]]]


(* ::Input::Initialization:: *)
DiffusionRate[X_]:=1/Length[X] (TuneEstimate[Drop[X,IntegerPart[Length[X]/2]]]-TuneEstimate[Take[X,IntegerPart[Length[X]/2]]])


(* ::Input::Initialization:: *)
bin6[b_,c_]:=b[[#]]&/@Split[Ordering[c],c[[#1]]==c[[#2]]&];


(* ::Input::Initialization:: *)
MADMatrixTrack[opts___]:=Block[{y,x,i,j,k,table,pm,replace,replace2,bin2,xoffset(*,MADxfinal,MADyfinal,MADpxfinal,MADpyfinal*),MADmatrix},
Clear[Hanning];
Hanning[X_]:=Hanning[X]=MapIndexed[HanningElement,X]/.n->Length[X];
pm=PrintMatrix/.{opts}/.Options[MADMatrixTrack];
replace=ReplaceWithZeros/.{opts}/.Options[MADMatrixTrack];
xoffset=XOffset/.{opts}/.Options[MADMatrixTrack];

MADxfinal=bin6[Global`X,Global`PARTICLE];

MADyfinal=bin6[Global`Y,Global`PARTICLE];

MADpxfinal=bin6[Global`PX,Global`PARTICLE];

MADpyfinal=bin6[Global`PY,Global`PARTICLE];

MADmatrix=MapThread[List,{Flatten[MADxfinal],Flatten[MADpxfinal],Flatten[MADyfinal],Flatten[MADpyfinal]}];
Qx=If[replace===True,If[Max[Abs[#]]=!=0.&&Length[#]>2,TuneEstimate[#-Mean[#]],0.],TuneEstimate[#-Mean[#]]]&/@MADxfinal;
Qy=If[replace===True,If[Max[Abs[#]]=!=0.&&Length[#]>2,TuneEstimate[#-Mean[#]],0.],TuneEstimate[#-Mean[#]]]&/@MADyfinal;
dQxdn=If[replace===True,If[Max[Abs[#]]=!=0.&&Length[#]>3,DiffusionRate[#-Mean[#]],0.],DiffusionRate[#-Mean[#]]]&/@MADxfinal;
dQydn=If[replace===True,If[Max[Abs[#]]=!=0.&&Length[#]>3,DiffusionRate[#-Mean[#]],0.],DiffusionRate[#-Mean[#]]]&/@MADyfinal;
DiffTunes=MapThread[List,{Qx,Qy,dQxdn,dQydn}];
];


(* ::Input::Initialization:: *)
MADxytunes[trackdata_,qx_:Qx,qy_:Qy]:=
Do[
MADxytuneData=Partition[Flatten[MapThread[List,{Partition[Flatten[trackdata],2],qx,qy}]],4];
Do[MADxytuneData=Partition[MADxytuneData,Part[Drop[Drop[Dimensions[trackdata],1],1],\[Iota]]],{\[Iota],1,Length[Drop[Drop[Dimensions[trackdata],1],1]]}];
]


(* ::Input::Initialization:: *)
MADDelete[file_:MADFileName,opts___]:=Block[{MADReadFile,a,c,type,id,length,datafile},
type=Type/.{opts}/.Options[MADDelete];
type=ToString[type];
If[type==="Beam"||type==="Monitor"||type==="Twiss",
MADReadFile=ReadList[file,Word,WordSeparators->{";"}];
If[type==="Beam",id="Beam";length=4];
If[type==="Twiss",id="twiss";length=5];
If[type==="Monitor",id="usemonitor";length=10];
a=Select[MADReadFile,StringTake[#,If[StringLength[#]>length,length,StringLength[#]]]=!=id&];
datafile=OpenWrite[file];
c=If[StringTake[#,-1]=!="&",#<>";\n",#<>"\n"]&/@a;
WriteString[datafile,#]&/@c;
Close[file]];
If[type==="Track",MADDeleteTrack[file,opts]]]


(* ::Input::Initialization:: *)
MADDeleteTrack[file_:MADFileName,opts___]:=
Block[{MADReadFile,a1,a2,b,c,\[Iota],all,datafile},
MADReadFile=ReadList[file,Word,WordSeparators->{";"}];
depth=Depth/.{opts}/.Options[MADDeleteTrack];
all=DeleteAll/.{opts}/.Options[MADDeleteTrack];
\[Iota]=depth;
a1=Flatten[Position[MADReadFile,"track"]];
a2=Flatten[Position[MADReadFile,"endtrack"]];
If[a1=!={},
If[all===True,
b=Drop[MADReadFile,{First[a1],Last[a2]}],
If[NumberQ[depth],
b=Drop[MADReadFile,{Part[a1,\[Iota]],Part[a2,\[Iota]]}],
If[ListQ[depth],b=MADReadFile;
Do[b=Drop[b,{Part[Sort[a1,Greater],Part[depth,\[CurlyPhi]]],Part[Sort[a2,Greater],Part[depth,\[CurlyPhi]]]}],{\[CurlyPhi],1,Length[depth]}],
Print["Depth is not a number or a list of Numbers"]
]
]
];
datafile=OpenWrite[file];
c=If[StringTake[#,-1]=!="&",#<>";\n",#<>"\n"]&/@b;
WriteString[datafile,#]&/@c;
Close[file];
]]


(* ::Input::Initialization:: *)
MADDropLines[file_,opts___]:=Block[{a,b,c,d,lines,datafile},
lines=Lines/.{opts};
out=Output/.{opts};
If[StringQ[out],out,out=file];
a=ReadList[ToString[file],Word,WordSeparators->{";"}];
If[NumberQ[lines],c=Drop[a,{lines}],
If[ListQ[lines],
lines=Sort[lines,Greater];
c=a;
Do[c=Drop[c,{Part[lines,\[Iota]]}],{\[Iota],1,Length[lines]}];,
Print[TableForm[a,TableHeadings->{Automatic}]];Print["Use \"Lines\[Rule]Number\" to Drop Lines"];c=a]];
datafile=OpenWrite[out];
d=If[StringTake[#,-1]=!="&",#<>";\n",#<>"\n"]&/@c;
WriteString[datafile,#]&/@d;
Close[out];]


(* ::Input::Initialization:: *)
MADTwiss[opts___]:=Block[{tunes,chrom,couple,save,tape,twiss,a,deltap},
tunes=Tunes/.{opts}/.Options[MADTwiss];
chrom=Chrom/.{opts}/.Options[MADTwiss];
couple=Couple/.{opts}/.Options[MADTwiss];
save=Save/.{opts}/.Options[MADTwiss];
tape=Tape/.{opts}/.Options[MADTwiss];
deltap=Deltap/.{opts}/.Options[MADTwiss];
twiss="twiss"<>If[deltap=!=0,",deltap="<>ToString[deltap],""]<>If[tunes===True,",tunes",""]<>If[Head[tunes]===String,",tunes="<>tunes,""]<>If[chrom&&!couple,",chrom",""]<>If[couple&&!chrom,",couple",""]<>If[couple&&chrom,",couple",""]<>If[save===True,",save",""]<>If[Head[save]===String,",save="<>ToString[save],""]<>If[tape===True,",tape",""]<>If[Head[tape]===String,",tape="<>tape,""]<>";\n";
MADStringWrite[MADFileName,twiss];]


(* ::Input::Initialization:: *)
TextOscillate[]:=Switch[TEXTOSCILLATE,1,TEXTOSCILLATE=-1,-1,TEXTOSCILLATE=1,_,1]


(* ::Input::Initialization:: *)
TextDirection[]:=Switch[TEXTOSCILLATE,-1,1,_,-1]


(* ::Input::Initialization:: *)
Global`ElementModified=1;


(* ::Input::Initialization:: *)
MADElementModify[element_]:=Block[{},
Global`ElementModified++;
Switch[element[[1,2]],
"Quadrupole",
{name,l,k1,label}=element[[1,{1,3,4,7}]];CreateDialog[{Grid[{{"Name",InputField[Dynamic[name],Enabled->False]},{"L",InputField[Dynamic[l]]},{"\!\(\*SubscriptBox[\(K\), \(1\)]\)",InputField[Dynamic[k1]]},{"Label",InputField[Dynamic[label]]}}],DefaultButton[DialogReturn[MADClear[Evaluate[name]];quad[Evaluate[Symbol@name],l,k1,label]]]}];,
"SectorBend",
{name,l,k1,angle,label}=element[[1,{1,3,4,6,7}]];angle=N[angle/Degree];
CreateDialog[{Grid[{{"Name",InputField[Dynamic[name],Enabled->False]},{"L",InputField[Dynamic[l]]},{"\[Theta]\[Degree]",InputField[Dynamic[angle]]},{"\!\(\*SubscriptBox[\(K\), \(1\)]\)",InputField[Dynamic[k1]]},{"Label",InputField[Dynamic[label]]}}],DefaultButton["Ok",MADClear[Evaluate[name]];sbend[Evaluate[Symbol@name],N[l],k1,N[angle*Degree],label]]}];,
"Sextupole",
{name,l,k2,label}=element[[1,{1,3,4,7}]];
CreateDialog[{Grid[{{"Name",InputField[Dynamic[name],Enabled->False]},{"L",InputField[Dynamic[l]]},{"\!\(\*SubscriptBox[\(K\), \(2\)]\)",InputField[Dynamic[k2]]},{"Label",InputField[Dynamic[label]]}}],DefaultButton[DialogReturn[MADClear[Evaluate[name]];sext[Evaluate[Symbol@name],l,k2,label]]]}];,
"Drift",
{name,l,label}=element[[1,{1,3,7}]];
CreateDialog[{Grid[{{"Name",InputField[Dynamic[name],Enabled->False]},{"L",InputField[Dynamic[l]]},{"Label",InputField[Dynamic[label]]}}],DefaultButton[DialogReturn[MADClear[Evaluate[name]];drift[Evaluate[Symbol@name],l,label]]]}];
]]


(* ::Input::Initialization:: *)
MADDrawRot[{x_,y_},\[Theta]_]:={x Cos[\[Theta]]-y Sin[\[Theta]],x Sin[\[Theta]]+y Cos[\[Theta]]}


(* ::Input::Initialization:: *)
wdr:=0.16widthscale;


(* ::Input::Initialization:: *)
pelement["drift",position_,length_,bend_,rotation_,label_,opts___]:=If[fancyelements===True,EventHandler[#,{"MouseClicked":>MADElementModify[Element/.{opts}]}],List[#]]&@Block[{driftlabels=Global`DriftLabels/.opts/.{Global`DriftLabels->False},driftlengths=Global`DriftLengths/.opts/.{Global`DriftLengths->False}},
Join[{Line[{position,position+MADDrawRot[length*{1,0},rotation]}]},
If[MADDrawText,
If[driftlabels===True,
If[driftlengths===True,label=label<>"\n"<>ToString[NumberRight[length]]<>"m"];
{Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{0.5wdr Sin[-rotation], 0.5 wdr Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}]},
If[driftlengths===True,{Text[ToString[NumberRight[length]]<>"m",position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{1wdr Sin[-rotation], 1 wdr Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}]},{}]]
,{}]]];


(* ::Input::Initialization:: *)
wd:=0.1*widthscale;


(* ::Input::Initialization:: *)
pelement["dipole",position_,length_,bend_,rotation_,label_,opts___]:=Block[{E1,E2,colour},

colour=Colour/.FilterRules[opts,{Colour}]/.{Colour->{}};
If[fancyelements===True,
E1=-Symbol[(Element/.{opts})[[1,1]]<>"Extra"][[5]];E2=-Symbol[(Element/.{opts})[[1,1]]<>"Extra"][[6]];Tooltip[EventHandler[#,{"MouseClicked":>MADElementModify[Element/.{opts}]}],TableForm[{{Style[If[#[[1,7]]==="",#[[1,1]],#[[1,7]]]&[(Element/.{opts})],Bold]},{"Length = "<>ToString[length]},{"angle = "<>ToString[N[(Element/.{opts})[[1,6]]/Degree]]<>"\[Degree]"},{"Position = "<>ToString[NumberRight@Chop[position,10^-5]]}}]],List[#]]&[

If[bends===True&&Abs[bend]>0.001&&length>0,
{colour,Thickness[thick],

Circle[position+MADDrawRot[{0,length/bend},rotation],length/Abs[bend]-wd,
If[bend>=0,{(3\[Pi])/2+rotation,(3\[Pi])/2+bend+rotation},{(-3\[Pi])/2+rotation+bend,(-3\[Pi])/2+rotation}]],

Circle[position+MADDrawRot[{0,length/bend},rotation],length/Abs[bend]+wd  ,
If[bend>=0,{(3\[Pi])/2+rotation,(3\[Pi])/2+bend+rotation},{(-3\[Pi])/2+rotation+bend,-((3\[Pi])/2)+rotation}]],


Line[{position+MADDrawRot[{0,wd},rotation],position-MADDrawRot[{0,wd},rotation]}],


Line[{position+MADDrawRot[{(length/bend-wd )Sin[bend],length/bend (1-Cos[bend])+wd Cos[bend]},rotation],position+MADDrawRot[{(length/bend+wd)(Sin[bend]),length/bend (1-Cos[bend])-wd Cos[bend]},rotation]}],If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{1.3wd Sin[-rotation-bend/2],1.3wd Cos[-rotation-bend/2]},{TextDirection[],0},{Sin[-rotation-bend/2],Cos[-rotation-bend/2]}],{}]},
{White,colour,Thickness[thick],EdgeForm[Thickness[Medium]],
Polygon[{position+MADDrawRot[{0,wd},rotation],position+MADDrawRot[{length,wd},rotation],position+MADDrawRot[{length,-wd},rotation],position+MADDrawRot[{0,-wd},rotation]}],Black,If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{1.3wd Sin[-rotation-0],1.3wd Cos[-rotation-0]},{TextDirection[],0},{Sin[-rotation-0],Cos[-rotation-0]}],{}]}]]];


(* ::Input::Initialization:: *)
pelement["septumabove",position_,length_,bend_,rotation_,label_,opts___]:=Block[{E1,E2,colour},
colour=Colour/.FilterRules[opts,{Colour}]/.{Colour->{}};
If[fancyelements===True,
E1=-Symbol[(Element/.{opts})[[1,1]]<>"Extra"][[5]];E2=-Symbol[(Element/.{opts})[[1,1]]<>"Extra"][[6]];Tooltip[EventHandler[#,{"MouseClicked":>MADElementModify[Element/.{opts}]}],TableForm[{{Style[If[#[[1,7]]==="",#[[1,1]],#[[1,7]]]&[(Element/.{opts})],Bold]},{"Length = "<>ToString[length]},{"angle = "<>ToString[N[(Element/.{opts})[[1,6]]/Degree]]<>"\[Degree]"},{"Position = "<>ToString[NumberRight@Chop[position,10^-5]]}}]],List[#]]&[
If[bends===True&&Abs[bend]>10,
{colour,Thickness[thick],

Circle[position+MADDrawRot[{0,length/bend},rotation],length/Abs[bend]-wd  ,
If[bend>=0,{(3\[Pi])/2+rotation,(3\[Pi])/2+bend+rotation},{(-3\[Pi])/2+rotation+bend,-((3\[Pi])/2)+rotation}]],
Circle[position+MADDrawRot[{0,length/bend},rotation],length/Abs[bend],
If[bend>=0,{(3\[Pi])/2+rotation,(3\[Pi])/2+bend+rotation},{(-3\[Pi])/2+rotation+bend,-((3\[Pi])/2)+rotation}]]
,
Line[{position+MADDrawRot[{0,wd},rotation],position-MADDrawRot[{0,0},rotation]}],

Line[{position+MADDrawRot[{(length/bend )Sin[bend],length/bend (1-Cos[bend])+wd Cos[bend]},rotation],position+MADDrawRot[{(length/bend+wd)(Sin[bend]),length/bend (1-Cos[bend])},rotation]}],If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{1.3wd Sin[-rotation-bend/2],1.3wd Cos[-rotation-bend/2]},{TextDirection[],0},{Sin[-rotation-bend/2],Cos[-rotation-bend/2]}],{}]},
{White,colour,Thickness[thick],EdgeForm[Thickness[Medium]],
Polygon[{position+MADDrawRot[{0,wd},rotation],position+MADDrawRot[{length,wd},rotation],position+MADDrawRot[{length,-0.25wd},rotation],position+MADDrawRot[{0,-0.25wd},rotation]}],Black,If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{1.3wd Sin[-rotation-0],1.3wd Cos[-rotation-0]},{TextDirection[],0},{Sin[-rotation-0],Cos[-rotation-0]}],{}]}]]];


(* ::Input::Initialization:: *)
wq:=0.12*widthscale;


(* ::Input::Initialization:: *)
pelement["quadrupole",position_,length_,bend_,rotation_,label_,opts___]:=Block[{ar= 1+0(1/AspectRatio/.opts/.{AspectRatio->1})},
If[fancyelements===True,Tooltip[EventHandler[#,{"MouseClicked":>MADElementModify[Element/.{opts}]}],TableForm[{{Style[If[#[[1,7]]==="",#[[1,1]],#[[1,7]]]&[(Element/.{opts})],Bold]},{"Length = "<>ToString[length]},{"\!\(\*SubscriptBox[\(K\), \(1\)]\) = "<>ToString[N[(Element/.{opts})[[1,4]]]]},
{"Position = "<>ToString[NumberRight@Chop[position,10^-5]]}}]],List[#]]&[
{FilterRules[opts,{Colour}],Thickness[thick],White,EdgeForm[{Thickness[Medium],RGBColor[1,0,0]}],
Polygon[{position,position+MADDrawRot[{0,1.4wq},ar rotation],position+MADDrawRot[{length,1.4wq},ar rotation],position+MADDrawRot[{length,-1.4wq},ar rotation],position+MADDrawRot[-{0,1.4wq},ar rotation],position}],
Polygon[{position,position+MADDrawRot[{0,wq},ar rotation],position+MADDrawRot[{length,wq},ar rotation],position+MADDrawRot[{length,-wq},ar rotation],position+MADDrawRot[-{0,wq},ar rotation],position}],If[MADDrawText,{Red,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{1.5wq Sin[-rotation], 1.5 wq Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}]},{}]}]
];


(* ::Input::Initialization:: *)
ws:=0.08*widthscale;


(* ::Input::Initialization:: *)
pelement["sextupole",position_,length_,bend_,rotation_,label_,opts___]:=
If[fancyelements===True,Tooltip[EventHandler[#,{"MouseClicked":>MADElementModify[Element/.{opts}]}],TableForm[{{Style[If[#[[1,7]]==="",#[[1,1]],#[[1,7]]]&[(Element/.{opts})],Bold]},{"Length = "<>ToString[length]},{"\!\(\*SubscriptBox[\(K\), \(2\)]\) = "<>ToString[N[(Element/.{opts})[[1,4]]]]},
{"Position = "<>ToString[NumberRight@Chop[position,10^-5]]}}]],List[#]]&[{Thickness[thick],White,EdgeForm[{Thickness[Medium],RGBColor[0,0,1]}],
Polygon[{position,position+MADDrawRot[{0,1.4ws},rotation],position+MADDrawRot[{length,1.4ws},rotation],position+MADDrawRot[{length,-1.4ws},rotation],position+MADDrawRot[-{0,1.4ws},rotation],position}],
Polygon[{position,position+MADDrawRot[{0,ws},rotation],position+MADDrawRot[{length,ws},rotation],position+MADDrawRot[{length,-ws},rotation],position+MADDrawRot[-{0,ws},rotation],position}],If[MADDrawText,{Blue,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{2.2ws Sin[-rotation],2.2ws Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}]},{}]}];


(* ::Input::Initialization:: *)
wo:=0.06*widthscale;


(* ::Input::Initialization:: *)
pelement["octupole",position_,length_,bend_,rotation_,label_,opts___]:={RGBColor[0,0.5,1],Thickness[thick],Evaluate[Symbol@shape][{position,position+MADDrawRot[{0,wo},rotation],position+MADDrawRot[{length,wo},rotation],position+MADDrawRot[{length,-wo},rotation],position+MADDrawRot[-{0,wo},rotation],position}],Evaluate[Symbol@shape][{position,position+MADDrawRot[{0,1.4wo},rotation],position+MADDrawRot[{length,1.4wo},rotation],position+MADDrawRot[{length,-1.4wo},rotation],position+MADDrawRot[-{0,1.4wo},rotation],position}],If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{1.8wo Sin[-rotation],1.8wo Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}],{}]};


(* ::Input::Initialization:: *)
wrf:=0.05*widthscale;


(* ::Input::Initialization:: *)
pelement["rfc",position_,length_,bend_,rotation_,label_,opts___]:={RGBColor[0,1,0],Thickness[thick],Evaluate[Symbol@shape][{position,position+MADDrawRot[{0,wrf},rotation],position+MADDrawRot[{length,wrf},rotation],position+MADDrawRot[{length,-wrf},rotation],position+MADDrawRot[-{0,wrf},rotation],position}],Evaluate[Symbol@shape][{position,position+MADDrawRot[{0,1.4wrf},rotation],position+MADDrawRot[{length,1.4wrf},rotation],position+MADDrawRot[{length,-1.4wrf},rotation],position+MADDrawRot[-{0,1.4wrf},rotation],position}],Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{1.9wrf Sin[-rotation],1.9wrf Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}]};


(* ::Input::Initialization:: *)
pelement["lcav",position_,length_,bend_,rotation_,label_,opts___]:={RGBColor[0,1,0],Thickness[thick],Evaluate[Symbol@shape][{position,position+MADDrawRot[{0,wrf},rotation],position+MADDrawRot[{length,wrf},rotation],position+MADDrawRot[{length,-wrf},rotation],position+MADDrawRot[-{0,wrf},rotation],position}],Evaluate[Symbol@shape][{position,position+MADDrawRot[{0,1.4wrf},rotation],position+MADDrawRot[{length,1.4wrf},rotation],position+MADDrawRot[{length,-1.4wrf},rotation],position+MADDrawRot[-{0,1.4wrf},rotation],position}],Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{1.9wrf Sin[-rotation],1.9wrf Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}]};


(* ::Input::Initialization:: *)
pelement["solenoid",position_,length_,bend_,rotation_,label_,opts___]:={RGBColor[0,1,0.25],Thickness[thick],Evaluate[Symbol@shape][{position,position+MADDrawRot[{0,wrf},rotation],position+MADDrawRot[{length,wrf},rotation],position+MADDrawRot[{length,-wrf},rotation],position+MADDrawRot[-{0,wrf},rotation],position}],Evaluate[Symbol@shape][{position,position+MADDrawRot[{0,1.4wrf},rotation],position+MADDrawRot[{length,1.4wrf},rotation],position+MADDrawRot[{length,-1.4wrf},rotation],position+MADDrawRot[-{0,1.4wrf},rotation],position}],Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{1.9wrf Sin[-rotation],1.9wrf Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}]};


(* ::Input::Initialization:: *)
pelement["freetext",position_,length_,bend_,rotation_,label_,opts___]:={RGBColor[0.25,1,0.5],Thickness[thick],Evaluate[Symbol@shape][{position,position+MADDrawRot[{0,wrf},rotation],position+MADDrawRot[{length,wrf},rotation],position+MADDrawRot[{length,-wrf},rotation],position+MADDrawRot[-{0,wrf},rotation],position}],Evaluate[Symbol@shape][{position,position+MADDrawRot[{0,1.4wrf},rotation],position+MADDrawRot[{length,1.4wrf},rotation],position+MADDrawRot[{length,-1.4wrf},rotation],position+MADDrawRot[-{0,1.4wrf},rotation],position}],Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{1.9wrf Sin[-rotation],1.9wrf Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}]};


(* ::Input::Initialization:: *)
pelement["gwiggler",position_,length_,bend_,rotation_,label_,opts___]:={RGBColor[0.25,0.5,0.25],Thickness[thick],EdgeForm[Thickness[Medium]],
Polygon[{position+MADDrawRot[{0,wd},rotation],position+MADDrawRot[{length,wd},rotation],position+MADDrawRot[{length,-wd},rotation],position+MADDrawRot[{0,-wd},rotation]}],Black,If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{1.3wd Sin[-rotation-0],1.3wd Cos[-rotation-0]},{TextDirection[],0},{Sin[-rotation-0],Cos[-rotation-0]}],{}]};


(* ::Input::Initialization:: *)
wkick:=0.05*widthscale;


(* ::Input::Initialization:: *)
pelement["kicker",position_,length_,bend_,rotation_,label_,opts___]:={RGBColor[.4,.4,.4],Polygon[{position,position+MADDrawRot[{0,1.4wkick},rotation],position+MADDrawRot[{length,1.4wkick},rotation],position+MADDrawRot[{length,-1.4wkick},rotation],position+MADDrawRot[-{0,1.4wkick},rotation],position}],
If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{1.8wkick Sin[-rotation],1.8wkick Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}],{}]};


(* ::Input::Initialization:: *)
pelement["hkicker",position_,length_,bend_,rotation_,label_,opts___]:={RGBColor[.4,.4,.4],Evaluate[Symbol@shape][{position,position+MADDrawRot[{0,1.4wkick},rotation],position+MADDrawRot[{length,1.4wkick},rotation],position+MADDrawRot[{length,-1.4wkick},rotation],position+MADDrawRot[-{0,1.4wkick},rotation],position}],
If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{1.8wkick Sin[-rotation],1.8wkick Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}],{}]};


(* ::Input::Initialization:: *)
pelement["vkicker",position_,length_,bend_,rotation_,label_,opts___]:={RGBColor[.4,.4,.4],Evaluate[Symbol@shape][{position,position+MADDrawRot[{0,1.4wkick},rotation],position+MADDrawRot[{length,1.4wkick},rotation],position+MADDrawRot[{length,-1.4wkick},rotation],position+MADDrawRot[-{0,1.4wkick},rotation],position}],
If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{1.8wkick Sin[-rotation],1.8wkick Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}],{}]};


(* ::Input::Initialization:: *)
pelement["symmline",position_,length_,bend_,rotation_,label_,opts___]:={Thickness[thick],Dashing[{0.01,0.01}],Line[{position+MADDrawRot[{0,3wq},rotation],position+MADDrawRot[{0,-3 wq},rotation]}],If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{3.5wq Sin[-rotation],3.5wq Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}],{}]};


(* ::Input::Initialization:: *)
pelement["marker",position_,length_,bend_,rotation_,label_,opts___]:=({Thickness[thick],RGBColor[0,0.79,0.34],Line[{position+MADDrawRot[{0,2wq},rotation],position+MADDrawRot[{0,-2wq},rotation]}],If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{2.3wq Sin[-rotation],2.3wq Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}],{}]});


(* ::Input::Initialization:: *)
pelement["bpm",position_,length_,bend_,rotation_,label_,opts___]:={Line[{position,position+MADDrawRot[length*{1,0},rotation]}],Thickness[thick],RGBColor[.8,.3,.8],If[length>0,
Polygon[{position,position+MADDrawRot[{0,1.4wkick},rotation],position+MADDrawRot[{length,1.4wkick},rotation],position+MADDrawRot[{length,-1.4wkick},rotation],position+MADDrawRot[-{0,1.4wkick},rotation],position}],Line[{position+MADDrawRot[{length/2,2wq},rotation],position+MADDrawRot[{length/2,-2wq},rotation]}]],If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{2.3wq Sin[-rotation],2.3wq Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}],{}]};


(* ::Input::Initialization:: *)
pelement["bpmcircle",position_,length_,bend_,rotation_,label_,opts___]:={Line[{position,position+MADDrawRot[length*{1,0},rotation]}],Thickness[thick],RGBColor[1,0,0],
Disk[position+MADDrawRot[{length/2,0},rotation],{0.9length/2,1wq}],
If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{1.2wq Sin[-rotation],1.2wq Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}],{}]};


(* ::Input::Initialization:: *)
pelement["vbpm",position_,length_,bend_,rotation_,label_,opts___]:={Thickness[thick],RGBColor[.8,.3,.8],Line[{position+MADDrawRot[{0,2wq},rotation],position+MADDrawRot[{0,-2wq},rotation]}],If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{2.3wq Sin[-rotation],2.3wq Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}],{}]};


(* ::Input::Initialization:: *)
pelement["hbpm",position_,length_,bend_,rotation_,label_,opts___]:={Thickness[thick],RGBColor[.8,.3,.8],Line[{position+MADDrawRot[{0,2wq},rotation],position+MADDrawRot[{0,-2wq},rotation]}],If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{2.3wq Sin[-rotation],2.3wq Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}],{}]};


(* ::Input::Initialization:: *)
pelement["monitor",position_,length_,bend_,rotation_,label_,opts___]:={Thickness[thick],RGBColor[.8,.3,.8],Line[{position+MADDrawRot[{0,2wq},rotation],position+MADDrawRot[{0,-2wq},rotation]}],If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{2.3wq Sin[-rotation],2.3wq Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}],{}]};


(* ::Input::Initialization:: *)
pelement["monitor",position_,length_,bend_,rotation_,label_,opts___]:={Line[{position,position+MADDrawRot[length*{1,0},rotation]}],Thickness[thick],RGBColor[.8,.3,.8],If[length>0,
Polygon[{position,position+MADDrawRot[{0,1.4wkick},rotation],position+MADDrawRot[{length,1.4wkick},rotation],position+MADDrawRot[{length,-1.4wkick},rotation],position+MADDrawRot[-{0,1.4wkick},rotation],position}],Line[{position+MADDrawRot[{length/2,2wq},rotation],position+MADDrawRot[{length/2,-2wq},rotation]}]],If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{2.3wq Sin[-rotation],2.3wq Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}],{}]};


(* ::Input::Initialization:: *)
pelement["imonitor",position_,length_,bend_,rotation_,label_,opts___]:={Thickness[thick],RGBColor[.8,.3,.8],Line[{position+MADDrawRot[{0,2wq},rotation],position+MADDrawRot[{0,-2wq},rotation]}],If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{2.3wq Sin[-rotation],2.3wq Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}],{}]};


(* ::Input::Initialization:: *)
pelement["instrument",position_,length_,bend_,rotation_,label_,opts___]:={Thickness[thick],RGBColor[.8,.3,.8],Line[{position+MADDrawRot[{0,2wq},rotation],position+MADDrawRot[{0,-2wq},rotation]}],If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{2.3wq Sin[-rotation],2.3wq Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}],{}]};


(* ::Input::Initialization:: *)
pelement["profile",position_,length_,bend_,rotation_,label_,opts___]:={Thickness[thick],RGBColor[.8,.3,.8],Line[{position+MADDrawRot[{0,2wq},rotation],position+MADDrawRot[{0,-2wq},rotation]}],If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{2.3wq Sin[-rotation],2.3wq Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}],{}]};


(* ::Input::Initialization:: *)
pelement["wire",position_,length_,bend_,rotation_,label_,opts___]:={Thickness[thick],RGBColor[.8,.3,.8],Line[{position+MADDrawRot[{0,2wq},rotation],position+MADDrawRot[{0,-2wq},rotation]}],If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{2.3wq Sin[-rotation],2.3wq Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}],{}]};


(* ::Input::Initialization:: *)
pelement["charge",position_,length_,bend_,rotation_,label_,opts___]:={Thickness[thick],Purple,Line[{position+MADDrawRot[{0,2wq},rotation],position+MADDrawRot[{0,-2wq},rotation]}],If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{2.3wq Sin[-rotation],2.3wq Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}],{}]};


(* ::Input::Initialization:: *)
pelement["watch",position_,length_,bend_,rotation_,label_,opts___]:={Thickness[thick],Purple,Line[{position+MADDrawRot[{0,2wq},rotation],position+MADDrawRot[{0,-2wq},rotation]}],If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{2.3wq Sin[-rotation],2.3wq Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}],{}]};


(* ::Input::Initialization:: *)
pelement[element_,position_,length_,bend_,rotation_,label_,opts___]:=Block[{},
Print[element];{}];


(* ::Input::Initialization:: *)
pelement["multipole",position_,length_,bend_,rotation_,label_,opts___]:={RGBColor[0.5,0,0.75],Thickness[thick],Evaluate[Symbol@shape][{position,position+MADDrawRot[{0,wo},rotation],position+MADDrawRot[{length,wo},rotation],position+MADDrawRot[{length,-wo},rotation],position+MADDrawRot[-{0,wo},rotation],position}],Evaluate[Symbol@shape][{position,position+MADDrawRot[{0,1.4wo},rotation],position+MADDrawRot[{length,1.4wo},rotation],position+MADDrawRot[{length,-1.4wo},rotation],position+MADDrawRot[-{0,1.4wo},rotation],position}],If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{1.8wo Sin[-rotation],1.8wo Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}],{}]};


(* ::Input::Initialization:: *)
pelement["rcollimator",position_,length_,bend_,rotation_,label_,opts___]:={Line[{position,position+MADDrawRot[length*{1,0},rotation]}],Thickness[thick],RGBColor[0.`,0.79,0.34],If[length>0,
Polygon[{position,position+MADDrawRot[{0,1.4wkick},rotation],position+MADDrawRot[{length,1.4wkick},rotation],position+MADDrawRot[{length,-1.4wkick},rotation],position+MADDrawRot[-{0,1.4wkick},rotation],position}],Line[{position+MADDrawRot[{length/2,2wq},rotation],position+MADDrawRot[{length/2,-2wq},rotation]}]],If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{2.3wq Sin[-rotation],2.3wq Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}],{}]};


(* ::Input::Initialization:: *)
pelement["ecollimator",position_,length_,bend_,rotation_,label_,opts___]:={Line[{position,position+MADDrawRot[length*{1,0},rotation]}],Thickness[thick],RGBColor[0.`,0.79,0.34],If[length>0,
Polygon[{position,position+MADDrawRot[{0,1.4wkick},rotation],position+MADDrawRot[{length,1.4wkick},rotation],position+MADDrawRot[{length,-1.4wkick},rotation],position+MADDrawRot[-{0,1.4wkick},rotation],position}],Line[{position+MADDrawRot[{length/2,2wq},rotation],position+MADDrawRot[{length/2,-2wq},rotation]}]],If[MADDrawText,Text[label,position+{length/2 Cos[rotation],length/2 Sin[rotation]}+TextOscillate[]{2.3wq Sin[-rotation],2.3wq Cos[-rotation]},{TextDirection[],0},{Sin[-rotation],Cos[-rotation]}],{}]};


(* ::Input::Initialization:: *)
BaseMADDraw[lattice_,opts___]:=Block[{rot,roty,sinc,cosc,sinc2,sym,test,autolabels,thick,bpms,lengths,filled,widthscale,symms,bends,closed,offset,bpmcircle,textoscillate,fancyelements,anglesum,findrotations,findrotationsv,cc,RM,prepositions,prepositions2,v,rm,sum1,startangle,layout,fancy,optShow,angle,errors,vbends,tmp},
text=Labels/.{opts}/.Options[MADDraw];
If[text,MADDrawText=True,MADDrawText=False];
autolabels=Global`AutoLabels/.{opts}/.{Global`AutoLabels->False};
thick=Thickness/.{opts}/.Options[MADDraw];
bpms=Monitors/.{opts}/.Options[MADDraw];
lengths=Lengths/.{opts}/.Options[MADDraw];
filled=Filled/.{opts}/.Options[MADDraw];
If[filled,shape="Polygon",shape="Line"];
widthscale=WidthScale/.{opts}/.Options[MADDraw];
symms=Symms/.{opts}/.Options[MADDraw];
bends=Bends/.{opts}/.Options[MADDraw];
closed=CheckClosed/.{opts}/.Options[MADDraw];
offset=Offset/.{opts}/.Options[MADDraw];
bpmcircle=Global`BPMCircles/.{opts}/.{Global`BPMCircles->False};
vbends=Global`VerticalBends/.{opts}/.{Global`VerticalBends->False};
Switch[bpmcircle,True,BPMCIRCLESIZE=0.1wq,_Integer|_Real,BPMCIRCLESIZE=bpmcircle wq];
textoscillate=Global`TextOscillate/.{opts}/.{Global`TextOscillate->True};
If[textoscillate===True,TEXTOSCILLATE=1,TEXTOSCILLATE=0];
fancyelements=FancyElements/.{opts}/.{FancyElements->False};
anglesum=startangle=Global`AngleOffset/.{opts}/.{Global`AngleOffset->0};
optShow=Join[{Sequence@@FilterRules[Flatten[{opts}],Options[Graphics]]},{Sequence@@FilterRules[Flatten[{opts}],Options[Show]]},{Sequence@@FilterRules[Options[MADDraw],Options[Show]]}];
errors=Global`Errors/.{opts}/.{Global`Errors->False};

MADDrawRot[{x_,y_},\[Theta]_]:={x Cos[\[Theta]]-y Sin[\[Theta]],x Sin[\[Theta]]+y Cos[\[Theta]]};
roty[line_,\[Theta]_]:={line[[1]] Sin[\[Theta]]-line[[2]] Cos[\[Theta]],line[[1]] Cos[\[Theta]]+line[[2]] Sin[\[Theta]]};
sinc[\[Theta]_]:=If[Abs[\[Theta]]>0,Sin[\[Theta]]/\[Theta],1];
cosc[\[Theta]_]:=If[Abs[\[Theta]]>0,(1-Cos[\[Theta]])/\[Theta],0];
sinc2[\[Theta]_]:=If[Abs[\[Theta]]>0,Sin[\[Theta]]/\[Theta],0];
sym={"symmline",0,0,"",0};

If[bends===True,findrotations=(
Switch[#[[1]],
"dipole",anglesum+=If[vbends===True,Sin[#[[5]]],Cos[#[[5]]]]#1[[3]],
"quadrupole",anglesum+=GetMADErrors[Evaluate[#[[-1,1]]],"dx"]*#[[-1,3]]*#[[-1,4]],
_,anglesum]&/@Drop[Prepend[lattice,{0,0,0,"",0}],-1]),findrotations=Table[0.,{Length[lattice]}]];

findrotationsv=(sum1=0;(sum1+=If[vbends===True,-Sin[#[[5]]],Cos[#[[5]]]]#1[[3]]&)/@Drop[Prepend[lattice,{0,0,0,"",0}],-1]);

cc={0,0,0};RM=IdentityMatrix[3];startangle=0;
prepositions=(
v=RotationMatrix[startangle,{0,Sin[#[[5]]],Cos[#[[5]]]}].{#[[2]]*If[bends===True,sinc[#[[3]]],1],-#[[2]]*If[bends===True,cosc[#[[3]]],0],0};
rm=Switch[#[[1]],
"dipole",If[bends===True,RotationMatrix[Sin[#[[5]]]#[[3]],{0,1,0}].RotationMatrix[Cos[#[[5]]]#[[3]],{0,0,1}],IdentityMatrix[3]],
"quadrupole",If[bends===True&&errors===True,angle=GetMADErrors[Evaluate[#[[-1,1]]],"dx"]*#[[-1,3]]*#[[-1,4]];RotationMatrix[0,{1,1,1}].RotationMatrix[angle,{0,0,1}],IdentityMatrix[3]],
_,IdentityMatrix[3]];
RM=RM.rm;
cc+=RM.v)&/@lattice;
prepositions2=Transpose[{prepositions[[All,1]],prepositions[[All,2]],prepositions[[All,3]]}];
prepositions2=prepositions[[All,{1,3}]];
(*
cc={0,0,0};RM=IdentityMatrix[3];
prepositions=(
v=RotationMatrix[startangle,{0,0,1}].{#\[LeftDoubleBracket]2\[RightDoubleBracket]*If[bends===True,sinc[If[vbends===True,-Sin[#[[5]]],Cos[#[[5]]]]#\[LeftDoubleBracket]3\[RightDoubleBracket]],1],-#\[LeftDoubleBracket]2\[RightDoubleBracket]*If[bends===True,cosc[If[vbends===True,-Sin[#[[5]]],Cos[#[[5]]]]#\[LeftDoubleBracket]3\[RightDoubleBracket]],0],0};
rm=Switch[#\[LeftDoubleBracket]1\[RightDoubleBracket],
"dipole",If[bends===True,
If[vbends===True,
RotationMatrix[Cos[#[[5]]]#\[LeftDoubleBracket]3\[RightDoubleBracket],{0,1,0}].RotationMatrix[Sin[#[[5]]]#\[LeftDoubleBracket]3\[RightDoubleBracket],{0,0,1}],
RotationMatrix[Sin[#[[5]]]#\[LeftDoubleBracket]3\[RightDoubleBracket],{0,1,0}].RotationMatrix[Cos[#[[5]]]#\[LeftDoubleBracket]3\[RightDoubleBracket],{0,0,1}]
],IdentityMatrix[3]],
"quadrupole",If[bends===True&&errors===True,angle=GetMADErrors[Evaluate[#\[LeftDoubleBracket]-1,1\[RightDoubleBracket]],Global`MADdx]*#\[LeftDoubleBracket]-1,3\[RightDoubleBracket]*#\[LeftDoubleBracket]-1,4\[RightDoubleBracket];RotationMatrix[0,{1,1,1}].RotationMatrix[angle,{0,0,1}],IdentityMatrix[3]],
_,IdentityMatrix[3]];
RM=RM.rm;
cc+=RM.v)&/@lattice;
prepositions2=prepositions\[LeftDoubleBracket]All,{1,2}\[RightDoubleBracket];*)

xform[{\[Theta]_,tilt_,length_},{x_,r_}]:=Block[{dx,n,rt,rp},
dx=r.({
 {Cos[tilt], -Sin[tilt], 0},
 {Sin[tilt], Cos[tilt], 0},
 {0, 0, 1}
}).({
 {Limit[length/\[Theta]1 (Cos[\[Theta]1]-1),\[Theta]1->\[Theta]]},
 {0},
 {Limit[length/\[Theta]1 Sin[\[Theta]1],\[Theta]1->\[Theta]]}
});
rt=Transpose[r];
n=rt[[2]]Cos[tilt]-rt[[1]]Sin[tilt];
rp=Outer[Times,rt.n,n](1-Cos[\[Theta]])+rt Cos[\[Theta]]+{Cross[rt[[1]],n],Cross[rt[[2]],n],Cross[rt[[3]],n]}Sin[\[Theta]];
{x+dx,Transpose[rp]}
];
x={({
 {0},
 {0},
 {0}
})};
localXYZ=IdentityMatrix[3];
Block[{},
{x1,localXYZ}=xform[{If[bends,-#[[3]],0],-#[[5]],#[[2]]},{x[[-1]],localXYZ}];
AppendTo[x,x1]]&/@lattice;
prepositions2=Rest[x[[All,{3,1},1]]];

If[errors===True,
prepositions2=Block[{err},If[#[[2,2]]==="Quadrupole"&&Abs[err=GetMADErrors[Evaluate[#[[2,1]]],"dx"]]>0,#[[1]]+{0,err},#[[1]]]]&/@Transpose[{prepositions2,Append[Rest[MADFlatten[lattice][[All,{1,2}]]],{"",""}]}];
];

Switch[Length[offset],
0,prepositions=(ReplacePart[#1,#1[[2]]+offset,2]&)/@prepositions2;,
2,prepositions=(ReplacePart[ReplacePart[#1,#1[[2]]+offset[[2]],2],#1[[1]]+offset[[1]],1]&)/@prepositions2,
_,prepositions=prepositions2;];

layout=(pelement[#1[[1,1]],#1[[2]],#1[[1,2]] ,If[bends===True,If[vbends===True,Sin[#[[1,5]]],Cos[#[[1,5]]]]#1[[1,3]],0],#1[[3]],#1[[1,4]],Join[{opts},{Element->#[[1,-1]]},{FancyElements->fancy}]]&)/@#&/@
Split[Sort[MapThread[List,{Rest[lattice],Drop[prepositions,-1],Rest[findrotations],Rest[findrotationsv]}]],#1[[1,1]]===#2[[1,1]]&];
acceleratorlayout=Graphics[layout,optShow];

If[(ShowPicture/. {opts}/. Options[MADDraw])===True,Show[acceleratorlayout,Sequence@@optShow,AspectRatio->Automatic,BaseStyle->{FontSize->Fontsize/. {opts}/. Options[MADDraw],FontWeight->"Bold"},ImageSize->Imagesize/. {opts}/. Options[MADDraw],PlotLabel->DrawLabel/. {opts}/. Options[MADDraw]]];

If[closed===True,If[Abs[First[prepositions][[1]]-Last[prepositions][[1]]]<1/10^6&&Abs[First[prepositions][[2]]-Last[prepositions][[2]]]<1/10^6,Print["Lattice is Closed to Micron Level"],Print["Lattice is not closed, difference is X="<>ToString[Last[prepositions][[1]]-First[prepositions][[1]]]<>", Y="<>ToString[Last[prepositions][[2]]-First[prepositions][[2]]]]]];acceleratorlayout]


(* ::Input::Initialization:: *)
MADDraw[data_,opts___]:=Block[{text,thick,bpms,lengths,filled,widthscale,symms,bends,closed,offset,optShow,a,b,c,lattice,rot,sinc,cosc,sym,findrotations,findrotationsv,cc,sum1,layout,acceleratorlayout,bpmcircle,fancy,vbends},
text=Labels/.{opts}/.Options[MADDraw];
If[text,MADDrawText=True,MADDrawText=False];
autolabels=Global`AutoLabels/.{opts}/.{Global`AutoLabels->False};
lengths=Lengths/.{opts}/.Options[MADDraw];
symms=Symms/.{opts}/.Options[MADDraw];
bpms=Monitors/.{opts}/.Options[MADDraw];
bpmcircle=Global`BPMCircles/.{opts}/.{Global`BPMCircles->False};
vbends=Global`VerticalBends/.{opts}/.{Global`VerticalBends->False};
Switch[bpmcircle,True,BPMCIRCLESIZE=0.1wq,_Integer|_Real,BPMCIRCLESIZE=bpmcircle wq];

a=MADFlatten[data];
If[bpms===True,b=a,b=Select[a,#1[[2]]=!="BPM"&]];

tilt[element_]:=Switch[element[[2]],
"SectorBend",ToExpression[Symbol[ToString[element[[1]]]<>"Extra"]][[7]] ,
"RectBend",ToExpression[Symbol[ToString[element[[1]]]<>"Extra"]][[7]] ,
_,0];

c=({If[#1[[2]]==="SectorBend"||#1[[2]]==="RectBend","dipole",If[(bpmcircle=!=False)&&StringMatchQ[#[[2]],"BPM"],"bpmcircle",ToLowerCase[#1[[2]]]]],#1[[3]],If[#1[[2]]==="SectorBend"||#1[[2]]==="RectBend",N[-#1[[6]]],0],If[text,If[lengths===True,#1[[7]]<>"["<>ToString[#1[[3]]]<>"m]",#1[[7]]],If[autolabels,MADDrawText=True;ToString[#[[1]]],If[lengths===True,"["<>ToString[#1[[3]]]<>"m]",""]]],tilt[#1],#}&)/@b;
If[symms===True,c=Prepend[c,sym];c=Prepend[c,sym];c=Append[c,sym];c=Append[c,sym];,c=Prepend[c,{"drift",0,0,"",0}];c=Append[c,{"drift",0,0,"",0}];];
lattice=c;

BaseMADDraw[lattice,opts]
]


(* ::Input::Initialization:: *)
changeKEYWORD[KEYWORD_]:=StringReplace[ToString[#],{"DRIF"->"drift","KICK"->"hkicker","HKIC"->"hkicker","MONI"->"bpm","MULT"->"multipole","QUAD"->"quadrupole","SBEN"->"dipole","RBEN"->"dipole","VKIC"->"vkicker","    "->"drift","MARK"->"marker","SEXT"->"sextupole","RFCA"->"rfc","OCTU"->"octupole","INST"->"bpm","WIRE"->"bpm","RCOL"->"rcollimator","ECOL"->"ecollimator","LCAV"->"lcav","MATR"->"marker","SOLE"->"solenoid"}]&/@KEYWORD;


(* ::Input::Initialization:: *)
readSurveyFile[filename_,text_:False]:=Block[{c},
mfsInterpret[surveyTapeRead[filename],mfsDrop->False];
c=Transpose[{changeKEYWORD[Global`KEYWORD],Global`L,-Global`ANGLE,If[text,Global`NAME,Table["",{Length[Global`NAME]}]],Global`THETA}];
c=Append[c,{"drift",0,0,"",0}];
p=Append[Transpose[{Global`Z,Global`X,Global`Y}],{0,0,0}];
{c,p}]


(* ::Input::Initialization:: *)
MADDrawSurvey[filename_String,opts___]:=Block[{text,c,p},

text=Labels/.{opts}/.Options[MADDraw];

{c,p}=readSurveyFile[filename,text];

baseMADDrawSurvey[c,p,opts]
]


(* ::Input::Initialization:: *)
MADDrawSurvey[filename_List,opts___]:=Block[{text,c},
text=Labels/.{opts}/.Options[MADDraw];
c=Flatten[readSurveyFile[#,text]&/@filename,1];
baseMADDrawSurvey[c,opts];
]


(* ::Input::Initialization:: *)
baseMADDrawSurvey[latticein_,prepositionsin_,opts___]:=Block[{theta,lattice,rot,roty,sinc,cosc,sinc2,sym,test,autolabels,thick,bpms,lengths,filled,widthscale,symms,bends,closed,offset,bpmcircle,textoscillate,fancyelements,anglesum,findrotations,findrotationsv,cc,RM,prepositions,prepositions2,v,rm,sum1,startangle,layout,fancy,optShow,ar},
ar=AspectRatio/.{opts}/.{AspectRatio->1};
theta=latticein[[All,5]];
lattice=latticein;
(*BaseMADDraw[lattice,opts]*)
text=Labels/.{opts}/.Options[MADDraw];
If[text,MADDrawText=True,MADDrawText=False];
autolabels=Global`AutoLabels/.{opts}/.{Global`AutoLabels->False};
thick=Thickness/.{opts}/.Options[MADDraw];
bpms=Monitors/.{opts}/.Options[MADDraw];
lengths=Lengths/.{opts}/.Options[MADDraw];
filled=Filled/.{opts}/.Options[MADDraw];
If[filled,shape="Polygon",shape="Line"];
widthscale=WidthScale/.{opts}/.Options[MADDraw];
symms=Symms/.{opts}/.Options[MADDraw];
bends=Bends/.{opts}/.Options[MADDraw];
closed=CheckClosed/.{opts}/.Options[MADDraw];
offset=Offset/.{opts}/.Options[MADDraw];
bpmcircle=Global`BPMCircles/.{opts}/.{Global`BPMCircles->False};
Switch[bpmcircle,True,BPMCIRCLESIZE=0.1wq,_Integer|_Real,BPMCIRCLESIZE=bpmcircle wq];
textoscillate=Global`TextOscillate/.{opts}/.{Global`TextOscillate->True};
If[textoscillate===True,TEXTOSCILLATE=1,TEXTOSCILLATE=0];
fancyelements=FancyElements/.{opts}/.{FancyElements->False};
anglesum=startangle=Global`AngleOffset/.{opts}/.{Global`AngleOffset->0};
optShow=Join[{Sequence@@FilterRules[Flatten[{opts}],Options[Graphics]]},{Sequence@@FilterRules[Flatten[{opts}],Options[Show]]},{Sequence@@FilterRules[Options[MADDraw],Options[Show]]}];

MADDrawRot[{x_,y_},\[Theta]_]:={x Cos[\[Theta]]-y Sin[\[Theta]],x Sin[\[Theta]]+y Cos[\[Theta]]};
roty[line_,\[Theta]_]:={line[[1]] Sin[\[Theta]]-line[[2]] Cos[\[Theta]],line[[1]] Cos[\[Theta]]+line[[2]] Sin[\[Theta]]};
sinc[\[Theta]_]:=If[Abs[\[Theta]]>0,Sin[\[Theta]]/\[Theta],1];
cosc[\[Theta]_]:=If[Abs[\[Theta]]>0,(1-Cos[\[Theta]])/\[Theta],0];
sinc2[\[Theta]_]:=If[Abs[\[Theta]]>0,Sin[\[Theta]]/\[Theta],0];
sym={"symmline",0,0,"",0};

cc={0,0,0};RM=IdentityMatrix[3];
prepositions=prepositionsin;
(*(
v=RotationMatrix[startangle+#\[LeftDoubleBracket]5\[RightDoubleBracket],{0,0,1}].{#\[LeftDoubleBracket]2\[RightDoubleBracket],0,0};
rm=IdentityMatrix[3];
RM=RM.rm;
cc+=RM.v)&/@lattice;*)
prepositions2=prepositions[[All,{1,2}]];

Switch[Length[offset],
0,prepositions=(ReplacePart[#1,#1[[2]]+offset,2]&)/@prepositions2;,
2,prepositions=(ReplacePart[ReplacePart[#1,#1[[2]]+offset[[2]],2],#1[[1]]+offset[[1]],1]&)/@prepositions2,
_,prepositions=prepositions2;];
layout=(pelement[#1[[1,1]],#1[[2]],#1[[1,2]] ,#[[1,3]],(#1[[1,5]]+startangle-#[[1,3]]),#1[[1,4]],Join[{opts},Cases[#[[1]],_Rule],{FancyElements->fancy}]]&)/@#&/@Split[Sort[MapThread[List,{Rest[lattice],Most[prepositions]}]],#1[[1,1]]===#2[[1,1]]&];
acceleratorlayout=Graphics[layout,optShow];

If[(ShowPicture/. {opts}/. Options[MADDraw])===True,Show[acceleratorlayout,Sequence@@optShow,AspectRatio->Automatic,BaseStyle->{FontSize->Fontsize/. {opts}/. Options[MADDraw],FontWeight->"Bold"},ImageSize->Imagesize/. {opts}/. Options[MADDraw],PlotLabel->DrawLabel/. {opts}/. Options[MADDraw]]];

If[closed===True,If[Abs[First[prepositions][[1]]-Last[prepositions][[1]]]<1/10^6&&Abs[First[prepositions][[2]]-Last[prepositions][[2]]]<1/10^6,Print["Lattice is Closed to Micron Level"],Print["Lattice is not closed, difference is X="<>ToString[Last[prepositions][[1]]-First[prepositions][[1]]]<>", Y="<>ToString[Last[prepositions][[2]]-First[prepositions][[2]]]]]];acceleratorlayout
]


(* ::Input::Initialization:: *)
baseMADDrawSurvey2[latticein_,opts___]:=Block[{theta,lattice,rot,roty,sinc,cosc,sinc2,sym,test,autolabels,thick,bpms,lengths,filled,widthscale,symms,bends,closed,offset,bpmcircle,textoscillate,fancyelements,anglesum,findrotations,findrotationsv,cc,RM,prepositions,prepositions2,v,rm,sum1,startangle,layout,fancy,optShow,ar},
ar=AspectRatio/.{opts}/.{AspectRatio->1};
theta=latticein[[All,5]];
lattice=latticein;
BaseMADDraw[lattice,opts]
(*text=Labels/.{opts}/.Options[MADDraw];
If[text,MADDrawText=True,MADDrawText=False];
autolabels=Global`AutoLabels/.{opts}/.{Global`AutoLabels\[Rule]False};
thick=Thick/.{opts}/.Options[MADDraw];
bpms=Monitors/.{opts}/.Options[MADDraw];
lengths=Lengths/.{opts}/.Options[MADDraw];
filled=Filled/.{opts}/.Options[MADDraw];
If[filled,shape="Polygon",shape="Line"];
widthscale=WidthScale/.{opts}/.Options[MADDraw];
symms=Symms/.{opts}/.Options[MADDraw];
bends=Bends/.{opts}/.Options[MADDraw];
closed=CheckClosed/.{opts}/.Options[MADDraw];
offset=Offset/.{opts}/.Options[MADDraw];
bpmcircle=Global`BPMCircles/.{opts}/.{Global`BPMCircles\[Rule]False};
Switch[bpmcircle,True,BPMCIRCLESIZE=0.1wq,_Integer|_Real,BPMCIRCLESIZE=bpmcircle wq];
textoscillate=Global`TextOscillate/.{opts}/.{Global`TextOscillate\[Rule]True};
If[textoscillate===True,TEXTOSCILLATE=1,TEXTOSCILLATE=0];
fancyelements=FancyElements/.{opts}/.{FancyElements\[Rule]False};
anglesum=startangle=Global`AngleOffset/.{opts}/.{Global`AngleOffset\[Rule]0};
optShow=Join[{Sequence@@FilterRules[Flatten[{opts}],Options[Graphics]]},{Sequence@@FilterRules[Flatten[{opts}],Options[Show]]},{Sequence@@FilterRules[Options[MADDraw],Options[Show]]}];

MADDrawRot[{x_,y_},\[Theta]_]:={x Cos[\[Theta]]-y Sin[\[Theta]],x Sin[\[Theta]]+y Cos[\[Theta]]};
roty[line_,\[Theta]_]:={line\[LeftDoubleBracket]1\[RightDoubleBracket] Sin[\[Theta]]-line\[LeftDoubleBracket]2\[RightDoubleBracket] Cos[\[Theta]],line\[LeftDoubleBracket]1\[RightDoubleBracket] Cos[\[Theta]]+line\[LeftDoubleBracket]2\[RightDoubleBracket] Sin[\[Theta]]};
sinc[\[Theta]_]:=If[Abs[\[Theta]]>0,Sin[\[Theta]]/\[Theta],1];
cosc[\[Theta]_]:=If[Abs[\[Theta]]>0,(1-Cos[\[Theta]])/\[Theta],0];
sinc2[\[Theta]_]:=If[Abs[\[Theta]]>0,Sin[\[Theta]]/\[Theta],0];
sym={"symmline",0,0,"",0};

cc={0,0,0};RM=IdentityMatrix[3];
prepositions=(
v=RotationMatrix[startangle+#\[LeftDoubleBracket]5\[RightDoubleBracket],{0,0,1}].{#\[LeftDoubleBracket]2\[RightDoubleBracket],0,0};
rm=IdentityMatrix[3];
RM=RM.rm;
cc+=RM.v)&/@lattice;
prepositions2=prepositions\[LeftDoubleBracket]All,{1,2}\[RightDoubleBracket];

Switch[Length[offset],
0,prepositions=(ReplacePart[#1,#1\[LeftDoubleBracket]2\[RightDoubleBracket]+offset,2]&)/@prepositions2;,
2,prepositions=(ReplacePart[ReplacePart[#1,#1\[LeftDoubleBracket]2\[RightDoubleBracket]+offset\[LeftDoubleBracket]2\[RightDoubleBracket],2],#1\[LeftDoubleBracket]1\[RightDoubleBracket]+offset\[LeftDoubleBracket]1\[RightDoubleBracket],1]&)/@prepositions2,
_,prepositions=prepositions2;];
layout=(pelement[#1\[LeftDoubleBracket]1,1\[RightDoubleBracket],#1\[LeftDoubleBracket]2\[RightDoubleBracket],#1\[LeftDoubleBracket]1,2\[RightDoubleBracket] ,-#\[LeftDoubleBracket]1,3\[RightDoubleBracket]/5,(#1\[LeftDoubleBracket]1,5\[RightDoubleBracket]+startangle),#1\[LeftDoubleBracket]1,4\[RightDoubleBracket],Join[{opts},Cases[#\[LeftDoubleBracket]1\[RightDoubleBracket],_Rule],{FancyElements\[Rule]fancy}]]&)/@#&/@Split[Sort[MapThread[List,{Rest[lattice],Most[prepositions]}]],#1\[LeftDoubleBracket]1,1\[RightDoubleBracket]===#2\[LeftDoubleBracket]1,1\[RightDoubleBracket]&];
acceleratorlayout=Graphics[layout,optShow];

If[(ShowPicture/.{opts}/.Options[MADDraw])===True,Show[acceleratorlayout,Sequence@@optShow,AspectRatio\[Rule]Automatic,BaseStyle\[Rule]{FontSize\[Rule]Fontsize/.{opts}/.Options[MADDraw],FontWeight\[Rule]"Bold"},ImageSize\[Rule]Imagesize/.{opts}/.Options[MADDraw],PlotLabel\[Rule]DrawLabel/.{opts}/.Options[MADDraw]]];

If[closed===True,If[Abs[First[prepositions]\[LeftDoubleBracket]1\[RightDoubleBracket]-Last[prepositions]\[LeftDoubleBracket]1\[RightDoubleBracket]]<1/10^6&&Abs[First[prepositions]\[LeftDoubleBracket]2\[RightDoubleBracket]-Last[prepositions]\[LeftDoubleBracket]2\[RightDoubleBracket]]<1/10^6,Print["Lattice is Closed to Micron Level"],Print["Lattice is not closed, difference is X="<>ToString[Last[prepositions]\[LeftDoubleBracket]1\[RightDoubleBracket]-First[prepositions]\[LeftDoubleBracket]1\[RightDoubleBracket]]<>", Y="<>ToString[Last[prepositions]\[LeftDoubleBracket]2\[RightDoubleBracket]-First[prepositions]\[LeftDoubleBracket]2\[RightDoubleBracket]]]]];acceleratorlayout*)
]


(* ::Input::Initialization:: *)
MADPositions[data_,opts___]:=Block[{rot,roty,sinc,cosc,sinc2,sym,test,autolabels,thick,bpms,lengths,filled,widthscale,symms,bends,closed,offset,bpmcircle,textoscillate,fancyelements,anglesum,findrotations,findrotationsv,cc,RM,prepositions,prepositions2,v,rm,sum1,startangle,layout,fancy,optShow,b,a,c,lattice,tilt,text},
anglesum=startangle=Global`AngleOffset/.{opts}/.{Global`AngleOffset->0};
offset=Offset/.{opts}/.Options[MADDraw];
bends=Bends/.{opts}/.Options[MADDraw];
text=False;
autolabels=False;

a=MADFlatten[data];

tilt[element_]:=Switch[element[[2]],
"SectorBend",ToExpression[Symbol[ToString[element[[1]]]<>"Extra"]][[7]] ,
"RectBend",ToExpression[Symbol[ToString[element[[1]]]<>"Extra"]][[7]] ,
_,0];

c=({If[#1[[2]]==="SectorBend"||#1[[2]]==="RectBend","dipole",If[(bpmcircle=!=False)&&StringMatchQ[#[[2]],"BPM"],"bpmcircle",ToLowerCase[#1[[2]]]]],#1[[3]],If[#1[[2]]==="SectorBend"||#1[[2]]==="RectBend",N[-#1[[6]]],0],If[text,If[lengths===True,#1[[7]]<>"["<>ToString[#1[[3]]]<>"m]",#1[[7]]],""],tilt[#1],#}&)/@a;
If[symms===True,c=Prepend[c,sym];c=Prepend[c,sym];c=Append[c,sym];c=Append[c,sym];,c=Prepend[c,{"drift",0,0,"",0}];c=Append[c,{"drift",0,0,"",0}];];
lattice=c;
MADDrawRot[{x_,y_},\[Theta]_]:={x Cos[\[Theta]]-y Sin[\[Theta]],x Sin[\[Theta]]+y Cos[\[Theta]]};
roty[line_,\[Theta]_]:={line[[1]] Sin[\[Theta]]-line[[2]] Cos[\[Theta]],line[[1]] Cos[\[Theta]]+line[[2]] Sin[\[Theta]]};
sinc[\[Theta]_]:=Sin[\[Theta]]/\[Theta];
sinc[0]=1;
cosc[\[Theta]_]:=(1-Cos[\[Theta]])/\[Theta];
cosc[0]=0;
sinc2[\[Theta]_]:=Sin[\[Theta]]/\[Theta];
sym={"symmline",0,0,"",0};

If[bends===True,findrotations=((anglesum+=#1[[3]]&)/@Drop[Prepend[lattice,{0,0,0,"",0}],-1]),findrotations=Table[0.,{Length[c]}]];

findrotationsv=(sum1=0;(sum1+=#1[[5]]&)/@Drop[Prepend[lattice,{0,0,0,"",0}],-1]);

cc={0,0,0};RM=IdentityMatrix[3];
prepositions=(
v=RotationMatrix[startangle,{0,0,1}].{#[[2]]*If[bends===True,sinc[#[[3]]],1],-#[[2]]*If[bends===True,cosc[#[[3]]],0],0};
rm=If[#[[1]]==="dipole",If[bends===True,RotationMatrix[Sign[#[[3]]]#[[5]],{1,1,1}].RotationMatrix[#[[3]],{0,0,1}],IdentityMatrix[3]],IdentityMatrix[3]];
RM=RM.rm;
cc+=RM.v)&/@lattice;
prepositions2=prepositions[[All,{1,2}]];

Rest[MapThread[List,{RotateRight[prepositions2,1],lattice,findrotations}]]
]


(* ::Input::Initialization:: *)
MADFootPrint[lattice_]:={(Max[#[[1]]]-Min[#[[1]]]),(Max[#[[2]]]-Min[#[[2]]])}&[Transpose[MADPositions[lattice][[All,1,{1,2}]]]]


(* ::Input::Initialization:: *)
MADPositions2[latticein_,opts___]:=Block[{anglesum,bends,findrotations,cc,RM,v,rm,startangle,prepositions,prepositions2,offset,angle,lattice},
anglesum=startangle=Global`AngleOffset/.{opts}/.{Global`AngleOffset->0};
bends=Bends/.{opts}/.Options[MADDraw];
offset=Offset/.{opts}/.Options[MADDraw];

sinc[\[Theta]_]:=If[Abs[\[Theta]]>0,Sin[\[Theta]]/\[Theta],1];
cosc[\[Theta]_]:=If[Abs[\[Theta]]>0,(1-Cos[\[Theta]])/\[Theta],0];


lattice=({If[#1[[2]]==="SectorBend"||#1[[2]]==="RectBend","dipole",ToLowerCase[#1[[2]]]],#1[[3]],If[#1[[2]]==="SectorBend"||#1[[2]]==="RectBend",N[-#1[[6]]],0],"",0,#}&)/@MADFlatten[latticein];
(*Print[lattice];*)

If[bends===True,findrotations=(
Switch[#[[1]],
"dipole",anglesum+=#1[[3]],
"quadrupole",anglesum+=GetMADErrors[Evaluate[#[[-1,1]]],Global`MADdx]*#[[-1,3]]*#[[-1,4]],
_,0]&/@Drop[Prepend[lattice,{0,0,0,"",0}],-1]),findrotations=Table[0.,{Length[lattice]}]];

cc={0,0,0};RM=IdentityMatrix[3];
prepositions=(
v=RotationMatrix[startangle,{0,0,1}].{#[[2]]*If[bends===True,sinc[#[[3]]],1],-#[[2]]*If[bends===True,cosc[#[[3]]],0],0};
rm=Switch[#[[1]],
"dipole",If[bends===True,RotationMatrix[Sign[#[[3]]]#[[5]],{1,1,1}].RotationMatrix[#[[3]],{0,0,1}],IdentityMatrix[3]],
"quadrupole",If[bends===True,angle=GetMADErrors[Evaluate[#[[-1,1]]],Global`MADdx]*#[[-1,3]]*#[[-1,4]];RotationMatrix[0,{1,1,1}].RotationMatrix[angle,{0,0,1}],IdentityMatrix[3]],
_,IdentityMatrix[3]];
RM=RM.rm;
cc+=RM.v)&/@lattice;
prepositions2=prepositions[[All,{1,2}]];

Switch[Length[offset],
0,prepositions=(ReplacePart[#1,#1[[2]]+offset,2]&)/@prepositions2;,
2,prepositions=(ReplacePart[ReplacePart[#1,#1[[2]]+offset[[2]],2],#1[[1]]+offset[[1]],1]&)/@prepositions2,
_,prepositions=prepositions2;];
MapThread[Chop@Flatten[{##}]&,{prepositions,findrotations,MADFlatten[lattice][[All,{1,7}]]}]
]


(* ::Input::Initialization:: *)
MADElementCoordinates[lattice_,opts___]:=Block[{},
Select[{#[[2,5]],Partition[#,2,1][[All,All,{1,2,3}]][[1]]}&/@Partition[Prepend[MADPositions2[lattice,opts],{0,0,0}],2,1],Length[#]>0&]
]


(* ::Input::Initialization:: *)
PolyCuboid[{xmin_,ymin_,zmin_},{xmax_,ymax_,zmax_}]:=Polygon[#]&/@{{{xmin,ymin,zmin},{xmax,ymin,zmin},{xmax,ymin,zmax},{xmin,ymin,zmax}},{{xmax,ymin,zmin},{xmax,ymax,zmin},{xmax,ymax,zmax},{xmax,ymin,zmax}},{{xmin,ymax,zmin},{xmax,ymax,zmin},{xmax,ymax,zmax},{xmin,ymax,zmax}},{{xmin,ymin,zmin},{xmin,ymax,zmin},{xmin,ymax,zmax},{xmin,ymin,zmax}},{{xmin,ymin,zmax},{xmax,ymin,zmax},{xmax,ymax,zmax},{xmin,ymax,zmax}},{{xmin,ymin,zmin},{xmax,ymin,zmin},{xmax,ymax,zmin},{xmin,ymax,zmin}}}


(* ::Input::Initialization:: *)
TranslateShape[gr_,vec_]:=Translate[gr,vec]


(* ::Input::Initialization:: *)
AffineShape[gr_,vec_]:=Scale[gr,vec,{0,0,0}]


(* ::Input::Initialization:: *)
RotateShape[gr_,phi_,theta_,psi_]:=Rotate[Rotate[Rotate[gr,phi,{0,0,-1}],psi,{0,0,-1}],theta,{-1,0,0}]


(* ::Input::Initialization:: *)
RotateShape[gr_,theta_,phi_,psi_]:=Rotate[Rotate[Rotate[gr,theta,{1,0,0}],psi,{0,0,1}],phi,{0,1,0}]


(* ::Input::Initialization:: *)
Cylinder5[r_,h_,n_]:=Cylinder[{{0,0,-h},{0,0,h}},r]


(* ::Input::Initialization:: *)
barrelface[order_]:=Polygon[{{-1 Tan[\[Pi]/(4order)],-1,-0.5},{-1 Tan[\[Pi]/(4order)],-1,0.5},{1 Tan[\[Pi]/(4order)],-1,0.5},{1 Tan[\[Pi]/(4order)],-1,-0.5}}]


(* ::Input::Initialization:: *)
barrel[order_]:=Table[RotateShape[barrelface[order],0,0,i],{i,0,2\[Pi],\[Pi]/(2 order)}]


(* ::Input::Initialization:: *)
face[order_]:=Polygon[{{-Tan[\[Pi]/(4order)],-1,0},{Tan[\[Pi]/(4order)],-1,0},{0.6Tan[\[Pi]/(4order)],-0.6,0},{-0.6Tan[\[Pi]/(4order)],-0.6,0}}]


(* ::Input::Initialization:: *)
faceplate[order_]:=Table[RotateShape[face[order],0,0,i],{i,0,2\[Pi],\[Pi]/(2order)}]


(* ::Input::Initialization:: *)
sinc[\[Theta]_]:=If[\[Theta]==0,1,Sin[\[Theta]]/\[Theta]];cosc[\[Theta]_]:=If[\[Theta]==0,0,(1-Cos[\[Theta]])/\[Theta]];


(* ::Input::Initialization:: *)
MADDrawRot[line_,\[Theta]_]:={line[[1]] Cos[\[Theta]]-line[[2]] Sin[\[Theta]],line[[1]] Sin[\[Theta]]+line[[2]] Cos[\[Theta]]};


(* ::Input::Initialization:: *)
Arc3D[length_,bend_,{x_,y_,z_},{theta_:0,phi_:0,psi_:0}]:=Block[{l=length/bend},
{AbsoluteThickness[3],TranslateShape[RotateShape[RotateShape[Line[Table[{l (Cos[i]-1),l Sin[i],z},{i,0,-bend,-(bend/12)}]],0,phi,psi-bend+\[Pi]],theta,0,0],{y,x,z}]}]


(* ::Input::Initialization:: *)
dipoleblocks = Flatten[{PolyCuboid[{-1/3, -1, -0.5}, {1, -2/3, 0.5}], PolyCuboid[{-1/3, 2/3, -0.5}, {1, 1, 0.5}], PolyCuboid[{2/3, -2/3, -0.5}, {1, 2/3, 0.5}], PolyCuboid[{-1/3, -2/3, -0.5}, {1/3, -0.45, 0.5}], PolyCuboid[{-1/3, 0.2, -0.5}, {1/3, 2/3, 0.5}]}, 1];


(* ::Input::Initialization:: *)
Dipole3D[length_,width_,{x_,y_,z_},{theta_:0,phi_:0,psi_:0}]:=TranslateShape[RotateShape[RotateShape[RotateShape[TranslateShape[AffineShape[dipoleblocks,{width/2,width/2,length}],{-(width/10),0,length/2}],\[Pi]/2,\[Pi],0],0,phi,psi],-theta,0,0],{y,x,z}]


(* ::Input::Initialization:: *)
Graphics3D[Dipole3D[1,1,{1,2,1},{0,0,0}]]


(* ::Input::Initialization:: *)
quadbarrel=AffineShape[barrel[2],{#,#,1}]&/@{0.3,0.5};


(* ::Input::Initialization:: *)
Graphics3D[quadbarrel,Axes->True]


(* ::Input::Initialization:: *)
quadfaces=TranslateShape[AffineShape[faceplate[2],{0.5,0.5,1}],{0,0,#}]&/@{-0.5,0.5};


(* ::Input::Initialization:: *)
Graphics3D[quadfaces,Axes->True]


(* ::Input::Initialization:: *)
quadpoles=Flatten[Table[RotateShape[PolyCuboid[{0.1,-0.07,-0.5},{0.3 ,0.07,0.5}],0,0,theta],{theta,\[Pi]/4,2\[Pi],\[Pi]/2}],1];


(* ::Input::Initialization:: *)
Graphics3D[quadpoles,Axes->True]


(* ::Input::Initialization:: *)
Quadrupole3D[length_,width_,{x_,y_,z_},{theta_:0,phi_:0,psi_:0}]:={TranslateShape[RotateShape[RotateShape[TranslateShape[AffineShape[{quadbarrel,quadfaces,quadpoles},{width,width,length}],{0,0,length/2}],0,\[Pi]/2,0],theta,phi,psi],{y,x,z}]}


(* ::Input::Initialization:: *)
Quadrupole3D[length_,width_,{x_,y_,z_},{theta_:0,phi_:0,psi_:0}]:={TranslateShape[RotateShape[RotateShape[RotateShape[TranslateShape[AffineShape[{quadbarrel,quadfaces,quadpoles},{width,width,length}],{0,0,length/2}],0,\[Pi]/2,0],0,0,psi],theta,0,0],{y,x,z}]}


(* ::Input::Initialization:: *)
Graphics3D[Quadrupole3D[1,1,{0,0,0},{0,0,0}],Axes->True]


(* ::Input::Initialization:: *)
sextbarrel=AffineShape[barrel[3],{#,#,1}]&/@{0.3,0.5};


(* ::Input::Initialization:: *)
Graphics3D[sextbarrel,Axes->True]


(* ::Input::Initialization:: *)
sextfaces=TranslateShape[AffineShape[faceplate[3],{0.5,0.5,1}],{0,0,#}]&/@{-0.5,0.5};


(* ::Input::Initialization:: *)
Graphics3D[sextfaces,Axes->True]


(* ::Input::Initialization:: *)
sextpoles=Flatten[Table[RotateShape[PolyCuboid[{0.15,-0.07,-0.5},{0.3 ,0.07,0.5}],0,0,theta],{theta,\[Pi]/6,2\[Pi],\[Pi]/3}],1];


(* ::Input::Initialization:: *)
Graphics3D[sextpoles,Axes->True]


(* ::Input::Initialization:: *)
Sextupole3D[length_,width_,{x_,y_,z_},{theta_:0,phi_:0,psi_:0}]:={TranslateShape[RotateShape[RotateShape[TranslateShape[AffineShape[{sextbarrel,sextfaces,sextpoles},{width,width,length}],{0,0,length/2}],0,\[Pi]/2,0],theta,phi,psi],{y,x,z}]}


(* ::Input::Initialization:: *)
Graphics3D[Sextupole3D[1,1,{0,0,0},{0,0,0}]]


(* ::Input::Initialization:: *)
octbarrel=AffineShape[barrel[4],{#,#,1}]&/@{0.3,0.5};


(* ::Input::Initialization:: *)
Graphics3D[octbarrel,Axes->True]


(* ::Input::Initialization:: *)
octfaces=TranslateShape[AffineShape[faceplate[4],{0.5,0.5,1}],{0,0,#}]&/@{-0.5,0.5};


(* ::Input::Initialization:: *)
Graphics3D[octfaces,Axes->True]


(* ::Input::Initialization:: *)
octpoles=Flatten[Table[RotateShape[PolyCuboid[{0.15,-0.07,-0.5},{0.3 ,0.07,0.5}],0,0,theta],{theta,\[Pi]/8,2\[Pi],\[Pi]/4}],1];


(* ::Input::Initialization:: *)
Graphics3D[octpoles,Axes->True]


(* ::Input::Initialization:: *)
Octupole3D[length_,width_,{x_,y_,z_},{theta_:0,phi_:0,psi_:0}]:={TranslateShape[RotateShape[RotateShape[TranslateShape[AffineShape[{octbarrel,octfaces,octpoles},{width,width,length}],{0,0,length/2}],0,\[Pi]/2,0],theta,phi,psi],{y,x,z}]}


(* ::Input::Initialization:: *)
Graphics3D[Octupole3D[1,1,{0,0,0},{0,0,0}]]


(* ::Input::Initialization:: *)
Line3D[length_,{x_,y_,z_},{theta_:0,phi_:0,psi_:0}]:={AbsoluteThickness[3],TranslateShape[RotateShape[RotateShape[Line[{{0,0,0},{0,length,0}}],0,phi,psi],theta,0,0],{y,x,z}]}


(* ::Input::Initialization:: *)
Line3D[1,{0,0,0},{-0Degree,-90Degree,-15  Degree}]//Graphics3D[#,Axes->True,AxesLabel->{"x","y","z"}]&


(* ::Input::Initialization:: *)
Arc3D[length_,bend_,{x_,y_,z_},{theta_:0,phi_:0,psi_:0}]:=Block[{l=length/bend},
{AbsoluteThickness[3],TranslateShape[RotateShape[Line[Table[{l (Cos[i]-1),l Sin[i],0},{i,0bend,-bend,-(bend/12)}]],theta,phi,psi-bend+\[Pi]],{y,x,z}]}]


(* ::Input::Initialization:: *)
BPM3D[length_,width_,{x_,y_,z_},{theta_:0,phi_:0,psi_:0}]:={TranslateShape[RotateShape[RotateShape[TranslateShape[AffineShape[{quadbarrel,quadfaces,quadpoles},{width,width,length}],{0,0,length/2}],0,\[Pi]/2,0],theta,phi,psi],{y,x,z}]}


(* ::Input::Initialization:: *)
Graphics3D[BPM3D[0.1,0.2,{0,0,0},{0,0,0}]]


(* ::Input::Initialization:: *)
rfcbarrel=AffineShape[barrel[7],{#,#,1}]&/@{0.3,0.5};


(* ::Input::Initialization:: *)
rfcfaces=TranslateShape[AffineShape[faceplate[7],{0.5,0.5,1}],{0,0,#}]&/@{-0.5,0.5};


(* ::Input::Initialization:: *)
RFCavity3D[length_,width_,{x_,y_,z_},{theta_:0,phi_:0,psi_:0}]:=TranslateShape [RotateShape[RotateShape[TranslateShape[AffineShape[{rfcbarrel,rfcfaces},{width,width,length}],{0,0,length/2}],\[Pi]/2,\[Pi]/2,0],theta,phi,psi],{y,x,z}]


(* ::Input::Initialization:: *)
Graphics3D[RFCavity3D[0.5,0.2,{0.5,1,0},{0,0,0}]]


(* ::Input::Initialization:: *)
Dipole3D[length_,width_,{x_,y_,z_},{theta_:0,phi_:0,psi_:0}]:=TranslateShape[RotateShape[RotateShape[RotateShape[TranslateShape[AffineShape[dipoleblocks,{width/2,width/2,length}],{-(width/10),0,length/2}],\[Pi]/2,\[Pi],0],0,phi,psi],-theta,0,0],{y,x,z}]


(* ::Input::Initialization:: *)
Clear[element];


(* ::Input::Initialization:: *)
element["sextupole",position_,length_,bend_,rotation_]:={Blue,Sextupole3D[length,widthscale*0.35,Flatten[{position,0}],{0,0,rotation}]};


(* ::Input::Initialization:: *)
element["bpm",position_,length_,bend_,rotation_]:={Purple,BPM3D[0,widthscale*0.4,position,{0,\[Pi]/4,rotation+\[Pi]/2}]};


(* ::Input::Initialization:: *)
element["bpm",position_,length_,bendh_,bendv_,rotationh_,rotationv_]:={Purple,BPM3D[length,widthscale*0.3,position,{rotationv,0,-rotationh+\[Pi]/2}]};


(* ::Input::Initialization:: *)
element["marker",position_,length_,bend_,rotation_]:={Green,BPM3D[0,widthscale*0.4,position,{0,\[Pi]/4,rotation+\[Pi]/2}]};


(* ::Input::Initialization:: *)
element["marker",position_,length_,bendh_,bendv_,rotationh_,rotationv_]:={Green,BPM3D[0,widthscale*0.4,position,{rotationv,\[Pi]/4,rotationh+\[Pi]/2}]};


(* ::Input::Initialization:: *)
element["hkicker",position_,length_,bend_,rotation_]:={Gray,Dipole3D[-length,widthscale*0.35,position,{0,0,\[Pi]+rotation}]};


(* ::Input::Initialization:: *)
element["vkicker",position_,length_,bend_,rotation_]:={Gray,Dipole3D[-length,widthscale*0.35,position,{0,0,\[Pi]+rotation}]};


(* ::Input::Initialization:: *)
element["kicker",position_,length_,bend_,rotation_]:={Gray,Dipole3D[-length,widthscale*0.35,position,{0,0,\[Pi]+rotation}]};


(* ::Input::Initialization:: *)
element["kicker",position_,length_,bendh_,bendv_,rotationh_,rotationv_]:={Blue,Specularity[Blue],Dipole3D[length, widthscale/2.5,position,{(1/2 bendv-rotationv) ,0,\[Pi]-(1/2 bendh+rotationh)}],Black,
Line3D[length,position,{rotationv,0,-rotationh}]};


(* ::Input::Initialization:: *)
element["quadrupole",position_,length_,bend_,rotation_]:={Red,Quadrupole3D[length,widthscale*0.5,position,{0,0,-rotation+\[Pi]/2}]};


(* ::Input::Initialization:: *)
element["quadrupole",position_,length_,bendh_,bendv_,rotationh_,rotationv_]:={Red,Quadrupole3D[length,widthscale*0.5,position,{rotationv,0,-rotationh+\[Pi]/2}]};


(* ::Input::Initialization:: *)
element["sextupole",position_,length_,bend_,rotation_]:={Blue,Sextupole3D[length,widthscale*0.5,position,{0,0,-rotation+\[Pi]/2}]};


(* ::Input::Initialization:: *)
element["sextupole",position_,length_,bendh_,bendv_,rotationh_,rotationv_]:={Blue,Sextupole3D[length,widthscale*0.5,position,{rotationv,0,-rotationh+\[Pi]/2}]};


(* ::Input::Initialization:: *)
element["rfc",position_,length_,bend_,rotation_]:={Green,RFCavity3D[length,widthscale*0.8,position,{0,0,rotation}]};


(* ::Input::Initialization:: *)
element["rfc",position_,length_,bendh_,bendv_,rotationh_,rotationv_]:={Green,RFCavity3D[length,widthscale*0.2,position,{rotationv,0,-rotationh+\[Pi]}]};


(* ::Input::Initialization:: *)
element["lcav",position_,length_,bend_,rotation_]:={Green,RFCavity3D[length,widthscale*0.8,Flatten[{position,0}],{0,0,rotation}]};


(* ::Input::Initialization:: *)
element["lcav",position_,length_,bendh_,bendv_,rotationh_,rotationv_]:={Green,RFCavity3D[length,widthscale*0.8,Flatten[{position,0}],{rotationv,0,rotationh}]};


(* ::Input::Initialization:: *)
element["drift",position_,length_,bend_,rotation_]:={Black,Line3D[length,position,{0,0,-rotation}]};


(* ::Input::Initialization:: *)
element["drift",position_,length_,bendh_,bendv_,rotationh_,rotationv_]:={Black,Arc3D[length,0.00001,position,{-rotationv,0,-rotationh}]};


(* ::Input::Initialization:: *)
element["symmline",position_,length_,bend_,rotation_]:={White,Line3D[length,position,{0,0,rotation}]};


(* ::Input::Initialization:: *)
element["symmline",position_,length_,bendh_,bendv_,rotationh_,rotationv_]:={White,Line3D[length,position,{rotationv,0,rotationh}]};


(* ::Input::Initialization:: *)
element["dipole",position_,length_,bendh_,bendv_,rotationh_,rotationv_]:={Blue,Specularity[Blue],Dipole3D[length, widthscale/1.5,position,{(1/2 bendv-rotationv) ,0,\[Pi]-(1/2 bendh+rotationh)}],Black,
Arc3D[length,bendh,position,{(bendv-rotationv),0,(bendh-rotationh)}]};


(* ::Input::Initialization:: *)
element["gwiggler",position_,length_,bendh_,bendv_,rotationh_,rotationv_]:={Orange,Specularity[Orange],Dipole3D[length, widthscale/4,position,{(1/2 bendv-rotationv) ,\[Pi],\[Pi]-(1/2 bendh+rotationh)}],Black,
Line3D[length,position,{rotationv,0,-rotationh}]};


(* ::Input::Initialization:: *)
MADDraw3D[data_,opts___]:=Block[{text,thick,bpms,lengths,filled,widthscale,symms,bends,closed,offset,optShow,a,b,c,rot,sinc,cosc,sym,pelement,wd,wq,ws,wo,wrf,wkick,findrotations,findrotationsv,cc,sum1,prepositions2,layout,acceleratorlayout,Drawdrift,anglesum=0},text=Labels/. {opts}/. Options[MADDraw];thick=Thick/. {opts}/. Options[MADDraw];bpms=Monitors/. {opts}/. Options[MADDraw];lengths=Lengths/. {opts}/. Options[MADDraw];filled=Filled/. {opts}/. Options[MADDraw];If[filled,shape="Polygon",shape="Line"];widthscale=WidthScale/. {opts}/. Options[MADDraw];symms=Symms/. {opts}/. Options[MADDraw];bends=Bends/. {opts}/. Options[MADDraw];closed=CheckClosed/. {opts}/. Options[MADDraw];offset=Offset/. {opts}/. Options[MADDraw];
vbends=Global`VerticalBends/.{opts}/.{Global`VerticalBends->False};optShow=Join[{Sequence@@FilterRules[Flatten[{opts}],Options[Graphics3D]]},{Sequence@@FilterRules[Flatten[{opts}],Options[Show]]}];a=MADFlatten[data];a=MADFlatten[data];
If[bpms===True,b=a,b=Select[a,#1[[2]]=!="BPM"&]];

tilt[element_]:=Switch[element[[2]],
"SectorBend",ToExpression[Symbol[ToString[element[[1]]]<>"Extra"]][[7]] ,
"RectBend",ToExpression[Symbol[ToString[element[[1]]]<>"Extra"]][[7]] ,
_,0];

c=({If[#1[[2]]==="SectorBend"||#1[[2]]==="RectBend","dipole",ToLowerCase[#1[[2]]]],#1[[3]],If[#1[[2]]==="SectorBend"||#1[[2]]==="RectBend",N[#1[[6]]],0],"",tilt[#1],#}&)/@b;
If[symms===True,c=Prepend[c,sym];c=Prepend[c,sym];c=Append[c,sym];c=Append[c,sym];,c=Prepend[c,{"drift",0,0,"",0}];c=Append[c,{"drift",0,0,"",0}];];
lattice=c;
(*cc={0,0,0};
prepositions2=(cc=cc+
If[
#\[LeftDoubleBracket]1,1\[RightDoubleBracket]==="dipole",
{#\[LeftDoubleBracket]1,2\[RightDoubleBracket]*If[bends===True,sinc[#\[LeftDoubleBracket]1,6\[RightDoubleBracket]],1],#\[LeftDoubleBracket]1,2\[RightDoubleBracket]*If[bends===True,cosc[#\[LeftDoubleBracket]1,6\[RightDoubleBracket]],0],0}.RotationMatrix[-#\[LeftDoubleBracket]2\[RightDoubleBracket],{0,0,1}],
{#\[LeftDoubleBracket]1,2\[RightDoubleBracket]*If[bends===True,sinc[#\[LeftDoubleBracket]1,6\[RightDoubleBracket]],1],#\[LeftDoubleBracket]1,2\[RightDoubleBracket]*If[bends===True,cosc[#\[LeftDoubleBracket]1,6\[RightDoubleBracket]],0],0}.RotationMatrix[-#\[LeftDoubleBracket]2\[RightDoubleBracket],{0,0,1}]])&/@MapThread[List,{lattice,findrotations}];*)

MADDrawRot[{x_,y_},\[Theta]_]:={x Cos[\[Theta]]-y Sin[\[Theta]],x Sin[\[Theta]]+y Cos[\[Theta]]};
roty[line_,\[Theta]_]:={line[[1]] Sin[\[Theta]]-line[[2]] Cos[\[Theta]],line[[1]] Cos[\[Theta]]+line[[2]] Sin[\[Theta]]};
sinc[\[Theta]_]:=If[Abs[\[Theta]]>0,Sin[\[Theta]]/\[Theta],1];
cosc[\[Theta]_]:=If[Abs[\[Theta]]>0,(1-Cos[\[Theta]])/\[Theta],0];
sinc2[\[Theta]_]:=If[Abs[\[Theta]]>0,Sin[\[Theta]]/\[Theta],0];
sym={"symmline",0,0,"",0};

If[bends===True,findrotations=(
Switch[#[[1]],
"dipole",anglesum+=Cos[#[[5]]]#1[[3]],
_,anglesum]&/@Drop[Prepend[lattice,{0,0,0,"",0}],-1]),findrotations=Table[0.,{Length[lattice]}]];

findrotationsv=(sum1=0;(sum1+=Sin[#[[5]]]#1[[3]]&)/@Drop[Prepend[lattice,{0,0,0,"",0}],-1]);

(*cc={0,0,0};RM=IdentityMatrix[3];startangle=0;
prepositions=(
v=RotationMatrix[startangle,{0,Sin[#[[5]]],Cos[#[[5]]]}].{#\[LeftDoubleBracket]2\[RightDoubleBracket]*If[bends===True,sinc[#\[LeftDoubleBracket]3\[RightDoubleBracket]],1],-#\[LeftDoubleBracket]2\[RightDoubleBracket]*If[bends===True,cosc[#\[LeftDoubleBracket]3\[RightDoubleBracket]],0]Cos[#[[5]]],-#\[LeftDoubleBracket]2\[RightDoubleBracket]*If[bends===True,sinc[#\[LeftDoubleBracket]3\[RightDoubleBracket]],0]Sin[#[[5]]]};
(*Print[v];*)
rm=Switch[#\[LeftDoubleBracket]1\[RightDoubleBracket],
"dipole",If[bends===True,RotationMatrix[Sin[#[[5]]]#\[LeftDoubleBracket]3\[RightDoubleBracket],{0,1,0}].RotationMatrix[Cos[#[[5]]]#\[LeftDoubleBracket]3\[RightDoubleBracket],{0,0,1}],IdentityMatrix[3]],
"quadrupole",If[bends===True,angle=GetMADErrors[Evaluate[#\[LeftDoubleBracket]-1,1\[RightDoubleBracket]],Global`MADdx]*#\[LeftDoubleBracket]-1,3\[RightDoubleBracket]*#\[LeftDoubleBracket]-1,4\[RightDoubleBracket];RotationMatrix[0,{1,1,1}].RotationMatrix[angle,{0,0,1}],IdentityMatrix[3]],
_,IdentityMatrix[3]];
RM=RM.rm;
cc+=RM.v)&/@lattice;
prepositions2=Transpose[{prepositions\[LeftDoubleBracket]All,1\[RightDoubleBracket],prepositions\[LeftDoubleBracket]All,2\[RightDoubleBracket],prepositions\[LeftDoubleBracket]All,3\[RightDoubleBracket]}];*)
xform[{\[Theta]_,tilt_,length_},{x_,r_}]:=Block[{dx,n,rt,rp},
dx=r.({
 {Cos[tilt], -Sin[tilt], 0},
 {Sin[tilt], Cos[tilt], 0},
 {0, 0, 1}
}).({
 {Limit[length/\[Theta]1 (Cos[\[Theta]1]-1),\[Theta]1->\[Theta]]},
 {0},
 {Limit[length/\[Theta]1 Sin[\[Theta]1],\[Theta]1->\[Theta]]}
});
rt=Transpose[r];
n=rt[[2]]Cos[tilt]-rt[[1]]Sin[tilt];
rp=Outer[Times,rt.n,n](1-Cos[\[Theta]])+rt Cos[\[Theta]]+{Cross[rt[[1]],n],Cross[rt[[2]],n],Cross[rt[[3]],n]}Sin[\[Theta]];
{x+dx,Transpose[rp]}
];
x={({
 {0},
 {0},
 {0}
})};
localXYZ=IdentityMatrix[3];
Block[{},
{x1,localXYZ}=xform[{-#[[3]],-#[[5]],#[[2]]},{x[[-1]],localXYZ}];
AppendTo[x,x1]]&/@lattice;
prepositions2=Rest[x[[All,{3,1,2},1]]];

graph=Graphics3D[
{
(element[#1[[1,1]],#1[[2]],#1[[1,2]] ,If[bends===True,Cos[#[[1,5]]]#1[[1,3]],0],If[bends===True,Sin[#[[1,5]]]#1[[1,3]],0],#1[[3]],-#1[[4]]]&)/@
MapThread[List,{Rest[lattice],Drop[prepositions2,-1],Rest[findrotations],Rest[findrotationsv]}]},
Sequence@@FilterRules[Flatten[{opts}],Options[Graphics3D]],Sequence@@FilterRules[Flatten[{Options[MADDraw3D]}],Options[Graphics3D]]];

Show[graph,optShow,Sequence@@FilterRules[Flatten[{Options[MADDraw3D]}],Options[Show]],Lighting->Automatic]]


(* ::Input::Initialization:: *)
MADGetTunes[filename_:MADFileName]:=Module[{data,LinQx,LinQy},
If[filename===MADFileName,filename=(Drop[ToString[filename],-3]<>"print.txt")];
data=ReadList[ToString[filename],Word];
LinQx=ToExpression[Extract[data,#]]&/@(Position[data,"Qx"]+2);
AppendTo[LinQx,ToExpression[Extract[data,#]]&/@(Position[data,"Q1"]+2)];
LinQy=ToExpression[Extract[data,#]]&/@(Position[data,"Qy"]+2);
AppendTo[LinQy,ToExpression[Extract[data,#]]&/@(Position[data,"Q2"]+2)];
Return[Flatten[{LinQx,LinQy}]]
]


(* ::Input::Initialization:: *)
MADGetChromaticity[filename_:MADFileName]:=Module[{data,LinQx,LinQy},
If[filename===MADFileName,filename=(Drop[ToString[filename],-3]<>"print.txt")];
data=ReadList[ToString[filename],Word];
LinQx=ToExpression[Extract[data,#]]&/@(Position[data,"Qx'"]+2);
LinQy=ToExpression[Extract[data,#]]&/@(Position[data,"Qy'"]+2);
Return[Flatten[{LinQx,LinQy}]]
]


(* ::Input::Initialization:: *)
MADGetMomentumCompaction[filename_:MADFileName]:=Module[{data,alphac,val},
If[filename===MADFileName,filename=(Drop[ToString[filename],-3]<>"print.txt")];
data=ReadList[ToString[filename],Word];
alphac=ToString[data[[Flatten[Position[data,"alfa"]]+2]]];
val=ToExpression[StringReplacePart[alphac,"*10^",StringPosition[alphac,"E"]]];
Return[Flatten[{val}]]
]


(* ::Input::Initialization:: *)
MADCreateSRIData[ref_]:=Block[{datafile},datafile=OpenAppend[ToString[ref<>".mff"]];WriteString[datafile,
"BMPM,NINT=0,SYNRAD=True,SINGLE=True;\n"];
Close[datafile];]


(* ::Input::Initialization:: *)
MADGetSRI[filename_:MADFileName]:=Module[{a,b,data},
If[filename===MADFileName,filename=(Drop[ToString[filename],-3]<>"print.txt")];
data=ReadList[ToString[filename],Word];
I1=(a=Read[b=StringToStream[#],Real];Close[b];a)&/@Extract[data,Position[data,"I1"]+8];
I2=(a=Read[b=StringToStream[#],Real];Close[b];a)&/@Extract[data,Position[data,"I2"]+8];
I3=(a=Read[b=StringToStream[#],Real];Close[b];a)&/@Extract[data,Position[data,"I3"]+8];
I4=(a=Read[b=StringToStream[#],Real];Close[b];a)&/@Extract[data,Position[data,"(C)I4"]+8];
I5=(a=Read[b=StringToStream[#],Real];Close[b];a)&/@Extract[data,Position[data,"I5"]+8];
I6X=(a=Read[b=StringToStream[#],Real];Close[b];a)&/@Extract[data,Position[data,"I6X"]+8];
I6Y=(a=Read[b=StringToStream[#],Real];Close[b];a)&/@Extract[data,Position[data,"I6Y"]+8];
I8=(a=Read[b=StringToStream[#],Real];Close[b];a)&/@Extract[data,Position[data,"I8"]+8];]


(* ::Input::Initialization:: *)
MADBMPM[opts___]:=Block[{nint,delq,tauq,bucket,kappa,i4i2,exdata,fx,fy,khm,synrad,clorb,tousch,single,evary,midarc,interact,range,filename},

nint=NInt/.{opts}/.Options[MADBMPM];
delq=DelQ/.{opts}/.Options[MADBMPM];
tauq=TauQ/.{opts}/.Options[MADBMPM];
bucket=MADBucket/.{opts}/.Options[MADBMPM];
kappa=Kappa/.{opts}/.Options[MADBMPM];
i4i2=I4I2/.{opts}/.Options[MADBMPM];
exdata=EXData/.{opts}/.Options[MADBMPM];
fx=FX/.{opts}/.Options[MADBMPM];
fy=FY/.{opts}/.Options[MADBMPM];
khm=KHM/.{opts}/.Options[MADBMPM];
synrad=SynRad/.{opts}/.Options[MADBMPM];
clorb=Clorb/.{opts}/.Options[MADBMPM];
tousch=Tousch/.{opts}/.Options[MADBMPM];
single=Single/.{opts}/.Options[MADBMPM];
evary=EVary/.{opts}/.Options[MADBMPM];
midarc=MidArc/.{opts}/.Options[MADBMPM];
interact=Interact/.{opts}/.Options[MADBMPM];
range=Range/.{opts}/.Options[MADBMPM];
filename=FileName/.{opts}/.{FileName->MADFileName};

bmpm="BMPM"<>
If[IntegerQ[nint],",NINT="<>ToString[nint],""]<>
If[delq=!=0,",DelQ="<>ToString[delq],""]<>
If[tauq=!=0,",TauQ="<>ToString[tauq],""]<>
If[bucket=!=0,",Bucket="<>ToString[bucket],""]<>
If[kappa=!=0,",Kappa="<>ToString[kappa],""]<>
If[i4i2=!=0,",I4I2="<>ToString[i4i2],""]<>
If[exdata=!=0,",EXData="<>ToString[exdata],""]<>
If[fx=!=0,",FX="<>ToString[fx],""]<>
If[fy=!=0,",FY="<>ToString[fy],""]<>
If[khm=!=0,",KHM="<>ToString[khm],""]<>
If[synrad===True,",SynRad=True",""]<>
If[clorb===True,",CLORB=True",""]<>
If[tousch===True,",Tousch=True",""]<>
If[single===True,",Single=True",""]<>
If[evary===True,",EVary=True",""]<>
If[midarc===True,",MidArc=True",""]<>
If[interact=!="",",Interact="<>ToString[interact],""]<>
If[range=!="",",Range="<>ToString[range],""]<>
";\n";
If[StringLength[bmpm]>80,bmpm=StringInsert[bmpm,"&\n",First[Select[Flatten[StringPosition[bmpm,","]],#>65&]]+1]];
If[StringLength[bmpm]>160,bmpm=StringInsert[bmpm,"&\n",First[Select[Flatten[StringPosition[bmpm,","]],#>145&]]+1]];
MADStringWrite[filename,bmpm]
]


(* ::Input::Initialization:: *)
ResonanceEquationsAtOrder[range_,resorder_,periodicity_]:=Union[Flatten[Table[ResEqn@@@ResNumAtOrder[resorder]/.l->periodicity ,{pvalue,First[PValues[ResNumAtOrder[resorder],range,periodicity]],Last[PValues[ResNumAtOrder[resorder],range,periodicity]]}]]]


(* ::Input::Initialization:: *)
ResonanceEquations[range_,orderstart_,orderend_,periodicity_]:=Union[Flatten[Table[ResonanceEquationsAtOrder[range,n,periodicity],{n,orderstart,orderend}]]]


(* ::Input::Initialization:: *)
ResonancePlot[range_,orderstart_,orderend_,periodicity_,opts___]:=Block[{optPlot,optShow,legend,RangePoints,l,pvalue,x,y,m,n},
legend=ResonanceLegend/. {opts}/. {ResonanceLegend->False};
optShow=Sequence@@FilterRules[Flatten[{opts}],Options[Show]];
optPlot=Sequence@@FilterRules[Flatten[{opts}],Options[ContourPlot]];

ResEqn[m_,n_]:=(m x+n y==l pvalue);
ResNumAtOrder[r_]:=Flatten[Table[{{x,r-x},{x,x-r}},{x,0,r}],1];RangePoints:={{range[[1,1]],range[[2,1]]},{range[[1,1]],range[[2,2]]},{range[[1,2]],range[[2,1]]},{range[[1,2]],range[[2,2]]}};
PValues[resnums_,r_,p_]:=Block[{equations={(m x+n y)/l}},
Flatten[{Floor[Min[#]],Ceiling[Max[#]]}&/@{Flatten[equations/.l->p/.{m->#[[1]],n->#[[2]]}&/@resnums/.{x->#[[1]],y->#[[2]]}&/@RangePoints]}]];


Show[If[legend===True,
GraphicsGrid[{{Show[Reverse[Table[ContourPlot[Evaluate[ResonanceEquationsAtOrder[range,n,periodicity]],{x,range[[1,1]],range[[1,2]]},{y,range[[2,1]],range[[2,2]]},DisplayFunction->Identity,ContourStyle->{ResPlotColours[[n]]},Evaluate[optPlot]],{n,orderstart,orderend,1}]]],SpanFromLeft,Graphics[Legend[Table[LegendData[[n]],{n,orderstart,orderend,1}],LegendShadow->None,LegendPosition->{range[[1,2]]+1/4 (range[[1,2]]-range[[1,1]]),range[[2,1]]+1/5 (range[[2,2]]-range[[2,1]])}]]},
{SpanFromAbove,SpanFromBoth,Null}}],Reverse[Table[ContourPlot[Evaluate[ResonanceEquationsAtOrder[range,n,periodicity]],{x,range[[1,1]],range[[1,2]]},{y,range[[2,1]],range[[2,2]]},DisplayFunction->Identity,ContourStyle->{ResPlotColours[[n]]},Evaluate[optPlot]],{n,orderstart,orderend,1}]]],optShow]]


(* ::Input::Initialization:: *)
ResonanceLegend[min_,max_]:=Graphics[Legend[Table[LegendData[[n]],{n,min,max,1}],LegendShadow->None]]


(* ::Input::Initialization:: *)
MADGetDisp[file_,opts___]:=Block[{filename,data},
filename=Filename/.{opts}/.{Filename->MADFileName};
data="GetDisp,Filename="<>ToString[file]<>";\n";
MADStringWrite[filename,data];
]


(* ::Input::Initialization:: *)
MADPutDisp[file_,opts___]:=Block[{filename,data},
filename=Filename/.{opts}/.{Filename->MADFileName};
data="PutDisp,Filename="<>ToString[file]<>";\n";
MADStringWrite[filename,data];
]


(* ::Input::Initialization:: *)
MADGetKick[file_,opts___]:=Block[{filename,data},
filename=Filename/.{opts}/.{Filename->MADFileName};
add=Add/.{opts}/.{Add->False};
data="Getkick,Filename="<>ToString[file]<>If[add===True,",Add",""]<>";\n";
MADStringWrite[filename,data];
]


(* ::Input::Initialization:: *)
MADPutKick[file_,opts___]:=Block[{filename,data},
filename=Filename/.{opts}/.{Filename->MADFileName};
plane=Plane/.{opts}/.{Plane->""};
data="PutKick,Filename="<>ToString[file]<>If[plane=!="",",Plane="<>ToString[plane],""]<>";\n";
MADStringWrite[filename,data];
]


(* ::Input::Initialization:: *)
MADGetOrbit[file_,opts___]:=Block[{filename,data},
filename=Filename/.{opts}/.{Filename->MADFileName};
data="GetOrbit,Filename="<>ToString[file]<>";\n";
MADStringWrite[filename,data];
]


(* ::Input::Initialization:: *)
MADPutOrbit[file_,opts___]:=Block[{filename,data},
filename=Filename/.{opts}/.{Filename->MADFileName};
data="PutOrbit,Filename="<>ToString[file]<>";\n";
MADStringWrite[filename,data];
]


(* ::Input::Initialization:: *)
MADMicado[opts___]:=Block[{data,filename,error,ncorr,c2list,m1list,dxweight,dyweight,plane},
filename=Filename/.{opts}/.{Filename->MADFileName};
error=(Error/.{opts})/.{Error->0};
ncorr=(NCorr/.{opts})/.{NCorr->0};
c2list=(C2List/.{opts})/.{C2List->False};
m1list=(M1List/.{opts})/.{M1List->False};
dxweight=(DXWeight/.{opts})/.{DXWeight->0};
dyweight=(DYWeight/.{opts})/.{DYWeight->0};
plane=(Plane/.{opts})/.{Plane->Both};
data="Micado"<>
If[error=!=0,",Error="<>ToString[NumberForm[error,ExponentFunction->(Null&)]],""]<>
If[ncorr=!=0,",NCorr="<>ToString[NumberForm[ncorr,ExponentFunction->(Null&)]],""]<>
If[c2list===True,",C2List",""]<>
If[m1list===True,",M1List",""]<>
If[dxweight=!=0,",DXWeight="<>ToString[NumberForm[dxweight,ExponentFunction->(Null&)]],""]<>
If[dyweight=!=0,",DYWeight="<>ToString[NumberForm[dyweight,ExponentFunction->(Null&)]],""]<>
If[plane===X||(Plane/.{opts})===Y,",Plane="ToString[plane],""]<>";\n";
MADStringWrite[filename,data];
]


(* ::Input::Initialization:: *)
MADCorrect[opts___]:=Block[{data,filename},
filename=Filename/.{opts}/.{Filename->MADFileName};
data="Correct"<>
If[(Error/.{opts}/.{Error->0})=!=0,",Error="<>ToString[NumberForm[(Error/.{opts}/.{Error->0}),ExponentFunction->(Null&)]],""]<>

If[(NCorr/.{opts}/.{NCorr->0})=!=0,",NCorr="<>ToString[NumberForm[(NCorr/.{opts}/.{NCorr->0}),ExponentFunction->(Null&)]],""]<>

If[(Iterate/.{opts}/.{Iterate->0})=!=0,",Iterate="<>ToString[(Iterate/.{opts}/.{Iterate->0})],""]<>

If[(C1List/.{opts}/.{C1List->False})===True,",C1List",""]<>
If[(C2List/.{opts}/.{C2List->False})===True,",C2List",""]<>
If[(M1List/.{opts}/.{M1List->False})===True,",M1List",""]<>
If[(M2List/.{opts}/.{M2List->False})===True,",M2List",""]<>

If[(DXWeight/.{opts}/.{DXWeight->0})=!=0,",DXWeight="<>ToString[NumberForm[(DXWeight/.{opts}/.{DXWeight->0}),ExponentFunction->(Null&)]],""]<>

If[(DYWeight/.{opts}/.{DYWeight->0})=!=0,",DYWeight="<>ToString[NumberForm[(DYWeight/.{opts}/.{DYWeight->0}),ExponentFunction->(Null&)]],""]<>

If[(Plane/.{opts}/.{Plane->Both})===X||(Plane/.{opts})===Y,",Plane="ToString[(Plane/.{opts}/.{Plane->Both})],""]<>";\n";

If[StringLength[data]>80,data=StringInsert[data,"&\n",First[Select[Flatten[StringPosition[data,","]],#>65&]]+1]];
If[StringLength[data]>160,data=StringInsert[data,"&\n",First[Select[Flatten[StringPosition[data,","]],#>145&]]+1]];

MADStringWrite[filename,data];
]


(* ::Input::Initialization:: *)
Options[MADPlot]={File->MADFileName,HAxis->"X",VAxis->"PX",VAxis1->"",VAxis2->"",VAxis3->"",VAxis4->"",Bars->0,Style->0,Symbol->0,MaxPlot->0,Sort->False,Spline->False,Multiple->False,FFT->False,HMin->0,HMax->0,VMin->0,VMax->0,Table->"",Title->"",Param->"",Range->"",Deltap->0,Particle->0,Turns->0,Colour->100,Filename->""};


(* ::Input::Initialization:: *)
MADPlot[opts___]:=Block[{filename,data,haxis,vaxis,vaxis1,vaxis2,vaxis3,vaxis4,bars,style,symbol,maxplot,sort,spline,multiple,fft,hmin,hmax,vmin,vmax,table,title,param,range,deltap,particle,turns,colour,file},file=File/.{opts}/.Options[MADPlot];
haxis=HAxis/.{opts}/.Options[MADPlot];
vaxis=VAxis/.{opts}/.Options[MADPlot];
vaxis1=VAxis1/.{opts}/.Options[MADPlot];
vaxis2=VAxis2/.{opts}/.Options[MADPlot];
vaxis3=VAxis3/.{opts}/.Options[MADPlot];
vaxis4=VAxis4/.{opts}/.Options[MADPlot];
bars=Bars/.{opts}/.Options[MADPlot];
style=Style/.{opts}/.Options[MADPlot];
symbol=Symbol/.{opts}/.Options[MADPlot];
maxplot=MaxPlot/.{opts}/.Options[MADPlot];
sort=Sort/.{opts}/.Options[MADPlot];
spline=Spline/.{opts}/.Options[MADPlot];
multiple=Multiple/.{opts}/.Options[MADPlot];
fft=FFT/.{opts}/.Options[MADPlot];
hmin=HMin/.{opts}/.Options[MADPlot];
hmax=HMax/.{opts}/.Options[MADPlot];
vmin=VMin/.{opts}/.Options[MADPlot];
vmax=VMax/.{opts}/.Options[MADPlot];
table=Table/.{opts}/.Options[MADPlot];
title=Title/.{opts}/.Options[MADPlot];
param=Param/.{opts}/.Options[MADPlot];
range=Range/.{opts}/.Options[MADPlot];
deltap=Deltap/.{opts}/.Options[MADPlot];
particle=Particle/.{opts}/.Options[MADPlot];
turns=Turns/.{opts}/.Options[MADPlot];
colour=Colour/.{opts}/.Options[MADPlot];
filename=Filename/.{opts}/.Options[MADPlot];

data="Plot"<>",VAxis="<>ToString[vaxis]<>",HAxis="<>ToString[haxis]<>If[vaxis1=!="",",VAxis1="<>ToString[vaxis1],""]<>
If[vaxis2=!="",",VAxis2="<>ToString[vaxis2],""]<>
If[vaxis3=!="",",VAxis3="<>ToString[vaxis3],""]<>
If[vaxis4=!="",",VAxis4="<>ToString[vaxis4],""]<>
If[bars=!=0,",Bars="<>ToString[bars],""]<>
If[style=!=0,",Style="<>ToString[style],""]<>
If[symbol=!=0,",Symbol="<>ToString[symbol],""]<>
If[maxplot=!=0,",MaxPlot="<>ToString[maxplot],""]<>
If[sort===True,",Sort=True",""]<>
If[spline===True,",Spline=True",""]<>
If[multiple===True,",Multiple=True",""]<>
If[colour=!=0,",Colour="<>ToString[colour],""]<>
If[fft===True,",FFT=True",""]<>If[hmin=!=0,",HMin="<>ToString[hmin],""]<>If[hmax=!=0,",Hmax="<>ToString[hmax],""]<>
If[vmin=!=0,",VMin="<>ToString[vmin],""]<>
If[vmax=!=0,",VMax="<>ToString[vmax],""]<>
If[table=!="",",Table="<>ToString[table],""]<>
If[title=!="",",Title="<>ToString[title],""]<>
If[param=!="",",Param="<>ToString[param],""]<>
If[range=!="",",Range="<>ToString[range],""]<>
If[deltap=!=0,",Deltap="<>ToString[deltap],""]<>
If[particle=!=0,",Particle="<>ToString[particle],""]<>
If[turns=!=0,",Turns="<>ToString[turns],""]<>";\n";

If[StringLength[data]>80,data=StringInsert[data,"&\n",First[Select[Flatten[StringPosition[data,","]],#>65&]]+1]];
If[StringLength[data]>160,data=StringInsert[data,"&\n",First[Select[Flatten[StringPosition[data,","]],#>145&]]+1]];
If[StringLength[data]>240,data=StringInsert[data,"&\n",First[Select[Flatten[StringPosition[data,","]],#>215&]]+1]];
MADStringWrite[file,data];]


(* ::Input::Initialization:: *)
Options[MADPrint]={Filename->MADFileName,Range->"",Type->"",Full->False,Clear->False}


(* ::Input::Initialization:: *)
MADPrint[opts___]:=Block[{filename,data,range,type,full,clear},
filename=Filename/.{opts}/.Options[MADPrint];
range=Range/.{opts}/.Options[MADPrint];
type=Type/.{opts}/.Options[MADPrint];
full=Full/.{opts}/.Options[MADPrint];
clear=Clear/.{opts}/.Options[MADPrint];

data="Print"<>
If[range=!="",",Range="<>ToString[range],""]<>
If[type=!="",",Type="<>ToString[type],""]<>
If[full===True,",Full",""]<>
If[clear===True,",Clear",""]<>";\n";

MADStringWrite[filename,data];
]


(* ::Input::Initialization:: *)
Options[MADSelect]={Filename->MADFileName,Flag->"",Range->"",Type->"",Full->False,Clear->False};


(* ::Input::Initialization:: *)
MADSelect[opts___]:=Block[{filename,data,range,type,full,clear,flag},
filename=Filename/.{opts}/.Options[MADSelect];
flag=Flag/.{opts}/.Options[MADSelect];
range=Range/.{opts}/.Options[MADSelect];
type=Type/.{opts}/.Options[MADSelect];
full=Full/.{opts}/.Options[MADSelect];
clear=Clear/.{opts}/.Options[MADSelect];

data="Select"<>
If[flag=!="",",Flag="<>ToString[flag],""]<>
If[range=!="",",Range="<>ToString[range],""]<>
If[type=!="",",Type="<>ToString[type],""]<>
If[full===True,",Full",""]<>
If[clear===True,",Clear",""]<>";\n";

MADStringWrite[filename,data];
]


(* ::Input::Initialization:: *)
elementslice[element_,slice_]:=If[element[[3]]>0,MADFlat[Table[ReplacePart[element,element[[3]]/slice,3],{slice}]],element]


(* ::Input::Initialization:: *)
bendsliceextra[bend_,no_,slice_]:=Block[{extra=(Symbol@(bend[[1]]<>"Extra"))},
sbend[Evaluate[(bend[[1]]<>ToString[no])],bend[[3]]/slice,bend[[4]],bend[[6]]/slice,bend[[7]],Global`XAp->extra[[3]],Global`YAp->extra[[4]],Global`E1->Switch[no,1,extra[[5]],_,0],Global`E2->Switch[no,3,extra[[6]],_,0],Global`Tilt->extra[[7]],Global`K2->extra[[8]],Global`H1->extra[[9]],Global`HGap->Switch[no,2,0,_,extra[[10]]],Global`FInt->Switch[no,1,extra[[11]],3,"0",_,0],Global`FIntX->Switch[no,3,extra[[11]],1,"0",_,0],Global`K3->extra[[12]]]
]


(* ::Input::Initialization:: *)
bendsliceextrar[bend_,no_,slice_]:=Block[{extra=(Symbol@(bend[[1]]<>"Extra"))},
Switch[no,2,rbend,_,rbend][Evaluate[(bend[[1]]<>ToString[no])],bend[[3]]/slice,bend[[4]],bend[[6]]/slice,bend[[7]],Global`XAp->extra[[3]],Global`YAp->extra[[4]],Global`E1->Switch[no,1,extra[[5]],_,0],Global`E2->Switch[no,3,extra[[6]],_,0],Global`Tilt->extra[[7]],Global`K2->extra[[8]],Global`H1->extra[[9]],Global`HGap->extra[[10]],Global`FInt->Switch[no,1,extra[[11]],_,0],Global`FIntX->Switch[no,3,extra[[11]],_,0],Global`K3->extra[[12]]]
]


(* ::Input::Initialization:: *)
bendslice[bend_,slice_]:=Block[{},
bendsliceextra[bend,#,slice]&/@If[slice>2,Range[3],{1,3}];
Join[Evaluate[Symbol@(bend[[1]]<>"1")],If[slice>2,Table[Evaluate[Symbol@(bend[[1]]<>"2")],{slice-2}],{}],Evaluate[Symbol@(bend[[1]]<>"3")]]
]


(* ::Input::Initialization:: *)
bendslicer[bend_,slice_]:=(
bendsliceextrar[bend,#,slice]&/@If[slice>2,Range[3],{1,3}];
Join[Evaluate[Symbol@(bend[[1]]<>"1")],If[slice>2,Table[Evaluate[Symbol@(bend[[1]]<>"2")],{slice-2}],{}],Evaluate[Symbol@(bend[[1]]<>"3")]]
)


(* ::Input::Initialization:: *)
MADSplitElements[data_,slice_/;(Not[slice>1])]:=MADFlat[data];


(* ::Input::Initialization:: *)
MADSplitElements[data_,slice_/;(slice>1),options___]:=Block[{c={},b,a,bendname={}},
noflat=NoFlat/.{options}/.Options[MADSplitElements];
If[noflat=!=True,MADFlat[Switch[#[[2]],"SectorBend",bendslice[#,slice],"RectBend",bendslicer[#,slice],"Quadrupole",elementslice[#,slice],"Drift",elementslice[#,slice],_,{#}]&/@MADFlat[data]],Switch[#[[2]],"SectorBend",bendslice[#,slice],"RectBend",bendslicer[#,slice],"Quadrupole",elementslice[#,slice],"Drift",elementslice[#,slice],_,{#}]&/@MADFlat[data]]
];


(* ::Input::Initialization:: *)
MADSplitDipoles[data_,slice_/;(slice>1),options___]:=Block[{c={},b,a,bendname={}},
noflat=NoFlat/.{options}/.Options[MADSplitElements];
If[noflat=!=True,
MADFlat[Switch[#[[2]],"SectorBend",bendslice[#,slice],"RectBend",bendslicer[#,slice],_,{#}]&/@MADFlat[data]],Switch[#[[2]],"SectorBend",bendslice[#,slice],"RectBend",bendslicer[#,slice],_,{#}]&/@MADFlat[data]]
];


(* ::Input::Initialization:: *)
MADSplitDipolesLength[latt_,len_]:=MADFlatten[If[StringMatchQ[#[[2]],"SectorBend"]||StringMatchQ[#[[2]],"RectBend"],If[#[[3]]>=2len,MADSplitDipoles[#,Floor[#[[3]]/len],NoFlat->True],#],#]&/@MADFlatten[latt]]


(* ::Input::Initialization:: *)
MADSplitElementsLength[latt_,len_]:=MADFlatten[If[#[[3]]>=2len,MADSplitElements[#,Floor[#[[3]]/len]],#]&/@MADFlatten[latt]]


(* ::Input::Initialization:: *)
MADSplitElementsAll[data_,slice_/;(slice>1),options___]:=Block[{c={},b,a,bendname={}},
noflat=NoFlat/.{options}/.Options[MADSplitElements];
If[noflat=!=True,MADFlat[Switch[#[[2]],"SectorBend",bendslice[#,slice],"RectBend",bendslicer[#,slice],_,elementslice[#,slice]]&/@MADFlat[data]],Switch[#[[2]],"SectorBend",bendslice[#,slice],"RectBend",bendslicer[#,slice],_,elementslice[#,slice]]&/@MADFlat[data]]
];


(* ::Input::Initialization:: *)
MADSplitElementsAllSpecific[data_,slicem_/;(slicem>1),sliced_/;(sliced>1),options___]:=Block[{c={},b,a,bendname={}},
noflat=NoFlat/.{options}/.Options[MADSplitElements];
If[noflat=!=True,
MADFlat[Switch[#[[2]],
"SectorBend",bendslice[#,slicem],
"RectBend",bendslicer[#,slicem],
"Quadrupole",elementslice[#,slicem],
"Sextupole",elementslice[#,slicem],
"Octupole",elementslice[#,slicem],
_,elementslice[#,sliced]
]&/@MADFlat[data]],
Switch[#[[2]],
"SectorBend",bendslice[#,slicem],
"RectBend",bendslicer[#,slicem],
"Quadrupole",elementslice[#,slicem],
"Sextupole",elementslice[#,slicem],
"Octupole",elementslice[#,slicem],
_,elementslice[#,sliced]
]&/@MADFlat[data]]
];


(* ::Input::Initialization:: *)
MADSplitElementsSextQuad[data_,slice_/;(slice>1),options___]:=Block[{},
noflat=NoFlat/.{options}/.Options[MADSplitElements];
minlength=Global`MinLength/.{options}/.{Global`MinLength->0.2};
If[noflat=!=True,MADFlat[Switch[#[[2]],"Quadrupole",If[#[[3]]>minlength,elementslice[#,slice],{#}],"Sextupole",If[#[[3]]>minlength,elementslice[#,slice],{#}],_,{#}]&/@MADFlat[data]],Switch[#[[2]],"Quadrupole",elementslice[#,slice],"Sextupole",elementslice[#,slice],_,{#}]&/@MADFlat[data]]
];


(* ::Input::Initialization:: *)
MADGetApertures[lattice_,slice_]:=Module[{slices},
If[Head[slice]===Rule,(slices=Slice/.{slice}/.{Slice->1}),If[NumberQ[slice],slices=slice,slices=1]];
MADGetApertures[MADFlatten[MADSplitElements[lattice,slices]],1]
]


(* ::Input::Initialization:: *)
MADGetApertures[lattice_]:=MADGetApertures[lattice,1]


(* ::Input::Initialization:: *)
MADGetApertures[lattice2_,1]:=Module[{ap,apy,apx,apy2,apx2,multipole,sextupole,bpm,kick,nosplitlist,apertures,slices,sliceopt,lattice},
lattice=MADFlatten[lattice2];
apx=((Symbol@(#<>"Extra"))&/@lattice[[All,1]])[[All,3]];
apy=((Symbol@(#<>"Extra"))&/@lattice[[All,1]])[[All,4]];
ap=Transpose[{apx,apy}]
]


(* ::Input::Initialization:: *)
MADGetAperturesJAV[lattice_,slice_:1]:=Module[{ap,apy,apx,apy2,apx2,multipole,sextupole,bpm,kick,marker,nosplitlist,apertures,slices,sliceopt},
If[Head[slice]===Rule,(slices=Slice/.{slice}/.{Slice->1}),If[NumberQ[slice],slices=slice,slices=1]];
multipole=Position[Partition[Flatten[lattice],7],"Multipole"][[All,1]];
sextupole=Position[Partition[Flatten[lattice],7],"Sextupole"][[All,1]];
bpm=Flatten[{Position[Partition[Flatten[lattice],7],"BPM"][[All,1]],Position[Partition[Flatten[lattice],7],"HBPM"][[All,1]],Position[Partition[Flatten[lattice],7],"VBPM"][[All,1]]}];
kick=Flatten[{Position[Partition[Flatten[lattice],7],"Kicker"][[All,1]],Position[Partition[Flatten[lattice],7],"HKicker"][[All,1]],Position[Partition[Flatten[lattice],7],"VKicker"][[All,1]]}];
marker=Flatten[{Position[Partition[Flatten[lattice],7],"Marker"][[All,1]]}];
nosplitlist=Sort[Flatten[{multipole,sextupole,bpm,kick,marker}],Greater];

If[slices>1,apx=((Symbol@(#<>"Extra"))&/@Partition[Flatten[lattice],7][[All,1]])[[All,3]];
apx2=apx;
Do[apx2=MapThread[List,{apx2,apx}],{(slices-1)}];apx2=Flatten[apx2];
(apx2=Drop[apx2,{(((#-1)*slices)+1),(((#-1)*slices)+(slices-1))}])&/@nosplitlist;
apy=((Symbol@(#<>"Extra"))&/@Partition[Flatten[lattice],7][[All,1]])[[All,4]];
apy2=apy;
Do[apy2=MapThread[List,{apy2,apy}],{(slices-1)}];apy2=Flatten[apy2];
(apy2=Drop[apy2,{(((#-1)*slices)+1),(((#-1)*slices)+(slices-1))}])&/@nosplitlist;
ap=MapThread[List,{apx2,apy2}];,apx=((Symbol@(#<>"Extra"))&/@Partition[Flatten[lattice],7][[All,1]])[[All,3]];
apy=((Symbol@(#<>"Extra"))&/@Partition[Flatten[lattice],7][[All,1]])[[All,4]];
ap=MapThread[List,{apx,apy}];];
ap]


(* ::Input::Initialization:: *)
MADGetLengths[lattice_,slice_:1]:=Block[{ap,apx,apx2,multipole,sextupole,bpm,kick,nosplitlist,apertures},
multipole=Position[Partition[Flatten[lattice],7],"Multipole"][[All,1]];
sextupole=Position[Partition[Flatten[lattice],7],"Sextupole"][[All,1]];
bpm=Flatten[{Position[Partition[Flatten[lattice],7],"BPM"][[All,1]],Position[Partition[Flatten[lattice],7],"HBPM"][[All,1]],Position[Partition[Flatten[lattice],7],"VBPM"][[All,1]]}];
kick=Flatten[{Position[Partition[Flatten[lattice],7],"Kicker"][[All,1]],Position[Partition[Flatten[lattice],7],"HKicker"][[All,1]],Position[Partition[Flatten[lattice],7],"VKicker"][[All,1]]}];
nosplitlist=Sort[Flatten[{multipole,sextupole,bpm,kick}],Greater];
If[slice>1,
apx=(If[#[[2]]==="Sextupole"||#[[2]]==="Multipole"||#[[2]]==="BPM"||#[[2]]==="HBPM"||#[[2]]==="VBPM"||#[[2]]==="Kicker"||#[[2]]==="HKicker"||#[[2]]==="VKicker",#[[3]],#[[3]]/slice]&/@Partition[Flatten[lattice],7]);
apx2=apx;
Do[apx2=MapThread[List,{apx2,apx}],{(slice-1)}];apx2=Flatten[apx2];
(apx2=Drop[apx2,{(((#-1)*slice)+1),(((#-1)*slice)+(slice-1))}])&/@nosplitlist;
ap=Drop[FoldList[Plus,0,apx2],1];,
apx=#&/@Partition[Flatten[lattice],7][[All,3]];
ap=Drop[FoldList[Plus,0,apx],1];];
ap]



(* ::Input::Initialization:: *)
MADGetCollimators[inlattice_]:=
Block[{ap,apy,apx,apy2,apx2,lattice},
lattice=MADFlatten[inlattice];
apx=((Symbol@(#<>"Extra"))&/@Select[lattice,#[[2]]==="RCOLLIMATOR"||#[[2]]==="ECOLLIMATOR"&][[All,1]])[[All,3]];
apy=((Symbol@(#<>"Extra"))&/@Select[lattice,#[[2]]==="RCOLLIMATOR"||#[[2]]==="ECOLLIMATOR"&][[All,1]])[[All,4]];
ap=Transpose[{apx,apy}]
]


(* ::Input::Initialization:: *)
FindPeaks[data1_,data2_,Opts___]:=
Block[{a,b,c,m,y,z,n,new,old,average},
average=Global`Average/.{Opts}/.{Global`Average->True};
m=0;c={};b=data1[[1]];z=data2[[1]];n=0;
(
a=#[[1]];
y=#[[2]];
If[a=!=b&&y=!=z,m=(a-b)/(y-z);];
If[(m<0&&n>0),
AppendTo[c,{b,z}]];
b=a;
z=y;
n=m;
)&/@MapThread[List,{data1,data2}];
If[average,
old={0,0};
(new=#;
If[new[[1]]===old[[1]]||new[[2]]===old[[2]]&&(new[[1]]-old[[1]])<2,
c=ReplacePart[c,ReplacePart[old,old[[1]]+((new[[1]]-old[[1]])/2),1],Position[c,old][[1,1]]];
c=Delete[c,Position[c,new][[1,1]]];
];
old=new;)&/@c;];
c]


(* ::Input::Initialization:: *)
FindTroughs[data1_,data2_,Opts___]:=
Block[{a,b,c,m,y,z,n,new,old,average},
average=Global`Average/.{Opts}/.{Global`Average->True};
m=0;c={};b=data1[[1]];z=data2[[1]];n=0;
(
a=#[[1]];
y=#[[2]];
If[a=!=b&&y=!=z,m=(a-b)/(y-z);];
If[(m>0&&n<0),
AppendTo[c,{b,z}]];
b=a;
z=y;
n=m;
)&/@MapThread[List,{data1,data2}];
If[average,
old={0,0};
(new=#;
If[new[[1]]===old[[1]]||new[[2]]===old[[2]]&&(new[[1]]-old[[1]])<2,
c=ReplacePart[c,ReplacePart[old,old[[1]]+((new[[1]]-old[[1]])/2),1],Position[c,old][[1,1]]];
c=Delete[c,Position[c,new][[1,1]]];
];
old=new;)&/@c;];
c]


(* ::Input::Initialization:: *)
FindTurningPoints[data1_,data2_,Opts___]:=
Block[{a,b,c,m,y,z,n,new,old,average},
average=Global`Average/.{Opts}/.{Global`Average->True};
m=0;c={};b=data1[[1]];z=data2[[1]];n=0;
(
a=#[[1]];
y=#[[2]];
If[a=!=b&&y=!=z,m=(a-b)/(y-z);];
If[(m>0&&n<0)||(m<0&&n>0),
AppendTo[c,{b,z}]];
b=a;
z=y;
n=m;
)&/@MapThread[List,{data1,data2}];
If[average,
old={0,0};
(new=#;
If[new[[1]]===old[[1]]||new[[2]]===old[[2]]&&(new[[1]]-old[[1]])<2,
c=ReplacePart[c,ReplacePart[old,old[[1]]+((new[[1]]-old[[1]])/2),1],Position[c,old][[1,1]]];
c=Delete[c,Position[c,new][[1,1]]];
];
old=new;)&/@c;];
c]


(* ::Input::Initialization:: *)
MADFlatten[list_]:=ExpandLattice[list];


(* ::Input::Initialization:: *)
MADFlat[list_]:=Partition[Flatten[list],7];


(* ::Input::Initialization:: *)
Clear[MADBETA0];
SetAttributes[MADBETA0,HoldAll];
MADBETA0[file_,name_String,alfx_:Null,betx_:Null,alfy_:Null,bety_:Null,dx_:Null,dpx_:Null,x_:Null,px_:Null,y_:Null,py_:Null]:=Block[{},
MADStringWrite[file,name<>": BETA0,&\n"<>
If[alfx===Null,"","alfx="<>ToString[NumberRight[alfx]]<>",&\n"]<>
If[betx===Null,"","alfx="<>ToString[NumberRight[betx]]<>",&\n"]<>
If[alfy===Null,"","alfx="<>ToString[NumberRight[alfy]]<>",&\n"]<>
If[bety===Null,"","alfx="<>ToString[NumberRight[bety]]<>",&\n"]<>
If[dx===Null,"","alfx="<>ToString[NumberRight[dx]]<>",&\n"]<>
If[dpx===Null,"","alfx="<>ToString[NumberRight[dpx]]<>",&\n"]<>
If[x===Null,"","alfx="<>ToString[NumberRight[x]]<>",&\n"]<>
If[px===Null,"","alfx="<>ToString[NumberRight[px]]<>",&\n"]<>
If[y===Null,"","alfx="<>ToString[NumberRight[y]]<>",&\n"]<>
If[py===Null,"","alfx="<>ToString[NumberRight[py]]<>",&\n"]<>";\n"];
];
MADBETA0[file_,name_String,{twissrules__Rule}]:=Block[{},
MADStringWrite[file,name<>": BETA0,&\n"<>
StringJoin[ToString[Map[HoldForm,HoldForm[twissrules],2][[#,1,1]]]<>"="<>ToString[NumberRight[HoldForm[twissrules][[#,2]]]]<>",&\n"&/@Range[Length[HoldForm[twissrules]]]]<>";\n"]
]


(* ::Input::Initialization:: *)
End[ ]


(* ::Input::Initialization:: *)
EndPackage[ ]


(* ::Input::Initialization:: *)
MADGetZAPData[file_]:=Block[{a},
a="select,flag=optics,full;\noptics,filename=\"zap.optics.txt\",columns=s,betx,alfx,bety,alfy,dx,ddx;\n";
MADStringWrite[file,a];
RunMAD[ToString[file]];
]


(* ::Input::Initialization:: *)
MADOutputZAPData[lattice_,infile_:"zap.optics.txt",outfile_:"zaplat.dat",slice_:1]:=Block[{a,b,ap,ap2,multipole,sextupole,bpm,nosplitlist},

mfsInterpret[tfsRead[ToString[infile]]];

multipole=Position[Partition[Flatten[lattice],7],"Multipole"][[All,1]];
sextupole=Position[Partition[Flatten[lattice],7],"Sextupole"][[All,1]];
bpm=Flatten[{Position[Partition[Flatten[lattice],7],"BPM"][[All,1]],Position[Partition[Flatten[lattice],7],"HBPM"][[All,1]],Position[Partition[Flatten[lattice],7],"VBPM"][[All,1]]}];
nosplitlist=Sort[Flatten[{multipole,sextupole,bpm}],Greater];

a=Partition[Flatten[MapThread[List,{S,BETX,ALFX,BETY,ALFY,DX,DDX}]],7];
ap=((Symbol@(#<>"Extra"))&/@Partition[Flatten[lattice],7][[All,1]])[[All,3]];
ap2=ap;
Do[ap2=MapThread[List,{ap2,ap}],{(slice-1)}];ap2=Flatten[ap2];
(ap2=Drop[ap2,{(#+1),(#+(slice-1))}])&/@nosplitlist;
b=MapThread[List,{a,ap2}];


fileout=OpenWrite[ToString[outfile]];
WriteString[fileout,ToString[(Length[S]-2)]<>","<>ToString[Last[S]]<>"\n"];
WriteString[fileout,"Lattice Produced from MAD Data\n"];
(WriteString[fileout,ToString[NumberForm[#,ExponentFunction->(Null&)]]<>" \t"]&/@#[[1]];WriteString[fileout,ToString[#[[2]]]];
WriteString[fileout,"\n"];)&/@b;
WriteString[fileout,"0/DYNAMIC APERTURE CALCULATION"];
Close[fileout];]


(* ::Input::Initialization:: *)
MADZAP[lattice_,slice_:1,file_:"madzap",infile_:"zap.optics.txt",outfile_:"zaplat.dat"]:=(
MADGetZAPData[(file<>".mff")];
MADOutputZAPData[lattice,infile,outfile,slice];)

