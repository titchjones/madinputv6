(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)



BeginPackage["ReadInTracyFiles`",{"Madtomma`MADInput`MADInput`"}];

















ReadInTracyFile::usage="ReadInTracyFile[\"filename\"] reads in a TRACY file and (re)assigns the element and line definitions";

ReadInElegantFile::usage="ReadInElegantFile[\"filename\"] reads in an Elegant file and (re)assigns the element and line definitions";

Begin["`Private`"];



ElementList={};

idRead2[type_]:=
  Join[Take[readfile,
          If[StringMatchQ[readfile\[LeftDoubleBracket]#\[RightDoubleBracket],
              "*&*"],{#,
              Module[{a=#},
                While[StringMatchQ[
                    readfile\[LeftDoubleBracket]a\[RightDoubleBracket],"*&*"],
                  a++];a]},{#}]]]&/@(Flatten[
        Position[
          readfile,_?(StringMatchQ[ToString[#],type,
                    IgnoreCase\[Rule]True]&&(Not[
                      StringMatchQ[StringTake[ToString[#],1],"!"]])&),{1}]])

idRead[type_,nottype_:""]:=
  Select[readfile,
    StringMatchQ[StringReplace[#," "\[Rule]""],type,IgnoreCase\[Rule]True]&&
        Not[StringMatchQ[
            StringReplace[#," "\[Rule]""],{"*LINE*","*PLOT*","*TWISS*",
              nottype},IgnoreCase\[Rule]True]]&]

getLines[]:=
  Select[readfile,
    StringMatchQ[#,"*:*LINE*",IgnoreCase\[Rule]True]&&
        Not[StringMatchQ[#,{"*PLINE*","*PLOT*","*TWISS*"},
            IgnoreCase\[Rule]True]]&]

replacerules=Flatten@{"&"\[Rule]"",
        "&"\[Rule]"",
        ","\[Rule]"},{",
        ":"\[Rule]":=Partition[",
        "("\[Rule]"Flatten[{{",
        ")"\[Rule]"}}],7]",
        "LINE="\[Rule]"",
        "-"\[Rule]"Reverse@",
        ("*"<>ToString[#]\[Rule]"Table[#,{"<>ToString[#]<>"}]&@")&/@
          Range[20],
        (ToString[#]<>"*"\[Rule]"Table[#,{"<>ToString[#]<>"}]&@")&/@
          Range[20],
        "_"\[Rule]""};





replacerules2={":"\[Rule]",","&"\[Rule]"","TYPE="\[Rule]"TYPE=ToString@Unevaluated@",
      "_"\[Rule]""," "\[Rule]"","[L]"\[Rule]"\[LeftDoubleBracket]1,3\[RightDoubleBracket]",
      "[APER]"\[Rule]"Extra\[LeftDoubleBracket]3\[RightDoubleBracket]",
      "TILT"\[Rule]"TILT=TILT"};

replacerules3={" "\[Rule]"","[L]"\[Rule]"\[LeftDoubleBracket]1,3\[RightDoubleBracket]",
      "[APER]"\[Rule]"Extra\[LeftDoubleBracket]3\[RightDoubleBracket]",
      "CONSTANT"\[Rule]"","CLIGHT"\[Rule]"299792458","TWOPI"\[Rule]"2\[Pi]",
      "PI"\[Rule]"\[Pi]"};

lineRead[list_]:=Block[{},
    Clear[
      Evaluate[StringReplace[
          StringTake[
            ToString[
              list],{1,(StringPosition[ToString[list],
                      ":"]-1)\[LeftDoubleBracket]1,
                1\[RightDoubleBracket]}],{" "\[Rule]""}]]];
    ToExpression[Evaluate[StringReplace[ToString[list],replacerules]]]]

clearFunc[list2_]:=
  Block[{a},
    Clear[Evaluate[
        a=StringReplace[
            StringTake[
              list2,{1,(StringPosition[list2,":"]-1)\[LeftDoubleBracket]1,
                  1\[RightDoubleBracket]}],replacerules2]]];
    Clear[Evaluate[a<>"Extra"]];]

quadRead[list2_,elementname___:""]:=
  Block[{Global`NAME,Global`K=0,Global`TYPE="",Global`L=0,list,
      name:=Global`NAME,Global`APER,Global`TILT=0},
    If[elementname=="",clearFunc[list2],clearFunc[elementname]];
    list=ReplaceExponent[ToString[list2]];
    ToExpression["{{NAME="<> StringReplace[list,replacerules2]<>"}}"];
    AppendTo[ElementList,{ToString[Global`NAME],list2}];
    quad[Evaluate[Global`NAME],Global`L,Global`K,Global`TYPE,
      Global`XAp\[Rule]Global`APER,Global`YAp\[Rule]Global`APER,
      Global`Tilt\[Rule]
        Evaluate[If[!NumberQ[Global`TILT],"TILT",Global`TILT]]]]

sextRead[list2_,elementname___:""]:=
  Block[{Global`NAME,Global`K,Global`TYPE="",Global`L=0,list},
    If[elementname=="",clearFunc[list2],clearFunc[elementname]];
    list=ReplaceExponent[ToString[list2]];
    ToExpression["{{NAME="<> StringReplace[list,replacerules2]<>"}}"];
    AppendTo[ElementList,{ToString[Global`NAME],list2}];
    sext[Evaluate[Global`NAME],Global`L,Global`K*2,Global`TYPE,
      Global`XAp\[Rule]Global`APER,Global`YAp\[Rule]Global`APER,
      Global`Tilt\[Rule]
        Evaluate[If[!NumberQ[Global`TILT],"TILT",Global`TILT]]]]

octRead[list2_,elementname___:""]:=
  Block[{Global`NAME,Global`K3,Global`TYPE="",Global`L,list,Global`APER,
      Global`TILT=0},
    If[elementname=="",clearFunc[list2],clearFunc[elementname]];
    list=ReplaceExponent[ToString[list2]];
    ToExpression["{{NAME="<> StringReplace[list,replacerules2]<>"}}"];
    AppendTo[ElementList,{ToString[Global`NAME],list2}];
    oct[Evaluate[Global`NAME],Global`L,Global`K3,Global`TYPE,
      Global`XAp\[Rule]Global`APER,Global`YAp\[Rule]Global`APER,
      Global`Tilt\[Rule]
        Evaluate[If[!NumberQ[Global`TILT],"TILT",Global`TILT]]]]

sbendRead[list2_,elementname___:""]:=
  Block[{Global`NAME="B",Global`K1=0,Global`TYPE="",Global`L=0,Global`T1=0,
      Global`T2=0,Global`K2=0,Global`H1=0,Global`HGAP=0,Global`FINT=0,
      Global`K3=0,Global`FINTX=0,Global`T=0,list,name:=Global`NAME,
      Global`APER=0,Global`TILT=0},
    If[elementname=="",clearFunc[list2],clearFunc[elementname]];
    list=ReplaceExponent[ToString[list2]];
    ToExpression["{{NAME="<>StringReplace[list,replacerules2]<>"}}"];
    AppendTo[ElementList,{ToString[Global`NAME],list2}];
    {t1,t2,tilt,k2,h1,hgap,fint,k3,fintx}={Global`T1,Global`T2,Global`TILT,
        Global`K2,Global`H1,Global`HGAP,Global`FINT,Global`K3,Global`FINTX};
    Clear[Global`T1,Global`T2,Global`TILT,Global`K2,Global`H1,Global`HGAP,
      Global`FINT,Global`K3,Global`FINTX];
    sbend[Evaluate[Global`NAME],Global`L,Global`K1,Global`T*Degree,
      Global`TYPE,Global`E1\[Rule]t1*Degree,Global`E2\[Rule]t2*Degree,
      Global`Tilt\[Rule]tilt,Global`K2\[Rule]k2,Global`H1\[Rule]h1,
      Global`HGap\[Rule]hgap,Global`FInt\[Rule]fint,Global`K3\[Rule]k3,
      Global`FIntX\[Rule]fintx,Global`XAp\[Rule]Global`APER,
      Global`YAp\[Rule]Global`APER,
      Global`Tilt\[Rule]
        Evaluate[If[!NumberQ[Global`TILT],"TILT",Global`TILT]]];
    ]

driftRead[list2_,elementname___:""]:=
  Block[{Global`NAME,Global`TYPE="",Global`L,list,Global`APER,Global`TILT=0},
    If[elementname=="",clearFunc[list2],clearFunc[elementname]];
    list=ReplaceExponent[ToString[list2]];
    Print[list];
    ToExpression["{{NAME="<>StringReplace[list,replacerules2]<>"}}"];
    AppendTo[ElementList,{ToString[Global`NAME],list2}];
    drift[Evaluate[Global`NAME],Global`L,Global`TYPE,
      Global`XAp\[Rule]Global`APER,Global`YAp\[Rule]Global`APER]]

kickRead[list2_,elementname___:""]:=
  Block[{Global`NAME,TYPE="\"\"",Global`L,Global`VKICK=0,Global`HKICK=0,list,
      Global`TILT=0},
    If[elementname=="",clearFunc[list2],clearFunc[elementname]];
    list=ReplaceExponent[ToString[list2]];
    ToExpression["{{NAME="<>StringReplace[list,replacerules2]<>"}}"];
    AppendTo[ElementList,{ToString[Global`NAME],list2}];
    kick[Evaluate[Global`NAME],Global`L,Global`VKICK,Global`HKICK,Global`TYPE,
      Global`XAp\[Rule]Global`APER,Global`YAp\[Rule]Global`APER,
      Global`Tilt\[Rule]Global`TILT]]

bpmRead[list2_,elementname___:""]:=
  Block[{Global`NAME,Global`TYPE="",Global`L=0,list,Global`APER,
      Global`TILT=0},
    If[elementname=="",clearFunc[list2],clearFunc[elementname]];
    list=ReplaceExponent[ToString[list2]];
    ToExpression["{{NAME="<>StringReplace[list,replacerules2]<>"}}"];
    AppendTo[ElementList,{ToString[Global`NAME],list2}];
    bpm[Evaluate[Global`NAME],Global`L,Global`TYPE,
      Global`XAp\[Rule]Global`APER,Global`YAp\[Rule]Global`APER,
      Global`Tilt\[Rule]
        Evaluate[If[Global`TILT\[Equal]Global`TILT,"TILT",Global`TILT]]]]

rcollRead[list2_,elementname___:""]:=
  Block[{Global`NAME,Global`XSIZE=0,Global`YSIZE=0,Global`TYPE="",Global`L=0,
      list,Global`TILT=0},
    If[elementname=="",clearFunc[list2],clearFunc[elementname]];
    list=ReplaceExponent[ToString[list2]];
    ToExpression["{{NAME="<>StringReplace[list,replacerules2]<>"}}"];
    AppendTo[ElementList,{ToString[Global`NAME],list2}];
    rcoll[Evaluate[Global`NAME],Global`L,Global`XSIZE,Global`YSIZE,
      Global`TYPE,Global`XAp\[Rule]Global`APER,Global`YAp\[Rule]Global`APER]]

ecollRead[list2_,elementname___:""]:=
  Block[{Global`NAME,Global`XSIZE=0,Global`YSIZE=0,Global`TYPE="",Global`L=0,
      list,Global`APER,Global`TILT=0},
    If[elementname=="",clearFunc[list2],clearFunc[elementname]];
    list=ReplaceExponent[ToString[list2]];
    ToExpression["{{NAME="<>StringReplace[list,replacerules2]<>"}}"];
    AppendTo[ElementList,{ToString[Global`NAME],list2}];
    ecoll[Evaluate[Global`NAME],Global`L,Global`XSIZE,Global`YSIZE,
      Global`TYPE,Global`XAp\[Rule]Global`APER,Global`YAp\[Rule]Global`APER]]

markerRead[list2_,elementname___:""]:=
  Block[{Global`NAME,Global`TYPE="",Global`L=0,list,Global`APER,
      Global`TILT=0},
    If[elementname=="",clearFunc[list2],clearFunc[elementname]];
    list=ReplaceExponent[ToString[list2]];
    ToExpression["{{NAME="<>StringReplace[list,replacerules2]<>"}}"];
    AppendTo[ElementList,{ToString[Global`NAME],list2}];
    marker[Evaluate[Global`NAME],Global`TYPE,Global`XAp\[Rule]Global`APER,
      Global`YAp\[Rule]Global`APER]]

wireRead[list2_,elementname___:""]:=
  Block[{Global`NAME,Global`TYPE="",Global`L=0,list,Global`APER,
      Global`TILT=0},
    If[elementname=="",clearFunc[list2],clearFunc[elementname]];
    list=ReplaceExponent[ToString[list2]];
    ToExpression["{{NAME="<>StringReplace[list,replacerules2]<>"}}"];
    AppendTo[ElementList,{ToString[Global`NAME],list2}];
    wire[Evaluate[Global`NAME],Global`L,Global`TYPE,
      Global`XAp\[Rule]Global`APER,Global`YAp\[Rule]Global`APER]]

monitorRead[list2_,elementname___:""]:=
  Block[{Global`NAME,Global`TYPE="",Global`L=0,list,Global`APER,
      Global`TILT=0},
    If[elementname=="",clearFunc[list2],clearFunc[elementname]];
    list=ReplaceExponent[ToString[list2]];
    ToExpression["{{NAME="<>StringReplace[list,replacerules2]<>"}}"];
    AppendTo[ElementList,{ToString[Global`NAME],list2}];
    monitor[Evaluate[Global`NAME],Global`L,Global`TYPE,
      Global`XAp\[Rule]Global`APER,Global`YAp\[Rule]Global`APER]]

instrumentRead[list2_,elementname___:""]:=
  Block[{Global`NAME,Global`TYPE="",Global`L=0,list,Global`APER,
      Global`TILT=0},
    If[elementname=="",clearFunc[list2],clearFunc[elementname]];
    list=ReplaceExponent[ToString[list2]];
    ToExpression["{{NAME="<>StringReplace[list,replacerules2]<>"}}"];
    AppendTo[ElementList,{ToString[Global`NAME],list2}];
    instrument[Evaluate[Global`NAME],Global`L,Global`TYPE,
      Global`XAp\[Rule]Global`APER,Global`YAp\[Rule]Global`APER]]

rfcRead[list2_,elementname___:""]:=
  Block[{Global`NAME,Global`TYPE="",Global`L=0,list,Global`VOLTAGE,
      Global`LAG=0,Global`HARMON=0,Global`FREQUENCY},
    If[elementname=="",clearFunc[list2],clearFunc[elementname]];
    list=ReplaceExponent[ToString[list2]];
    ToExpression["{{NAME="<>StringReplace[list,replacerules2]<>"}}"];
    AppendTo[ElementList,{ToString[Global`NAME],list2}];
    rfc[Evaluate[Global`NAME],Global`L,Global`TYPE,
      Global`MADVolt\[Rule]Global`VOLTAGE,Global`Lag\[Rule]Global`LAG,
      Global`Harmon\[Rule]Global`HARMON,
      Global`MADFreq\[Rule]Global`FREQUENCY]]

constRead[list2_]:=Block[{list},
    clearFunc[list2];
    list=ReplaceExponent[ToString[list2]];
    ToExpression[StringReplace[list,replacerules3]];
    ]





multipoleRead[list2_,elementname___:""]:=
  Block[{Global`NAME,Global`TYPE="",Global`L,list,Global`LRAD=0.,
      Global`K0L=0.,Global`K1L=0.,Global`K2L=0.,Global`K3L=0.,Global`K4L=0.,
      Global`K5L=0.,Global`K6L=0.,Global`K7L=0.,Global`K8L=0.,Global`K9L=0.,
      Global`T0=0.,Global`T1=0.,Global`T2=0.,Global`T3=0.,Global`T4=0.,
      Global`T5=0.,Global`T6=0.,Global`T7=0.,Global`T8=0.,Global`T9=0.,name},
    If[elementname=="",clearFunc[list2],clearFunc[elementname]];
    list=ReplaceExponent[ToString[list2]];
    ToExpression["{{NAME="<>StringReplace[list,replacerules2]<>"}}"];
    AppendTo[ElementList,{ToString[Global`NAME],list2}];
    {lrad,k0l,t0,k1l,t1,k2l,t2,k3l,t3,k4l,t4,k5l,t5,k6l,t6,k7l,t7,k8l,t8,k9l,
        t9}={Global`LRAD,Global`K0L,Global`T0,Global`K1L,Global`T1,Global`K2L,
        Global`T2,Global`K3L,Global`T3,Global`K4L,Global`T4,Global`K5L,
        Global`T5,Global`K6L,Global`T6,Global`K7L,Global`T7,Global`K8L,
        Global`T8,Global`K9L,Global`T9};
    multipole[Evaluate[Global`NAME],Global`TYPE,Global`K0L\[Rule]k0l,
      Global`T0\[Rule]t0,Global`K1L\[Rule]k1l,Global`T1\[Rule]t1,
      Global`K2L\[Rule]k2l,Global`T2\[Rule]t2,Global`K3L\[Rule]k3l,
      Global`T3\[Rule]t3,Global`K4L\[Rule]k4l,Global`T4\[Rule]t4,
      Global`K5L\[Rule]k5l,Global`T5\[Rule]t5,Global`K6L\[Rule]k6l,
      Global`T6\[Rule]t6,Global`K7L\[Rule]k7l,Global`T7\[Rule]t7,
      Global`K8L\[Rule]k8l,Global`T8\[Rule]t8,Global`K9L\[Rule]k9l,
      T9\[Rule]t9];
    ]

ReplaceExponent[string_]:=Block[{list=string,before,after},
    ((If[((DigitQ[before=StringTake[list,{#-1}]])||(before==="=")||(before===
                        "-")||(before==="+"))&&((DigitQ[
                        after=StringTake[list,{#+1}]])||(after==="+")||(after===
                        "-")),
              list=StringReplacePart[list,"*10^",{#,#}]])&/@
        Reverse[Select[
            Flatten[{StringPosition[list,"D"]\[LeftDoubleBracket]All,
                  1\[RightDoubleBracket],
                StringPosition[list,"E"]\[LeftDoubleBracket]All,
                  1\[RightDoubleBracket]}],(#>
                    StringPosition[list,":"]\[LeftDoubleBracket]1,
                      1\[RightDoubleBracket])&&(#<StringLength[list])&]]);
    Return[StringReplace[list,"_"\[Rule]""]]]

subelementRead[list2_,element_]:=Block[{list},
    Switch[(Symbol@
            Evaluate[
              element\[LeftDoubleBracket]1\[RightDoubleBracket]])\
\[LeftDoubleBracket]1,2\[RightDoubleBracket],
      "Quadrupole",quadRead[
        element\[LeftDoubleBracket]2\[RightDoubleBracket]<>", NAME="<>list2,
        list2],
      "SectorBend",sbendRead[
        element\[LeftDoubleBracket]2\[RightDoubleBracket]<>", NAME="<>list2,
        list2],
      "Sextupole",sextRead[
        element\[LeftDoubleBracket]2\[RightDoubleBracket]<>", NAME="<>list2,
        list2],
      "Octupole",octRead[
        element\[LeftDoubleBracket]2\[RightDoubleBracket]<>", NAME="<>list2,
        list2],
      "Drift",driftRead[
        element\[LeftDoubleBracket]2\[RightDoubleBracket]<>", NAME="<>list2,
        list2],
      "BPM",bpmRead[
        element\[LeftDoubleBracket]2\[RightDoubleBracket]<>", NAME="<>list2,
        list2],
      "Kicker",kickerRead[
        element\[LeftDoubleBracket]2\[RightDoubleBracket]<>", NAME="<>list2,
        list2],
      "Multipole",multipoleRead[
        element\[LeftDoubleBracket]2\[RightDoubleBracket]<>", NAME="<>list2,
        list2],
      "Marker",markerRead[
        element\[LeftDoubleBracket]2\[RightDoubleBracket]<>", NAME="<>list2,
        list2],
      "RCOLL",rcollRead[
        element\[LeftDoubleBracket]2\[RightDoubleBracket]<>", NAME="<>list2,
        list2],
      "ECOLL",ecollRead[
        element\[LeftDoubleBracket]2\[RightDoubleBracket]<>", NAME="<>list2,
        list2],
      "Wire",wireRead[
        element\[LeftDoubleBracket]2\[RightDoubleBracket]<>", NAME="<>list2,
        list2],
      "Instrument",instrumentRead[
        element\[LeftDoubleBracket]2\[RightDoubleBracket]<>", NAME="<>list2,
        list2],
      "Monitor",monitorRead[
        element\[LeftDoubleBracket]2\[RightDoubleBracket]<>", NAME="<>list2,
        list2]]]

typesListTracy={{"*:QUA*",quadRead},{"*:BEND*",sbendRead},{"*:SEX*",
      sextRead},{"*:OCT*",octRead},{"*:DRI*",driftRead},{"*:BPM*",NullRead},{"*:KIC*",
      kickRead},{"*:MPO*",multipoleRead},{"*:MAR*",markerRead},{"*:RCO*",
      rcollRead},{"*:ECO*",ecollRead},{"*:WIR*",wireRead},{"*:WS*",
      wireRead},{"*:INS*",instrumentRead},{"*:MON*",monitorRead},{"*:*CAV*",
      rfcRead},{"*:=*",constRead},{"*:CONST*",constRead}}



interpretTracyFile[file_]:=Block[{a},
    readfile=
      Map[If[StringMatchQ[a=ToUpperCase[StringJoin[#]],"*!*"],
            StringTake[
              a,{1,StringPosition[a,"!"]\[LeftDoubleBracket]1,
                    1\[RightDoubleBracket]-1}],a]&,
        Split[Select[ReadList[file,Record,RecordSeparators\[Rule]{";","\n"}],
            Not[StringMatchQ[#,"!*"]]&],StringMatchQ[#2,"*&*"]&]];
    Block[{in=#},
          Print[in];(in\[LeftDoubleBracket]2\[RightDoubleBracket][#])&/@
            idRead[in\[LeftDoubleBracket]1\[RightDoubleBracket]]]&/@
      typesListTracy;
    lineRead[#]&/@getLines[];]

ReadInTracyFile[files_List]:=Block[{a,tilt},
    tilt=Global`TILT;Clear[Global`TILT];
    ElementList={};
    interpretTracyFile[#]&/@files;
    Block[{in=#},
          subelementRead[#,in]&/@
            idRead["*:"<>in\[LeftDoubleBracket]1\[RightDoubleBracket]<>"*"]]&/@
      ElementList;
    Global`TILT=tilt;
    ]

ReadInTracyFile[file_String]:=Block[{a,tilt},
    tilt=Global`TILT;Clear[Global`TILT];
    ElementList={};
    interpretTracyFile[file];
    Block[{in=#},
          subelementRead[#,in]&/@
            idRead["*:"<>in\[LeftDoubleBracket]1\[RightDoubleBracket]<>"*"]]&/@
      ElementList;
    Global`TILT=tilt;
    ]



End[];

EndPackage[];