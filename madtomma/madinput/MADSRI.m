(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["MADSRI`",{"Madtomma`MADInput`MADInput`","Madtomma`Mfs`Mfs`","Accelerator`ConstantsUnits`","Units`","PhysicalConstants`"}]


MADSRI::usage="MADSRI[Lattice]\nCalculates SRI using data from the MAD code";


MADSRI1::usage="MADSRI1[Lattice]\nCalculates SRI 1 using data from the MAD code";


MADSRI2::usage="MADSRI2[Lattice]\nCalculates SRI 2 using data from the MAD code";


MADSRI3::usage="MADSRI3[Lattice]\nCalculates SRI 3 using data from the MAD code";


MADSRI4::usage="MADSRI4[Lattice]\nCalculates SRI 4 using data from the MAD code";


MADSRI5::usage="MADSRI5[Lattice]\nCalculates SRI 5 using data from the MAD code";


MAD\[Alpha]c::usage="MAD\[Alpha]c[Lattice]\nCalculates Momentum Compaction";


MAD\[Epsilon]::usage="MAD\[Epsilon][Lattice, Energy (GeV)]\nCalculates Emittance";


MADU0::usage="MADU0[Lattice, Energy (GeV)]\nCalculates U0";


MADJx::usage="MADJx[Lattice]\nCalculates Jx";


MADJ\[Epsilon]::usage="MADJ\[Epsilon][Lattice]\nCalculates J\[Epsilon]"


MADES::usage="MADES[Lattice, Energy (GeV)]\nCalculates Energy Spread";


MAD\[Tau]x::usage="MAD\[Tau]x[Lattice, Energy (GeV)]\nCalculates Damping Time \[Tau]x";


MAD\[Tau]y::usage="MAD\[Tau]y[Lattice, Energy (GeV)]\nCalculates Damping Time \[Tau]y"


MAD\[Tau]\[Epsilon]::usage="MAD\[Tau]\[Epsilon][Lattice, Energy (GeV)]\nCalculates Damping Time \[Tau]\[Epsilon]"


MAD\[Epsilon]x::usage="MAD\[Epsilon]x[Lattice, Energy (GeV), \[Kappa]]\nCalculates Horizontal Emittance";


MAD\[Epsilon]y::usage="MAD\[Epsilon]y[Lattice, Energy (GeV), \[Kappa]]\nCalculates Vertical Emittance"


SRI1::usage="SRI 1";


SRI2::usage="SRI 2";


SRI3::usage="SRI 3";


SRI4::usage="SRI 4";


SRI5::usage="SRI 5";


Begin["`Private`"]  


ALFX:=Global`ALFX;


BETX:=Global`BETX;


DX:=Global`DX;


DPX:=Global`DPX;


(* ::Input:: *)
(*MADFlatten[x_]:=Madtomma`MADInput`MADInput`MADFlatten[x]*)


MADExtraList[lattice_]:=ToExpression[(#<>"Extra")&/@(Transpose[MADFlatten[lattice]][[1]])]


MADStripUnusedExtraFields[extralist_]:=Drop[#,2]&/@extralist


MADElementList[lattice_]:=Join[#[[1]],#[[2]]]&/@Transpose[{MADFlatten[lattice],MADStripUnusedExtraFields[MADExtraList[lattice]]}]


integralSRI1[kx_,s_,h_,dx_,dpx_,\[Beta]2_,\[Rho]_]:=NIntegrate[(If[kx==0,(h l^2)/2,(h (1-Cos[kx l]))/kx^2]+dpx If[kx==0,l,Sin[kx l]/kx]+dx (Cos[kx l]+h If[kx==0,l,Sin[kx l]/kx] Tan[\[Beta]2]))/\[Rho],{l,0,s},Compiled->True]


MADSRI1[latt_,dx_,dpx_]:=Module[{kx,ky,\[Rho], h, n,L},
pos=(Position[MADFlatten[latt],"SectorBend"][[All,1]]-1);
Plus@@((L=#[[1,3]];\[Rho]=L/#[[1,6]];n=-#[[1,4]] \[Rho]^2;h=1/\[Rho];kx=h Sqrt[1-n];ky=h Sqrt[n];integralSRI1[kx,L,h,#[[2]],#[[3]],#[[1,11]],\[Rho]])&/@MapThread[List,{Select[MADElementList[MADFlatten[latt]],#[[2]]==="SectorBend"&],(Extract[dx,#]&/@pos),(Extract[dpx,#]&/@pos)}])]


SR2Element[elem_]:=NIntegrate[(elem[[6]]/elem[[3]])^2,{l,0,elem[[3]]}]


MADSRI2[latt_]:=(Plus@@(SR2Element[#]&/@(Select[MADFlatten[latt],#[[2]]==="SectorBend"&])))/Meter


SR3Element[elem_]:=NIntegrate[Abs[(elem[[6]]/elem[[3]])^3],{l,0,elem[[3]]}]


MADSRI3[latt_]:=(Plus@@(SR3Element[#]&/@(Select[MADFlatten[latt],#[[2]]==="SectorBend"&])))/Meter^2


integralSRI4[kx_,s_,h_,dx_,dpx_,\[Beta]2_,n_,\[Rho]_]:=NIntegrate[(1-2n)(If[kx==0,(h l^2)/2,(h (1-Cos[kx l]))/kx^2]+dpx If[kx==0,l,Sin[kx l]/kx]+dx (Cos[kx l]+h If[kx==0,l,Sin[kx l]/kx] Tan[\[Beta]2]))/\[Rho]^3,{l,0,s},Compiled->True]


MADSRI4[latt_,dx_,dpx_]:=Module[{kx,ky,\[Rho], h, n,L},
pos=(Position[MADFlatten[latt],"SectorBend"][[All,1]]-1);
Plus@@((L=#[[1,3]];\[Rho]=L/#[[1,6]];n=-#[[1,4]] \[Rho]^2;h=1/\[Rho];kx=h Sqrt[1-n];ky=h Sqrt[n];integralSRI4[kx,L,h,#[[2]],#[[3]],#[[1,11]],n,\[Rho]])&/@MapThread[List,{Select[MADElementList[MADFlatten[latt]],#[[2]]==="SectorBend"&],(Extract[dx,#]&/@pos),(Extract[dpx,#]&/@pos)}])]


integralSRI5H[\[Alpha]_,\[Beta]_,\[Gamma]_,kx_,s_,h_,dx_,dpx_,\[Rho]_]:=NIntegrate[((dx Cos[kx l]+If[kx==0,(h l^2)/2,(h (1-Cos[kx l]))/kx^2]+dpx If[kx==0,l,Sin[kx l]/kx])^2+((\[Beta] Cos[kx l]^2-2 \[Alpha] Cos[kx l] If[kx==0,l,Sin[kx l]/kx]+\[Gamma] If[kx==0,l,Sin[kx l]/kx]^2) (dpx Cos[kx l]+If[kx==0,h l,(h Sin[kx l])/kx]-dx kx Sin[kx l])+(dx Cos[kx l]+If[kx==0,(h l^2)/2,(h (1-Cos[kx l]))/kx^2]+dpx If[kx==0,l,Sin[kx l]/kx]) (-If[kx==0,l,Sin[kx l]/kx] (\[Gamma] Cos[kx l]+kx \[Alpha] Sin[kx l])+Cos[kx l] (\[Alpha] Cos[kx l]+kx \[Beta] Sin[kx l])))^2)/(\[Beta] Cos[kx l]^2-2 \[Alpha] Cos[kx l] If[kx==0,l,Sin[kx l]/kx]+\[Gamma] If[kx==0,l,Sin[kx l]/kx]^2)/Abs[\[Rho]]^3,{l,0,s},Compiled->True]


MADSRI5H[input_]:=Module[{kx,ky,\[Rho], h, n,L},
Plus@@((L=#[[1,3]];\[Rho]=L/#[[1,6]];n=-#[[1,4]] \[Rho]^2;h=1/\[Rho];kx=h Sqrt[1-n];ky=h Sqrt[n];integralSRI5H[#[[2]],#[[3]],#[[4]],kx,L,h,#[[5]],#[[6]],\[Rho]])&/@{input})]


MADSRI5[latt_,alfx_,betx_,gamx_,dx_,dpx_]:=Block[{H,\[Beta],\[Beta]prime,\[Eta],\[Eta]prime,pos,mat,tpos,tmat,\[Rho]},
pos=(Position[MADFlatten[latt],"SectorBend"][[All,1]]-1);
Plus@@((MADSRI5H[#])&/@MapThread[List,{Select[MADFlatten[latt],#[[2]]==="SectorBend"&],(Extract[alfx,#]&/@pos),(Extract[betx,#]&/@pos),(Extract[gamx,#]&/@pos),(Extract[dx,#]&/@pos),(Extract[dpx,#]&/@pos)}])]


MAD\[Alpha]c[latt_]:=MADSRI1[latt]/MADLength[latt]


MAD\[Epsilon][latt_,energy_]:=Convert[(55 PlanckConstant (If[NumberQ[energy]===True,energy ElectronVolt Giga,energy])^2)/(2 \[Pi] (ElectronMass*SpeedOfLight^2)^2 32Sqrt[3]ElectronMass SpeedOfLight)*If[ValueQ[SRI5],SRI5,MADSRI5[latt]]/((If[ValueQ[SRI2],SRI2,MADSRI2[latt]])-(If[ValueQ[SRI4],SRI4,MADSRI4[latt]])),Nano Meter]


MADU0[latt_,energy_]:=Convert[(2 ClassicalElectronRadius (If[NumberQ[energy]===True,energy ElectronVolt Giga,energy])^4 (If[ValueQ[SRI2],SRI2,MADSRI2[latt]]))/(3 (ElectronMass SpeedOfLight^2)^3),ElectronVolt Kilo]


MADJx[latt_]:=1-(If[ValueQ[SRI4],SRI4,MADSRI4[latt]])/(If[ValueQ[SRI2],SRI2,MADSRI2[latt]])


MADJ\[Epsilon][latt_]:=2+(If[ValueQ[SRI4],SRI4,MADSRI4[latt]])/(If[ValueQ[SRI2],SRI2,MADSRI2[latt]])


MADES[latt_,energy_]:=ToFundamentalSI[(55 PlanckConstant (If[NumberQ[energy]===True,energy ElectronVolt Giga,energy])^2)/(2 \[Pi] (ElectronMass*SpeedOfLight^2)^2 32Sqrt[3]ElectronMass SpeedOfLight)*If[ValueQ[SRI3],SRI3,MADSRI3[latt]]/(2 (If[ValueQ[SRI2],SRI2,MADSRI2[latt]])+(If[ValueQ[SRI4],SRI4,MADSRI4[latt]]))]


MAD\[Tau]x[latt_,energy_]:=Convert[(3 ElectronMass^3 SpeedOfLight^5 MADLength[latt] Meter (Plus@@Select[MADFlatten[DIAMOND],#[[2]]==="SectorBend"&][[All,3]]/(2 \[Pi])) Meter)/(2 \[Pi] ClassicalElectronRadius MADJx[latt] (If[NumberQ[energy]===True,energy ElectronVolt Giga,energy])^3),Milli Second]


MAD\[Tau]y[latt_,energy_]:=Convert[(3 ElectronMass^3 SpeedOfLight^5 MADLength[latt] Meter (Plus@@Select[MADFlatten[DIAMOND],#[[2]]==="SectorBend"&][[All,3]]/(2 \[Pi])) Meter)/(2 \[Pi] ClassicalElectronRadius 1 (If[NumberQ[energy]===True,energy ElectronVolt Giga,energy])^3),Milli Second]


MAD\[Tau]\[Epsilon][latt_,energy_]:=Convert[(3 ElectronMass^3 SpeedOfLight^5 MADLength[latt] Meter (Plus@@Select[MADFlatten[DIAMOND],#[[2]]==="SectorBend"&][[All,3]]/(2 \[Pi])) Meter)/(2 \[Pi] ClassicalElectronRadius MADJ\[Epsilon][latt] (If[NumberQ[energy]===True,energy ElectronVolt Giga,energy])^3),Milli Second]


 MAD\[Epsilon]x[latt_,energy_,\[Kappa]_:0.01]:=  MAD\[Epsilon][latt,energy] /(1+\[Kappa])


 MAD\[Epsilon]y[latt_,energy_,\[Kappa]_:0.01]:=(\[Kappa] MAD\[Epsilon][latt,energy] )/(1+\[Kappa])


SetAttributes[MADSRI,HoldFirst];


MADSRI1[lattice_]:=(
MADWrite["MADSRI",Unevaluated[lattice],Slice->1];
MADStringWrite["MADSRI.mff","select,optics,full;\noptics,filename=MADSRI.optics.txt,columns=s,alfx,betx,dx,dpx;\n"];
RunMAD["MADSRI.mff"];
mfsInterpret["MADSRI.optics.txt"];
SRI1=MADSRI1[lattice,DX,DPX] Meter)


MADSRI4[lattice_]:=(
MADWrite["MADSRI",Unevaluated[lattice],Slice->1];
MADStringWrite["MADSRI.mff","select,optics,full;\noptics,filename=MADSRI.optics.txt,columns=s,alfx,betx,dx,dpx;\n"];
RunMAD["MADSRI.mff"];
mfsInterpret["MADSRI.optics.txt"];
SRI4=MADSRI4[lattice,DX,DPX]/Meter)


MADSRI5[lattice_]:=(
MADWrite["MADSRI",Unevaluated[lattice],Slice->1];
MADStringWrite["MADSRI.mff","select,optics,full;\noptics,filename=MADSRI.optics.txt,columns=s,alfx,betx,dx,dpx;\n"];
RunMAD["MADSRI.mff"];
mfsInterpret["MADSRI.optics.txt"];
GAMX=(1+ALFX^2)/BETX;
SRI5=MADSRI5[lattice,ALFX,BETX,GAMX,DX,DPX]/Meter)


MADSRI[lattice_]:=(
MADWrite["MADSRI",Unevaluated[lattice],Slice->1];
MADStringWrite["MADSRI.mff","select,optics,full;\noptics,filename=MADSRI.optics.txt,columns=s,alfx,betx,dx,dpx;\n"];
RunMAD["MADSRI.mff"];
mfsInterpret["MADSRI.optics.txt"];
GAMX=(1+ALFX^2)/BETX;
{SRI1=MADSRI1[lattice,DX,DPX] Meter,SRI2=MADSRI2[lattice],SRI3=MADSRI3[lattice],SRI4=MADSRI4[lattice,DX,DPX]/Meter,SRI5=MADSRI5[lattice,ALFX,BETX,GAMX,DX,DPX]/Meter})


MADSRI[lattice_,ALFX_,BETX_,DX_,DPX_]:=(
GAMX=(1+ALFX^2)/BETX;
{SRI1=MADSRI1[lattice,DX,DPX] Meter,SRI2=MADSRI2[lattice],SRI3=MADSRI3[lattice],SRI4=MADSRI4[lattice,DX,DPX]/Meter,SRI5=MADSRI5[lattice,ALFX,BETX,GAMX,DX,DPX]/Meter})


End[]


EndPackage[]
