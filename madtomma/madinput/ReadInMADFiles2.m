(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
BeginPackage["ReadInMADFiles2`",{"Madtomma`MADInput`MADInput`"}];


(* ::Input::Initialization:: *)
ReadInMADFile::usage="ReadInMADFile[\"filename\"] reads in a MAD file and (re)assigns the element and line definitions";


(* ::Input::Initialization:: *)
ReadInMADXFile::usage="ReadInMADXFile[\"filename\"] reads in a MAD file and (re)assigns the element and line definitions";


(* ::Input::Initialization:: *)
ReadInElegantFile::usage="ReadInElegantFile[\"filename\"] reads in an Elegant file and (re)assigns the element and line definitions";


(* ::Input::Initialization:: *)
Begin["`Private`"];


(* ::Input::Initialization:: *)
ElementList={};


(* ::Input::Initialization:: *)
idRead2[type_]:=Join[Take[readfile,If[StringMatchQ[readfile[[#]],"*&*"],{#,Module[{a=#},While[StringMatchQ[readfile[[a]],"*&*"],a++];a]},{#}]]]&/@(Flatten[Position[readfile,_?(StringMatchQ[ToString[#],type,IgnoreCase->True]&&(Not[StringMatchQ[StringTake[ToString[#],1],"!"]])&),{1}]])


(* ::Input::Initialization:: *)
idRead[type_,nottype_:""]:=
If[$VersionNumber>5.,
Select[readfile,StringMatchQ[StringReplace[#," "->""],type,IgnoreCase->True]&&Not[StringMatchQ[StringReplace[#," "->""],{"*:LINE*","*PLOT*","*TWISS*",nottype},IgnoreCase->True]]&],
Select[readfile,Block[{StringMatchQ,Function,Or},Function[StringMatchQ[StringReplace[#," "->""],type,IgnoreCase->True]&&Not@Thread[StringMatchQ[#,Or@@{"*:LINE*","*PLOT*","*TWISS*",nottype}],Or,{2,2}]]]]
]


(* ::Input::Initialization:: *)
idReadX[type_,nottype_:""]:=If[$VersionNumber>5.,Select[readfile,StringMatchQ[StringReplace[#," "->""],type,IgnoreCase->True]&&Not[StringMatchQ[StringReplace[#," "->""],{"*LINE*","*PLOT*","*TWISS*",nottype},IgnoreCase->True]]&]
,Select[readfile,StringMatchQ[StringReplace[#," "->""],type,IgnoreCase->True]&&Block[{StringMatchQ,Function,Or},Not@Thread[StringMatchQ[#,Or@@{"*LINE*","*PLOT*","*TWISS*",nottype}],Or,{2,2}]]&]
]


(* ::Input::Initialization:: *)
getLines[]:=
If[$VersionNumber>5.,
Select[readfile,StringMatchQ[#,"*:*LINE*",IgnoreCase->True]&&Not[StringMatchQ[#,{"*PLINE*","*PLOT*","*TWISS*","*NONLINEAR*"},IgnoreCase->True]]&],
Select[readfile,Block[{StringMatchQ,Function,Or},Function[StringMatchQ[#,"*:*LINE*",IgnoreCase->True]&&Not@Thread[StringMatchQ[#,Or@@{"*PLINE*","*PLOT*","*TWISS*"}],Or,{2,2}]]]]]


(* ::Input::Initialization:: *)
replacerules=Flatten@{(*(a:Except[WordCharacter] ~~"C"~~b:Except[WordCharacter])\[RuleDelayed]a~~"Q"~~b,*)
"&"->"",
"."->"$",
","->"},{",
":"->":=Partition[",
"("->"Flatten[{{",
")"->"}}],7]",
"LINE="->"",
a:(WordCharacter|DigitCharacter)~~"-"~~b:(WordCharacter|DigitCharacter)~~"-"~~c:(WordCharacter|DigitCharacter):>a~~"$"~~b~~"$"~~c,
a:(WordCharacter|DigitCharacter)~~"-"~~b:(WordCharacter|DigitCharacter):>a~~"$"~~b,
"-"->"Reverse@",
("*"<>ToString[#]->"Table[#,{"<>ToString[#]<>"}]&@")&/@Range[50],
(ToString[#]<>"*"->"Table[#,{"<>ToString[#]<>"}]&@")&/@Range[50],
"_"->"$","SIN"->"Sin@","COS"->"Cos@","TAN"->"Tan@","\""->""};


(* ::Input::Initialization:: *)
replacerules2={"_"->"$",
a:(WordCharacter|DigitCharacter)~~"-"~~b:(WordCharacter|DigitCharacter)~~"-"~~c:(WordCharacter|DigitCharacter):>a~~"$"~~b~~"$"~~c,
a:(WordCharacter|DigitCharacter)~~"-"~~b:(WordCharacter|DigitCharacter):>a~~"$"~~b,
":="->"=",":"->",","&"->"","TYPE="->"\"\""," "->"","[L]"->"\[LeftDoubleBracket]1,3\[RightDoubleBracket]","[APER]"->"Extra\[LeftDoubleBracket]3\[RightDoubleBracket]","TILT"->"TILT=TILT","SIN"->"Sin@","COS"->"Cos@","TAN"->"Tan@"(*,"\""\[Rule]""*)(*,(StartOfString ~~"C"~~EndOfString)\[Rule]"Q"*)};


(* ::Input::Initialization:: *)
replacerules3={" "->"","[L]"->"\[LeftDoubleBracket]1,3\[RightDoubleBracket]","[APER]"->"Extra\[LeftDoubleBracket]3\[RightDoubleBracket]","CONSTANT"->"","CLIGHT"->"299792458","TWOPI"->"2\[Pi]","PI"->"\[Pi]","SIN"->"Sin@","COS"->"Cos@","TAN"->"Tan@","_"->"$"};


(* ::Input::Initialization:: *)
replacerules4={"_"->"$"};


(* ::Input::Initialization:: *)
lineRead[list_]:=Block[{},
(*Print[list];*)
Clear[Evaluate[StringReplace[StringTake[ToString[list],{1,(StringPosition[ToString[list],":"]-1)[[1,1]]}],{" "->"","\""->""}]]];
(*Print[StringReplace[ToString[list],replacerules]];*)
ToExpression[Evaluate[StringReplace[ToString[list],replacerules]]]]


(* ::Input::Initialization:: *)
clearFunc[list2_]:=Block[{a},Evaluate[a=StringReplace[StringTake[list2,{1,(StringPosition[list2,":"]-1)[[1,1]]}],replacerules2]];
Clear[Evaluate[a]];Clear[Evaluate[a<>"Extra"]];]


(* ::Input::Initialization:: *)
quadRead[list2_,elementname___:""]:=Block[{Global`NAME,Global`K1=0,Global`TYPE="",Global`L=0,list,name:=Global`NAME,Global`APER=0,Global`TILT=0},
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<> StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
ToExpression["MADErrors["<>ToString[Global`NAME]<>"]={}"];
quad[Evaluate[Global`NAME],Evaluate[Global`L],Evaluate[FullForm[Global`K1]],Evaluate[Global`TYPE],Global`XAp->Global`APER,Global`YAp->Global`APER,Global`Tilt->Evaluate[If[!NumberQ[Global`TILT],"TILT",Global`TILT]]]]


(* ::Input::Initialization:: *)
sextRead[list2_,elementname___:""]:=Block[{Global`NAME,Global`K2,Global`TYPE="",Global`L=0,list,Global`APER=0,Global`TILT=0},
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<> StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
sext[Evaluate[Global`NAME],Global`L,Global`K2,Global`TYPE,Global`XAp->Global`APER,Global`YAp->Global`APER,Global`Tilt->Evaluate[If[!NumberQ[Global`TILT],"TILT",Global`TILT]]]]


(* ::Input::Initialization:: *)
octRead[list2_,elementname___:""]:=Block[{Global`NAME,Global`K3,Global`TYPE="",Global`L=0,list,Global`APER=0,Global`TILT=0},
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<> StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
oct[Evaluate[Global`NAME],Global`L,Global`K3,Global`TYPE,Global`XAp->Global`APER,Global`YAp->Global`APER,Global`Tilt->Evaluate[If[!NumberQ[Global`TILT],"TILT",Global`TILT]]]]


(* ::Input::Initialization:: *)
sbendRead[list2_,elementname___:""]:=Block[{Global`NAME="B",Global`K1=0,Global`TYPE="",Global`L=0,Global`E1=0,Global`E2=0,Global`K2=0,Global`H1=0,Global`HGAP=0,Global`FINT=0,Global`K3=0,Global`FINTX=0,Global`ANGLE=0,list,name:=Global`NAME,Global`APER=0,Global`TILT=0},
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<>StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
{e1,e2,tilt,k2,h1,hgap,fint,k3,fintx}={Global`E1,Global`E2,Global`TILT,Global`K2,Global`H1,Global`HGAP,Global`FINT,Global`K3,Global`FINTX};
Clear[Global`E1,Global`E2,Global`TILT,Global`K2,Global`H1,Global`HGAP,Global`FINT,Global`K3,Global`FINTX];
sbend[Evaluate[Global`NAME],Global`L,Global`K1,Global`ANGLE,Global`TYPE,Global`E1->e1,Global`E2->e2,Global`Tilt->tilt,Global`K2->k2,Global`H1->h1,Global`HGap->hgap,Global`FInt->fint,Global`K3->k3,Global`FIntX->fintx,Global`XAp->Global`APER,Global`YAp->Global`APER,Global`Tilt->Evaluate[If[!NumberQ[Global`TILT],"TILT",Global`TILT]]];
]


(* ::Input::Initialization:: *)
rbendRead[list2_,elementname___:""]:=Block[{Global`NAME="B",Global`K1=0,Global`TYPE="",Global`L=0,Global`E1=0,Global`E2=0,Global`K2=0,Global`H1=0,Global`HGAP=0,Global`FINT=0,Global`K3=0,Global`FINTX=0,Global`ANGLE=0,list,name:=Global`NAME,Global`APER=0,Global`TILT=0},
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<>StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
{e1,e2,tilt,k2,h1,hgap,fint,k3,fintx}={Global`E1,Global`E2,Global`TILT,Global`K2,Global`H1,Global`HGAP,Global`FINT,Global`K3,Global`FINTX};
Clear[Global`E1,Global`E2,Global`TILT,Global`K2,Global`H1,Global`HGAP,Global`FINT,Global`K3,Global`FINTX];
rbend[Evaluate[Global`NAME],Global`L,Global`K1,Global`ANGLE,Global`TYPE,Global`E1->e1,Global`E2->e2,Global`Tilt->tilt,Global`K2->k2,Global`H1->h1,Global`HGap->hgap,Global`FInt->fint,Global`K3->k3,Global`FIntX->fintx,Global`XAp->Global`APER,Global`YAp->Global`APER,Global`Tilt->Evaluate[If[!NumberQ[Global`TILT],"TILT",Global`TILT]]];
]


(* ::Input::Initialization:: *)
driftRead[list2_,elementname___:""]:=Block[{Global`NAME,Global`TYPE="",Global`L=0,list,Global`APER=0,Global`TILT=0},
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<>StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
drift[Evaluate[Global`NAME],Global`L,Global`TYPE,Global`XAp->Global`APER,Global`YAp->Global`APER]]


(* ::Input::Initialization:: *)
kickRead[list2_,elementname___:""]:=Block[{Global`NAME,TYPE="\"\"",Global`L=0,Global`VKICK=0,Global`HKICK=0,list,Global`APER=0,Global`TILT=0},
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<>StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
kick[Evaluate[Global`NAME],Global`L,Global`VKICK,Global`HKICK,Global`TYPE,Global`XAp->Global`APER,Global`YAp->Global`APER,Global`Tilt->Global`TILT]]


(* ::Input::Initialization:: *)
hkickRead[list2_,elementname___:""]:=Block[{Global`NAME,TYPE="\"\"",Global`L=0,Global`KICK=0,list,Global`APER=0,Global`TILT=0},
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<>StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
hkick[Evaluate[Global`NAME],Global`L,Global`KICK,Global`TYPE,Global`XAp->Global`APER,Global`YAp->Global`APER,Global`Tilt->Global`TILT]]


(* ::Input::Initialization:: *)
vkickRead[list2_,elementname___:""]:=Block[{Global`NAME,TYPE="\"\"",Global`L=0,Global`KICK=0,list,Global`APER=0,Global`TILT=0},
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<>StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
vkick[Evaluate[Global`NAME],Global`L,Global`KICK,Global`TYPE,Global`XAp->Global`APER,Global`YAp->Global`APER,Global`Tilt->Global`TILT]]


(* ::Input::Initialization:: *)
solRead[list2_,elementname___:""]:=Block[{Global`NAME,TYPE="\"\"",Global`L=0,Global`KS=0,list,Global`APER=0,Global`TILT=0},
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<>StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
solenoid[Evaluate[Global`NAME],Global`L,Global`KS,Global`TYPE,Global`XAp->Global`APER,Global`YAp->Global`APER,Global`Tilt->Global`TILT]]


(* ::Input::Initialization:: *)
bpmRead[list2_,elementname___:""]:=Block[{Global`NAME,Global`TYPE="",Global`L=0,list,Global`APER=0,Global`TILT=0},
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<>StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
bpm[Evaluate[Global`NAME],Global`L,Global`TYPE,Global`XAp->Global`APER,Global`YAp->Global`APER,Global`Tilt->Evaluate[If[Global`TILT==Global`TILT,"TILT",Global`TILT]]]]


(* ::Input::Initialization:: *)
rcollRead[list2_,elementname___:""]:=Block[{Global`NAME,Global`XSIZE=0,Global`YSIZE=0,Global`TYPE="",Global`L=0,list,Global`APER=0,Global`TILT=0},
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<>StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
rcoll[Evaluate[Global`NAME],Global`L,Global`XSIZE,Global`YSIZE,Global`TYPE,Global`XAp->Global`APER,Global`YAp->Global`APER]]


(* ::Input::Initialization:: *)
ecollRead[list2_,elementname___:""]:=Block[{Global`NAME,Global`XSIZE=0,Global`YSIZE=0,Global`TYPE="",Global`L=0,list,Global`APER=0,Global`TILT=0},
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<>StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
ecoll[Evaluate[Global`NAME],Global`L,Global`XSIZE,Global`YSIZE,Global`TYPE,Global`XAp->Global`APER,Global`YAp->Global`APER]]


(* ::Input::Initialization:: *)
markerRead[list2_,elementname___:""]:=Block[{Global`NAME,Global`TYPE="",Global`L=0,list,Global`APER=0,Global`TILT=0},
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<>StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
marker[Evaluate[Global`NAME],Global`TYPE,Global`XAp->Global`APER,Global`YAp->Global`APER]]


(* ::Input::Initialization:: *)
wireRead[list2_,elementname___:""]:=Block[{Global`NAME,Global`TYPE="",Global`L=0,list,Global`APER=0,Global`TILT=0},
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<>StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
wire[Evaluate[Global`NAME],Global`L,Global`TYPE,Global`XAp->Global`APER,Global`YAp->Global`APER]]


(* ::Input::Initialization:: *)
monitorRead[list2_,elementname___:""]:=Block[{Global`NAME,Global`TYPE="",Global`L=0,list,Global`APER=0,Global`TILT=0},
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<>StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
monitor[Evaluate[Global`NAME],Global`L,Global`TYPE,Global`XAp->Global`APER,Global`YAp->Global`APER]]


(* ::Input::Initialization:: *)
imonitorRead[list2_,elementname___:""]:=Block[{Global`NAME,Global`TYPE="",Global`L=0,list,Global`APER=0,Global`TILT=0},
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<>StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
imonitor[Evaluate[Global`NAME],Global`L,Global`TYPE,Global`XAp->Global`APER,Global`YAp->Global`APER]]


(* ::Input::Initialization:: *)
profileRead[list2_,elementname___:""]:=Block[{Global`NAME,Global`TYPE="",Global`L=0,list,Global`APER=0,Global`TILT=0},
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<>StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
profile[Evaluate[Global`NAME],Global`L,Global`TYPE,Global`XAp->Global`APER,Global`YAp->Global`APER]]


(* ::Input::Initialization:: *)
instrumentRead[list2_,elementname___:""]:=Block[{Global`NAME,Global`TYPE="",Global`L=0,list,Global`APER=0,Global`TILT=0},
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<>StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
instrument[Evaluate[Global`NAME],Global`L,Global`TYPE,Global`XAp->Global`APER,Global`YAp->Global`APER]]


(* ::Input::Initialization:: *)
matrixRead[list2_,elementname___:""]:=Block[{Global`NAME,Global`TYPE="",Global`L=0,list,Global`APER=0,Global`TILT=0},
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<>StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
matrix[Evaluate[Global`NAME],Global`L,Global`TYPE,Global`XAp->Global`APER,Global`YAp->Global`APER]]


(* ::Input::Initialization:: *)
rfcRead[list2_,elementname___:""]:=Block[{Global`NAME,Global`TYPE="",Global`L=0,list,Global`VOLT=0,Global`LAG=0,Global`HARMON=0,Global`PHASE=0},
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<>StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
(*Print[{Evaluate[Global`NAME],Global`L,Global`TYPE,Global`MADVolt\[Rule]Global`VOLT,Global`Lag\[Rule]Global`LAG,Global`Harmon\[Rule]Global`HARMON}];*)
rfc[Evaluate[Global`NAME],Global`L,Global`TYPE,Global`MADVolt->Global`VOLT,Global`Lag->Global`LAG,Global`Harmon->Global`HARMON,Global`Phase->Global`PHASE]]


(* ::Input::Initialization:: *)
lcavRead[list2_,elementname___:""]:=Block[{Global`NAME,Global`TYPE="",Global`L=0,list,Global`DELTAE=0,Global`FREQ=0,Global`PHI0=0},
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<>StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
(*Print[{Evaluate[Global`NAME],Global`L,Global`TYPE,Global`MADVolt\[Rule]Global`VOLT,Global`Lag\[Rule]Global`LAG,Global`Harmon\[Rule]Global`HARMON}];*)
lcav[Evaluate[Global`NAME],Global`L,Global`TYPE,Global`VoltageGain->Global`DELTAE,Global`CavityPhase->Global`PHI0,Global`Frequency->Global`FREQ]]


(* ::Input::Initialization:: *)
constRead[list2_]:=Block[{list},
clearFunc[list2];
list=ReplaceExponent[ToString[list2]];
ToExpression[StringReplace[list,replacerules3]];
]


(* ::Input::Initialization:: *)
multipoleRead[list2_,elementname___:""]:=Block[{Global`NAME,Global`TYPE="",Global`L=0,list,Global`LRAD=0.,Global`K0L=0.,Global`K1L=0.,Global`K2L=0.,Global`K3L=0.,Global`K4L=0.,Global`K5L=0.,Global`K6L=0.,Global`K7L=0.,Global`K8L=0.,Global`K9L=0.,Global`T0=0.,Global`T1=0.,Global`T2=0.,Global`T3=0.,Global`T4=0.,Global`T5=0.,Global`T6=0.,Global`T7=0.,Global`T8=0.,Global`T9=0.,name},
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<>StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
{lrad,k0l,t0,k1l,t1,k2l,t2,k3l,t3,k4l,t4,k5l,t5,k6l,t6,k7l,t7,k8l,t8,k9l,t9}={Global`LRAD,Global`K0L,Global`T0,Global`K1L,Global`T1,Global`K2L,Global`T2,Global`K3L,Global`T3,Global`K4L,Global`T4,Global`K5L,Global`T5,Global`K6L,Global`T6,Global`K7L,Global`T7,Global`K8L,Global`T8,Global`K9L,Global`T9};
multipole[Evaluate[Global`NAME],Global`L,Global`TYPE,Global`K0L->k0l,Global`T0->t0,Global`K1L->k1l,Global`T1->t1,Global`K2L->k2l,Global`T2->t2,Global`K3L->k3l,Global`T3->t3,Global`K4L->k4l,Global`T4->t4,Global`K5L->k5l,Global`T5->t5,Global`K6L->k6l,Global`T6->t6,Global`K7L->k7l,Global`T7->t7,Global`K8L->k8l,Global`T8->t8,Global`K9L->k9l,T9->t9];
]


(* ::Input::Initialization:: *)
chargeRead[list1_,elementname___:""]:=Block[{Global`NAME,Global`TYPE="",Global`TOTAL=0,list,Global`APER=0,Global`TILT=0},
list2=StringReplace[list1,{(a:Except[WordCharacter]... ~~"C"~~b:Except[WordCharacter]...):>a~~"Q"~~b}];
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<>StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
charge[Evaluate[Global`NAME],Global`TOTAL,Global`TYPE,Global`XAp->Global`APER,Global`YAp->Global`APER]]


(* ::Input::Initialization:: *)
solRead[list2_,elementname___:""]:=Block[{Global`NAME,Global`K1=0,Global`TYPE="",Global`L=0,list,name:=Global`NAME,Global`APER=0,Global`TILT=0},
If[elementname=="",clearFunc[list2],clearFunc[elementname]];
list=ReplaceExponent[ToString[list2]];
ToExpression["{{NAME="<> StringReplace[StringReplace[list,replacerules2],replacerules2]<>"}}"];
Global`NAME=StringReplace[ToString[Global`NAME],{"."->"$"}];
AppendTo[ElementList,{ToString[Global`NAME],list2}];
solenoid[Evaluate[Global`NAME],Evaluate[Global`L],Evaluate[Global`KS],Evaluate[Global`TYPE],Global`XAp->Global`APER,Global`YAp->Global`APER,Global`Tilt->Evaluate[If[!NumberQ[Global`TILT],"TILT",Global`TILT]]]]


(* ::Input::Initialization:: *)
ReplaceExponent[string_]:=Block[{list=string,before,after},
((If[((DigitQ[before=StringTake[list,{#-1}]])||(before==="=")||(before==="-")||(before==="+"))&&((DigitQ[after=StringTake[list,{#+1}]])||(after==="+")||(after==="-")),
list=StringReplacePart[list,"*10^",{#,#}]])&/@Reverse[Select[StringPosition[list,"E"][[All,1]],(#>1)&&(#<StringLength[list])&&(If[StringMatchQ[list,"*:*"],#>StringPosition[list,":"][[1,1]],True])&]]);
Return[StringReplace[list,"_"->"$"]]]


(* ::Input::Initialization:: *)
subelementRead[list2_,element_]:=Block[{list},
Switch[(Symbol@Evaluate[element[[1]]])[[1,2]],
"Quadrupole",quadRead[element[[2]]<>", NAME="<>list2,list2],
"SectorBend",sbendRead[element[[2]]<>", NAME="<>list2,list2],
"RectBend",rbendRead[element[[2]]<>", NAME="<>list2,list2],
"Sextupole",sextRead[element[[2]]<>", NAME="<>list2,list2],
"Octupole",octRead[element[[2]]<>", NAME="<>list2,list2],
"Drift",driftRead[element[[2]]<>", NAME="<>list2,list2],
"BPM",bpmRead[element[[2]]<>", NAME="<>list2,list2],
"Kicker",kickerRead[element[[2]]<>", NAME="<>list2,list2],
"Multipole",multipoleRead[element[[2]]<>", NAME="<>list2,list2],
"Marker",markerRead[element[[2]]<>", NAME="<>list2,list2],
"RCOL",rcollRead[element[[2]]<>", NAME="<>list2,list2],
"ECOL",ecollRead[element[[2]]<>", NAME="<>list2,list2],
"Wire",wireRead[element[[2]]<>", NAME="<>list2,list2],
"Instrument",instrumentRead[element[[2]]<>", NAME="<>list2,list2],
"Monitor",monitorRead[element[[2]]<>", NAME="<>list2,list2],
"IMonitor",imonitorRead[element[[2]]<>", NAME="<>list2,list2],
"Profile",profileRead[element[[2]]<>", NAME="<>list2,list2],
"Solenoid",solRead[element[[2]]<>", NAME="<>list2,list2],
"Matrix",matrixRead[element[[2]]<>", NAME="<>list2,list2],
"Charge",chargeRead[element[[2]]<>", NAME="<>list2,list2],
"Aperture",markerRead[element[[2]]<>", NAME="<>list2,list2]
]]


(* ::Input::Initialization:: *)
typesListMAD={{"*:QUA*",quadRead},{"*:SBEN*",sbendRead},{"*:RBEN*",rbendRead},{"*:SEX*",sextRead},{"*:OCT*",octRead},{"*:DRI*",driftRead},{"*:BPM*",NullRead},{"*:KIC*",kickRead},{"*:HKI*",hkickRead},{"*:VKI*",vkickRead},{"*:MPO*",multipoleRead},{"*:MUL*",multipoleRead},{"*:MAR*",markerRead},{"*:RCO*",rcollRead},{"*:ECO*",ecollRead},{"*:WIR*",wireRead},{"*:WS*",wireRead},{"*:INS*",instrumentRead},{"*:MON*",monitorRead},{"*:IMON*",imonitorRead},{"*:PRO*",profileRead},{"*:*RFC*",rfcRead},{"*:*LCAV*",lcavRead},{"*:=*",constRead},{"*:CONST*",constRead},{"*:SOL*",solRead},{"*:MAT*",matrixRead}}


(* ::Input::Initialization:: *)
typesListElegant={{"*:*QUAD*",quadRead},{"*:*CSBEN*",sbendRead},{"*:*SBEN*",sbendRead},{"*:*SEX*",sextRead},{"*:*OCT*",octRead},{"*:*DRIF*",driftRead},{"*:BPM*",bpmRead},{{"*:*KIC*","*N_KICKS*"},kickRead},{"*:MPO*",multipoleRead},{"*:MAR*",markerRead},{"*:=*",constRead},{"*:*MONI*",monitorRead},{"*:*CHARGE*",markerRead},{"*:*WAT*",markerRead},{"*:*RFCW*",rfcRead},{"*:*RFCA*",rfcRead},{"*:*RFDF*",driftRead},{"*:*WIGG*",driftRead},
{"*:*CHARGE*",chargeRead},{"*:*SOL*",solRead},{"*:*MAXAMP*",markerRead},{"*:RCO*",rcollRead},{"*:ECO*",ecollRead},{"*:CHARGE*",chargeRead},{"*:*MATR*",markerRead}}


(* ::Input::Initialization:: *)
interpretMADFile[file_]:=Block[{a},
readfile=Map[If[StringMatchQ[a=ToUpperCase[StringJoin[#]],"*!*"],StringTake[a,{1,StringPosition[a,"!"][[1,1]]-1}],a]&,Split[Select[ReadList[file,Record,RecordSeparators->{";","\n"}],Not[StringMatchQ[#,"!*"]]&],StringMatchQ[#1,"*&*"]&]];
Block[{in=#},((*If[StringMatchQ[#,"*QS*"],Print[StringReplace[#,replacerules4]]]*)(in[[2]][StringReplace[#,replacerules4]]))&/@idRead[in[[1]]]]&/@typesListMAD;
lineRead[#]&/@getLines[];]


(* ::Input::Initialization:: *)
interpretMADXFile[file_]:=Block[{a},
readfile=Map[If[StringMatchQ[a=ToUpperCase[StringJoin[#]],"*!*"],StringTake[a,{1,StringPosition[a,"!"][[1,1]]-1}],a]&,Split[Select[ReadList[file,Record,RecordSeparators->{"\n"}],Not[StringMatchQ[#,"!*"]]&],!StringMatchQ[#1,"*;"]&]];
Block[{in=#},(in[[2]][#])&/@idReadX[in[[1]],"*AT*"]]&/@typesListMADX;
lineRead[#]&/@getLines[];]


(* ::Input::Initialization:: *)
ReadInMADFile[file_String]:=Block[{a,tilt},
tilt=Global`TILT;Clear[Global`TILT];
ElementList={};
interpretMADFile[file];
Block[{in=#},subelementRead[#,in]&/@idRead["*:"<>in[[1]]<>",*"]]&/@ElementList;
Global`TILT=tilt;
]


(* ::Input::Initialization:: *)
ReadInMADXFile[file_String]:=Block[{a,tilt},
tilt=Global`TILT;Clear[Global`TILT];
ElementList={};
interpretMADXFile[file];
Block[{in=#},subelementRead[#,in]&/@idRead["*:"<>in[[1]]<>"*"]]&/@ElementList;
Global`TILT=tilt;
]


(* ::Input::Initialization:: *)
interpretElegantFile[file_]:=Block[{a},
readfile=Map[If[StringMatchQ[a=ToUpperCase[StringJoin[#]],"*!*"],StringTake[a,{1,StringPosition[a,"!"][[1,1]]-1}],a]&,Split[Select[ReadList[file,Record,RecordSeparators->{";","\n"}],Not[StringMatchQ[#,"!*"]]&],StringMatchQ[#1,"*&*"]&]];
Block[{in=#},(in[[2]][#])&/@idRead[Sequence@@in[[1]]]]&/@typesListElegant;
lineRead[#]&/@getLines[];]


(* ::Input::Initialization:: *)
ReadInElegantFile[file_]:=Block[{a},
tilt=Global`TILT;Clear[Global`TILT];
ElementList={};
interpretElegantFile[file];
(*Block[{in=#},subelementRead[#,in]&/@idRead["*:"<>in\[LeftDoubleBracket]1\[RightDoubleBracket]<>"*"]]&/@ElementList*);
Global`TILT=tilt;]


(* ::Input::Initialization:: *)
End[];


(* ::Input::Initialization:: *)
EndPackage[];
