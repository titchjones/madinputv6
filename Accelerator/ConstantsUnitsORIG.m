(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Subtitle:: *)
(*Beam Physics Note 33*)


(* ::Subtitle:: *)
(*GraphicsData["PostScript", "\<\*)
(*%!*)
(*%%Creator: Mathematica*)
(*%%AspectRatio: 1*)
(*MathPictureStart*)
(*/Mabs {*)
(*Mgmatrix idtransform*)
(*Mtmatrix dtransform*)
(*} bind def*)
(*/Mabsadd { Mabs*)
(*3 -1 roll add*)
(*3 1 roll add*)
(*exch } bind def*)
(*%% DensityGraphics*)
(*%%IncludeResource: font Courier*)
(*%%IncludeFont: Courier*)
(*/Courier findfont 10  scalefont  setfont*)
(*% Scaling calculations*)
(*0.0192308 0.00757117 0.0192308 0.00712251 [*)
(*[ 0 0 0 0 ]*)
(*[ 1 1 0 0 ]*)
(*] MathScale*)
(*% Start of Graphics*)
(*1 setlinecap*)
(*1 setlinejoin*)
(*newpath*)
(*0 0 m*)
(*1 0 L*)
(*1 1 L*)
(*0 1 L*)
(*closepath*)
(*clip*)
(*newpath*)
(*% Start of gray image*)
(*p*)
(*.01923 .01923 translate*)
(*.96154 .96154 scale*)
(*127 string*)
(*127 135 8 [127 0 0 135 0 0] {*)
(*\tcurrentfile*)
(*\t1 index*)
(*\treadhexstring*)
(*\tpop*)
(*}  Mimage*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000FF0000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000FFFFFF000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000000000000000000000FF00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000FFFFFFFFFFFFFF00000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000FF00FFFFFFFFFFFFFFFFFF000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000000000000000000000FFFFFF00FF0000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000FFFFFFFFFFFFFF00FFFF00000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000000000000000FF00FFFFFF000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000FFFFFFFFFFFF000000FFFF000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000FFFFFFFFFFFFFFFFFF000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000FF0000FF0000FF000000FF000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000000000000000FFFFFFFFFFFFFFFFFFFF000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000FF0000000000FF0000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000000000000000FFFFFFFFFFFFFFFFFFFFFF0000*)
(*000000000000000000000000000000000000000000000000*)
(*000000FF00000000000000000000FFFF0000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF00*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000000000000000FFFFFFFFFF000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000000000000000000000FFFFFFFFFFFFFFFFFF00*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000000000000000FFFFFFFFFFFFFF000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000FFFFFFFFFFFFFFFFFF*)
(*000000000000000000000000000000000000000000000000*)
(*000000FF00FF0000000000FFFFFFFFFFFFFFFF0000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000FF00FF0000FF0000FF00FFFFFFFFFF*)
(*000000000000000000000000000000000000000000000000*)
(*000000FFFFFF0000000000FFFFFFFFFFFFFFFFFF00000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000000000FF00FFFFFFFFFF0000FF00FFFFFFFFFF*)
(*FF0000000000000000000000000000000000000000000000*)
(*00FFFFFFFFFFFFFF000000FFFFFF000000FFFFFF00000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000000000FFFFFFFFFFFFFF000000FFFFFFFFFFFF*)
(*FF0000000000000000000000000000000000000000000000*)
(*00FFFFFF000000FF000000FF0000000000FFFFFF00000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000FFFFFFFFFFFFFFFF000000FFFFFFFFFFFF*)
(*FF0000000000000000000000000000000000000000000000*)
(*FFFFFF000000000000000000000000000000FFFFFF000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000FFFFFF000000FF00000000FFFFFFFFFFFF*)
(*FFFF00000000000000000000000000000000000000000000*)
(*0000000000000000FFFF0000000000000000FFFFFF000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000FF00FF00000000000000FFFFFFFFFFFFFF*)
(*FFFF00000000000000000000000000000000000000000000*)
(*FF00000000000000FFFF0000000000000000FFFFFF000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000FF000000000000000000FFFFFF0000FFFF*)
(*FFFFFF000000000000000000000000000000000000000000*)
(*00FF000000000000FFFF000000000000000000FFFF000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000FF0000FF00000000000000FF00000000FF00FF*)
(*FFFFFF000000000000000000000000000000000000000000*)
(*00FF000000000000FFFF0000000000FFFFFFFFFFFFFF0000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000000000000000000000FF00000000000000*)
(*FFFFFFFF0000000000000000000000000000000000000000*)
(*0000000000000000000000000000FFFFFFFFFFFFFFFF0000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000FF0000000000000000FF00000000000000*)
(*FFFFFF000000000000000000000000000000000000000000*)
(*0000000000000000000000000000FFFFFFFFFFFFFFFFFF00*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000000000FF000000000000FF0000000000FF*)
(*FFFFFFFF0000000000000000000000000000000000000000*)
(*00000000000000000000000000FF00FFFFFFFFFFFFFFFF00*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000FF0000FF0000000000000000000000000000FF*)
(*00FFFFFF00000000000000000000000000000000000000FF*)
(*FFFF00000000000000000000FF000000FF000000FFFFFFFF*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000FFFFFFFFFF00000000000000FF000000FFFF*)
(*FFFFFFFFFF0000000000000000000000000000000000FFFF*)
(*FFFFFF000000000000000000FF00000000000000FFFFFFFF*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000FFFFFF00FFFFFF00000000000000000000FFFF*)
(*FFFFFFFFFF000000000000000000000000000000000000FF*)
(*00FFFFFF0000000000000000FF0000000000000000FFFFFF*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000FFFFFF000000FFFF0000000000000000FFFFFFFF*)
(*FFFFFFFFFFFF000000000000000000000000000000FFFF00*)
(*0000000000000000000000FFFF000000000000000000FFFF*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000FFFF000000000000FF0000000000000000FFFFFF*)
(*FFFFFFFFFFFF000000000000000000000000000000FF0000*)
(*0000000000FFFF0000000000FF000000000000000000FFFF*)
(*FF0000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000FF0000FF000000FF000000000000FFFFFFFF00*)
(*00FFFFFFFFFF000000000000000000000000000000000000*)
(*00000000FFFF0000000000000000000000000000000000FF*)
(*FF0000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000FF00000000000000000000FF00000000FFFF000000*)
(*0000FFFFFFFF000000000000000000000000000000000000*)
(*0000000000FFFF000000000000000000000000000000FFFF*)
(*FFFF00000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000FF0000000000000000FFFF00000000FFFF000000*)
(*000000FFFFFF000000000000000000000000000000000000*)
(*0000000000FF0000000000000000000000000000FF0000FF*)
(*FFFF00000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000FF000000000000000000000000FF00000000*)
(*000000FFFFFFFF0000000000000000000000000000000000*)
(*000000000000000000000000000000000000FFFFFFFFFFFF*)
(*FFFFFF000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000FF000000000000FF00000000*)
(*00000000FFFFFF000000000000000000000000FF00000000*)
(*000000000000FF000000FF00000000000000FFFFFFFFFFFF*)
(*FFFF00000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000FF000000000000000000000000000000000000000000*)
(*000000FFFFFFFFFF00000000000000000000000000000000*)
(*000000000000000000000000000000000000FFFFFFFFFFFF*)
(*FFFFFF000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000FFFFFFFFFF0000000000000000000000000000000000*)
(*0000000000000000000000000000000000FFFFFFFFFFFFFF*)
(*FFFFFF000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00FF0000FF000000000000000000000000FF000000000000*)
(*00FFFFFFFFFFFFFF00000000000000000000FF0000FFFFFF*)
(*FF000000000000000000000000000000FFFFFFFFFFFFFFFF*)
(*FFFFFFFF0000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000FFFFFFFF0000000000000000000000000000FF0000*)
(*FFFFFFFFFFFFFFFF0000000000000000000000FFFFFFFFFF*)
(*FF00FF0000000000000000000000000000FF0000000000FF*)
(*FFFFFFFF0000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*FFFFFFFFFFFFFFFFFF0000000000000000FF000000000000*)
(*FFFFFFFFFFFFFFFF000000000000000000FFFFFFFFFFFFFF*)
(*FFFFFF00FF000000000000000000000000000000000000FF*)
(*FFFFFFFF0000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*FF00FF00FF0000FF0000000000000000FF000000000000FF*)
(*FFFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFF*)
(*FFFFFFFF000000FF00000000000000000000000000000000*)
(*FFFFFFFFFF00000000000000000000000000000000000000*)
(*00000000000000*)
(*0000000000000000000000000000000000000000000000FF*)
(*FF00000000000000FF0000000000000000000000000000FF*)
(*FFFF00FFFFFFFFFF000000000000000000FFFFFFFFFFFFFF*)
(*FFFFFFFFFF00000000000000000000FF0000000000000000*)
(*00FFFFFFFF00000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*FF000000000000000000FF00000000FFFF0000000000FFFF*)
(*0000FF00FFFFFFFFFF0000000000000000FFFFFFFFFF0000*)
(*00FFFFFFFF00000000000000000000FF0000000000000000*)
(*00FFFFFFFFFF000000000000000000000000000000000000*)
(*00000000000000*)
(*0000000000000000000000000000000000000000000000FF*)
(*FF000000000000000000FF00000000FF000000000000FFFF*)
(*0000000000FFFFFFFF00000000000000FFFFFFFFFF000000*)
(*00FFFFFFFF00000000000000000000000000000000000000*)
(*0000FFFFFFFF000000000000000000000000000000000000*)
(*00000000000000*)
(*00000000000000000000000000000000000000000000FFFF*)
(*00000000000000000000FFFF000000000000000000FFFF00*)
(*000000000000FFFFFF00000000000000FFFFFFFF00000000*)
(*0000FFFFFFFF000000000000000000000000000000000000*)
(*0000FFFFFFFF000000000000000000000000000000000000*)
(*00000000000000*)
(*00000000000000000000000000000000000000000000FF00*)
(*000000000000000000000000000000000000000000000000*)
(*00000000FFFFFFFFFF00000000000000FFFFFFFF00000000*)
(*000000FFFFFF000000000000000000FF0000000000000000*)
(*0000FFFFFFFFFF0000000000000000000000000000000000*)
(*00000000000000*)
(*00000000000000000000000000000000000000000000FF00*)
(*000000000000000000000000000000000000000000000000*)
(*00000000FF00FFFFFFFF000000000000FFFFFF0000000000*)
(*00000000FFFF000000000000000000000000000000000000*)
(*FFFFFFFFFFFF000000000000000000000000000000000000*)
(*00000000000000*)
(*00000000000000000000000000000000000000000000FF00*)
(*000000000000000000000000000000000000000000000000*)
(*00000000FFFFFFFFFFFF000000000000FFFFFF0000000000*)
(*00000000FFFF00000000000000000000000000000000FFFF*)
(*FFFFFFFFFFFFFF0000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000FF0000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000FFFFFFFFFFFFFF00000000FFFFFFFF0000000000*)
(*FF000000FFFFFF000000000000000000000000000000FFFF*)
(*FFFFFFFFFFFFFF0000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000000000000000FF00000000000000000000*)
(*000000FFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFF0000*)
(*00000000FFFF000000000000000000000000000000FFFFFF*)
(*FFFFFFFFFFFFFFFF00000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00FF00FF0000000000000000000000000000000000000000*)
(*0000FFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF00*)
(*0000000000FFFF0000000000000000000000000000FFFFFF*)
(*FFFFFFFFFFFFFFFF00000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000FF00FF*)
(*FFFFFFFFFF00000000000000000000000000000000000000*)
(*00000000FFFFFFFFFFFFFF000000FFFFFFFFFFFFFFFFFFFF*)
(*0000000000FFFF0000000000000000000000000000FFFF00*)
(*000000FFFFFFFFFF00000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000FFFFFF00000000000000FF000000000000FF000000*)
(*0000FF000000FFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFF*)
(*FF0000000000FFFF000000FF000000000000000000000000*)
(*00000000FFFFFFFFFF000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000FF00000000000000000000000000FF00000000*)
(*00000000000000FFFFFFFF000000FFFFFFFFFF0000FFFFFF*)
(*FF0000000000000000000000000000000000000000000000*)
(*0000000000FFFFFFFF000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000FF0000*)
(*00000000000000FF00000000000000000000000000000000*)
(*00FF0000000000FFFFFFFFFF0000FFFFFFFF00000000FFFF*)
(*FF000000000000FF00000000000000000000000000000000*)
(*0000000000FFFFFFFFFF0000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000FF00FF000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000000000FFFFFFFF00FFFFFFFF000000000000FF*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000FFFFFF000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000FFFFFFFFFF00FFFFFFFF00000000000000*)
(*00FF00000000000000000000000000000000000000000000*)
(*00000000000000FFFFFF0000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000FF00FF000000*)
(*00000000000000FF00000000000000000000000000000000*)
(*000000000000FFFFFFFFFFFFFFFFFFFFFFFF000000000000*)
(*000000000000000000000000000000000000FF0000000000*)
(*000000000000FFFFFFFFFF00000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000FFFFFFFFFFFFFFFFFFFFFFFFFF0000000000*)
(*0000FF000000000000000000000000000000000000000000*)
(*00000000FF00FFFFFFFFFF00000000000000000000000000*)
(*00000000000000*)
(*00000000000000000000000000000000000000FF00000000*)
(*0000000000000000000000000000000000FF000000000000*)
(*00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000*)
(*00FFFF000000000000000000000000000000000000000000*)
(*0000FFFFFFFFFFFFFFFFFF00000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000*)
(*00FFFF0000000000FF000000000000000000000000000000*)
(*00FFFFFFFFFFFFFFFFFFFF00000000000000000000000000*)
(*00000000000000*)
(*0000000000000000000000000000000000FF00FF00FF0000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000FFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFF0000*)
(*0000FF000000000000FF0000000000000000000000000000*)
(*FFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000*)
(*00000000000000*)
(*0000000000000000000000000000000000FF00FFFFFFFFFF*)
(*000000000000000000000000000000000000000000000000*)
(*00000000FFFF0000FFFFFFFFFFFFFFFFFF0000FFFFFF0000*)
(*0000FF0000000000FFFF000000000000FF00000000000000*)
(*FFFFFFFF00FFFFFFFFFFFFFF000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000FF00FFFFFFFFFFFFFF*)
(*FFFF00000000000000000000000000000000000000000000*)
(*000000000000000000FFFFFFFFFFFFFFFF0000FFFF000000*)
(*0000000000000000FFFF00000000000000000000000000FF*)
(*00000000000000FFFFFFFFFF000000000000000000000000*)
(*00000000000000*)
(*00000000000000000000000000000000FFFFFFFFFF00FFFF*)
(*FFFF00000000000000000000000000000000000000000000*)
(*0000000000000000FFFFFFFFFFFFFFFFFFFFFF00FFFF0000*)
(*000000000000000000FF0000000000000000000000000000*)
(*0000000000000000FFFFFFFFFF0000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000FFFFFFFFFFFFFF0000*)
(*FFFF00000000000000000000000000000000000000000000*)
(*00000000000000FFFFFFFFFFFFFFFFFFFFFFFFFF00000000*)
(*00000000000000000000FF00000000000000000000000000*)
(*0000000000000000FFFFFFFFFF0000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000FFFFFFFFFFFFFFFFFF*)
(*0000FF000000000000000000000000000000000000000000*)
(*00000000000000FFFFFFFFFFFFFFFFFFFFFFFFFF00000000*)
(*000000000000000000000000000000000000000000FFFF00*)
(*000000000000000000FFFFFFFF0000000000000000000000*)
(*00000000000000*)
(*0000000000000000000000000000FFFFFFFFFFFFFF00FFFF*)
(*FF000000FF00000000000000000000000000000000000000*)
(*00000000000000FFFFFFFFFFFFFFFFFFFFFFFF00000000FF*)
(*000000000000000000000000000000000000000000FF0000*)
(*000000000000000000FFFFFFFFFF00000000000000000000*)
(*00000000000000*)
(*0000000000000000000000000000FFFFFFFFFFFF00000000*)
(*00000000FF00000000000000000000000000000000000000*)
(*000000000000000000FFFFFFFFFFFFFFFFFFFF000000FFFF*)
(*FF0000000000000000000000000000000000000000000000*)
(*00000000000000FFFFFFFFFFFFFF00000000000000000000*)
(*00000000000000*)
(*0000000000000000000000000000FFFFFFFFFF0000000000*)
(*000000FFFF00000000000000000000000000000000000000*)
(*000000000000000000FFFFFFFFFFFFFFFFFFFF00000000FF*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000FFFFFFFFFFFFFFFFFFFF000000000000000000*)
(*00000000000000*)
(*00000000000000000000000000FFFFFFFFFFFFFF00000000*)
(*00000000FFFF000000000000000000000000000000000000*)
(*0000000000000000FFFFFFFFFFFFFFFFFFFF00000000FFFF*)
(*000000000000000000000000000000000000000000000000*)
(*00000000FFFFFFFFFFFFFFFFFFFFFF000000000000000000*)
(*00000000000000*)
(*000000000000000000000000FFFFFFFFFFFFFFFFFF000000*)
(*000000FFFF00000000000000000000000000000000000000*)
(*000000000000000000FFFFFFFFFFFFFFFF0000000000FFFF*)
(*0000000000000000000000FF000000000000000000000000*)
(*00000000FFFFFFFFFFFFFFFFFFFFFF000000000000000000*)
(*00000000000000*)
(*0000000000000000000000FFFFFFFFFFFFFFFFFFFF00FF00*)
(*00000000FF00000000000000000000000000000000000000*)
(*000000FF000000FFFFFFFFFFFFFFFFFFFF00000000000000*)
(*00000000000000000000FF00FF0000000000000000000000*)
(*000000FFFF0000000000FFFFFFFFFF000000000000000000*)
(*00000000000000*)
(*0000000000000000000000FFFFFFFFFFFFFFFFFFFFFF0000*)
(*00000000FFFFFF0000000000000000000000000000000000*)
(*0000000000FF00FFFFFFFFFFFFFFFFFFFFFFFF00FFFFFF00*)
(*0000000000FF0000000000FFFF0000000000000000000000*)
(*000000FF000000000000FFFFFFFFFFFF0000000000000000*)
(*00000000000000*)
(*0000000000000000000000FFFFFFFFFFFFFF00FFFFFFFF00*)
(*0000000000FFFF0000000000000000000000000000000000*)
(*00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000000000000000FFFFFFFFFF0000000000000000*)
(*00000000000000*)
(*00000000000000000000FFFFFFFFFFFFFF000000FFFFFF00*)
(*0000000000FFFFFF00000000000000000000000000000000*)
(*0000000000FFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFF0000*)
(*0000000000000000000000FF000000000000000000000000*)
(*0000FF0000000000FFFFFFFFFFFFFFFFFF00000000000000*)
(*00000000000000*)
(*0000000000000000FFFFFFFFFFFFFFFFFF0000000000FFFF*)
(*000000000000FFFF00000000000000000000000000000000*)
(*00000000000000FFFFFFFF000000FFFFFFFFFFFFFF000000*)
(*000000000000000000000000FF0000000000000000000000*)
(*00FF00000000000000FFFFFFFFFFFFFFFF00000000000000*)
(*00000000000000*)
(*0000000000000000FFFFFFFFFFFFFFFFFF0000000000FFFF*)
(*FF000000000000FF00000000000000000000000000000000*)
(*000000000000000000FFFF000000FFFFFFFFFFFFFF000000*)
(*000000000000000000000000000000000000000000000000*)
(*00FF00000000FFFFFFFFFFFFFFFFFFFFFFFF000000000000*)
(*00000000000000*)
(*0000FF000000FFFFFFFFFFFFFFFFFFFFFFFFFF00000000FF*)
(*FF0000000000000000000000000000000000000000000000*)
(*00000000000000FFFFFFFF00000000FFFFFF000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000FFFFFFFFFFFFFFFFFFFFFFFF000000000000*)
(*0000000000FF00*)
(*FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000FF*)
(*FFFF0000000000FFFF000000000000000000000000000000*)
(*0000000000000000FFFF00000000FFFFFFFFFF0000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00FF00000000FFFFFF00FFFFFFFFFFFFFFFFFF00FFFFFFFF*)
(*FFFFFFFFFFFFFF*)
(*FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000*)
(*FFFF00000000000000000000000000000000000000000000*)
(*000000000000FFFFFF000000000000FFFFFFFF0000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000FFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFF*)
(*FFFFFFFFFFFFFF*)
(*FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFF00000000*)
(*00FF00000000000000000000000000000000000000000000*)
(*0000000000000000FF000000000000FFFFFFFF0000000000*)
(*0000FF000000000000000000000000000000000000000000*)
(*0000000000FF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF*)
(*FFFFFFFFFFFFFF*)
(*FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF00FF0000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000FFFFFF00000000000000FFFFFFFF00000000*)
(*0000FFFF0000000000000000000000000000000000000000*)
(*000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF*)
(*FFFFFFFFFFFFFF*)
(*FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FF00000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000FFFFFF00000000000000FFFFFFFF00000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF*)
(*FFFFFFFFFFFFFF*)
(*FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000FF000000*)
(*000000000000000000FF0000000000000000000000000000*)
(*0000000000FFFFFF0000000000000000FFFFFFFFFF000000*)
(*000000000000000000000000000000FF0000000000000000*)
(*000000FFFF00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF*)
(*FFFFFFFFFFFFFF*)
(*FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000FFFF00*)
(*000000000000000000FFFF00000000000000000000000000*)
(*000000000000FFFF0000000000000000FFFFFFFFFFFF0000*)
(*00FF00000000000000000000000000FF0000000000000000*)
(*000000FFFF000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF*)
(*FFFFFFFFFFFFFF*)
(*FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFF00*)
(*000000FF0000000000FF0000000000000000000000000000*)
(*00000000FFFFFF00000000000000000000FFFFFFFF00FFFF*)
(*FF0000000000000000000000000000000000000000000000*)
(*000000000000FFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFF*)
(*FFFFFFFFFFFFFF*)
(*FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFF00*)
(*000000000000000000000000000000000000000000000000*)
(*0000FFFFFFFFFF00000000000000000000FFFFFFFFFFFFFF*)
(*FF0000000000000000000000000000FFFF00000000000000*)
(*0000000000FFFFFFFFFFFFFFFFFFFFFF0000000000000000*)
(*000000FF00FFFF*)
(*FFFF00FF00FFFF00FFFFFFFFFFFFFFFFFFFFFF00FF000000*)
(*000000FF0000000000000000000000000000000000000000*)
(*0000000000FFFFFF000000000000000000FFFFFFFFFFFFFF*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000FFFFFFFFFFFFFFFFFFFF0000000000000000*)
(*00000000000000*)
(*000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF000000*)
(*000000000000000000FF0000000000000000000000000000*)
(*0000000000FF0000000000000000000000FFFFFF00000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000FFFFFFFFFFFFFFFFFF000000000000000000*)
(*00000000000000*)
(*0000000000000000000000FFFFFFFFFFFFFFFFFFFF000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000FFFF00000000000000000000FFFFFF00000000*)
(*00000000000000000000000000000000000000FF00000000*)
(*0000000000FF0000FFFFFFFFFFFFFF000000000000000000*)
(*00000000000000*)
(*0000000000000000000000FFFFFFFFFFFFFFFFFFFF000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000FFFF0000000000000000000000FFFFFF000000*)
(*000000000000000000000000000000000000000000FF0000*)
(*FFFFFF0000FF0000FFFFFFFFFFFF00000000000000000000*)
(*00000000000000*)
(*000000000000000000000000FFFFFFFFFFFF0000000000FF*)
(*FFFF00000000000000000000000000000000000000000000*)
(*00000000FFFFFF0000000000000000000000FFFFFF000000*)
(*0000000000FF00000000000000000000000000000000FFFF*)
(*FFFFFFFFFF000000FFFFFFFFFF0000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000FFFFFFFFFFFF00FF00FF00FF*)
(*000000000000000000000000000000000000000000000000*)
(*00000000FFFF00000000000000000000000000FFFFFF0000*)
(*0000000000000000000000000000000000000000000000FF*)
(*FFFFFFFFFF0000FFFFFFFFFF000000000000000000000000*)
(*00000000000000*)
(*00000000000000000000000000FFFFFFFFFFFF0000FF00FF*)
(*000000000000000000000000FF0000000000000000000000*)
(*00000000FFFF00000000000000000000000000FFFFFF0000*)
(*000000000000000000000000000000000000000000000000*)
(*00FFFFFFFFFFFFFFFFFFFFFF000000000000000000000000*)
(*00000000000000*)
(*00000000000000000000000000FFFFFFFFFFFFFFFFFFFFFF*)
(*FFFF00000000FFFF00000000FF0000000000000000000000*)
(*00000000FFFF00000000000000000000000000FFFFFF0000*)
(*000000000000000000000000000000000000FF0000000000*)
(*000000FFFFFFFFFFFFFFFFFF000000000000000000000000*)
(*00000000000000*)
(*0000000000000000000000000000FFFFFFFFFFFFFFFFFFFF*)
(*FF00000000FFFF0000000000FF0000000000000000000000*)
(*0000FFFFFFFF0000000000000000000000000000FFFFFF00*)
(*000000000000000000000000000000000000FF0000000000*)
(*0000000000FFFFFFFFFFFF00000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000FFFFFFFFFFFFFF00FF*)
(*000000000000FF0000000000000000000000000000000000*)
(*000000FFFF0000000000000000000000000000FFFFFFFF00*)
(*000000000000000000000000000000000000FF0000000000*)
(*000000000000FFFFFFFFFF00000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000FFFFFFFFFFFFFF0000*)
(*0000000000FF0000000000000000000000000000000000FF*)
(*0000FF0000000000000000000000000000000000FFFFFFFF*)
(*0000FF000000000000000000000000000000000000000000*)
(*000000000000FFFFFFFF0000000000000000000000000000*)
(*00000000000000*)
(*00000000000000000000000000000000FFFFFFFFFF000000*)
(*0000000000000000000000000000000000000000000000FF*)
(*00FF00FF00000000000000000000000000000000FFFFFFFF*)
(*FFFFFF000000000000000000000000000000000000000000*)
(*0000000000FFFFFFFFFF0000000000000000000000000000*)
(*00000000000000*)
(*0000000000000000000000000000000000FFFFFFFF000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000000000000000000000000000000000FFFFFFFF*)
(*FFFFFF000000000000000000000000000000000000000000*)
(*0000000000FFFFFFFFFF0000000000000000000000000000*)
(*00000000000000*)
(*0000000000000000000000000000000000FFFFFFFF000000*)
(*000000FF0000000000000000000000000000000000000000*)
(*000000FF000000000000000000000000000000000000FFFF*)
(*FFFFFF0000000000000000000000000000000000FFFF0000*)
(*00000000FFFFFFFFFF000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000FFFFFFFF00FF*)
(*0000FFFF0000000000000000000000000000000000000000*)
(*000000FF0000000000000000000000000000000000FFFFFF*)
(*FFFF000000000000000000000000000000000000FFFFFF00*)
(*00000000FFFFFFFF00000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000FFFFFFFFFFFF*)
(*FFFFFFFFFF00000000000000000000000000000000000000*)
(*0000FF000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000FFFFFF*)
(*00FF00FFFFFFFF0000000000000000000000000000000000*)
(*00000000000000*)
(*00000000000000000000000000000000000000FFFFFFFFFF*)
(*FFFF0000000000000000FF0000000000FF00000000000000*)
(*00000000000000000000000000000000000000000000FFFF*)
(*000000000000000000000000000000000000000000FFFFFF*)
(*FFFFFFFFFFFFFFFF00000000000000000000000000000000*)
(*00000000000000*)
(*00000000000000000000000000000000000000FFFFFFFFFF*)
(*FFFF0000000000000000FF00000000FFFF00000000000000*)
(*0000FFFF000000000000000000000000000000000000FFFF*)
(*0000000000000000000000000000000000000000000000FF*)
(*FFFFFFFFFFFFFF0000000000000000000000000000000000*)
(*00000000000000*)
(*0000000000000000000000000000000000000000FFFFFFFF*)
(*00000000000000000000000000000000FFFF000000000000*)
(*00FFFFFF000000000000000000000000000000000000FFFF*)
(*0000000000000000000000000000000000000000000000FF*)
(*FFFFFFFFFFFF000000000000000000000000000000000000*)
(*00000000000000*)
(*0000000000000000000000000000000000000000FFFFFFFF*)
(*000000000000000000FF00000000000000FFFFFF00000000*)
(*FFFFFFFF00000000000000000000000000000000000000FF*)
(*000000000000000000FF0000000000000000000000000000*)
(*0000FFFFFFFF000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000FFFFFF*)
(*0000000000000000FFFF000000000000FFFF00FF00000000*)
(*FFFFFF00000000000000000000000000000000000000FFFF*)
(*FF0000000000000000FF0000000000000000000000000000*)
(*0000FFFFFFFF000000000000000000000000000000000000*)
(*00000000000000*)
(*00000000000000000000000000000000000000000000FFFF*)
(*FF0000000000FF000000000000000000000000FF000000FF*)
(*FFFFFF0000000000000000000000000000000000000000FF*)
(*FFFF00000000000000000000000000000000000000000000*)
(*0000FFFFFF00000000000000000000000000000000000000*)
(*00000000000000*)
(*00000000000000000000000000000000000000000000FFFF*)
(*FFFF00FF0000FF000000000000000000000000FFFFFFFFFF*)
(*FFFF000000000000000000000000000000000000000000FF*)
(*FFFFFF000000000000000000000000000000000000000000*)
(*00FFFFFF0000000000000000000000000000000000000000*)
(*00000000000000*)
(*00000000000000000000000000000000000000000000FFFF*)
(*FFFFFFFFFFFFFFFF0000000000000000000000FFFFFFFFFF*)
(*FFFF00000000000000000000000000000000000000000000*)
(*FFFFFFFFFF00FFFF00000000000000000000000000000000*)
(*00FFFFFF0000000000000000000000000000000000000000*)
(*00000000000000*)
(*0000000000000000000000000000000000000000000000FF*)
(*FFFFFFFFFFFFFF00000000000000000000000000FFFFFFFF*)
(*FF0000000000000000000000000000000000000000000000*)
(*00FFFFFFFFFFFFFF000000000000000000FFFFFF00000000*)
(*FFFFFF000000000000000000000000000000000000000000*)
(*00000000000000*)
(*0000000000000000000000000000000000000000000000FF*)
(*FFFFFFFFFFFF00000000000000FF0000000000000000FFFF*)
(*FF0000000000000000000000000000000000000000000000*)
(*0000FFFFFFFFFF00000000000000000000FFFFFF000000FF*)
(*FFFFFF000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*FFFFFFFFFF000000000000000000000000000000000000FF*)
(*FF0000000000000000000000000000000000000000000000*)
(*00000000FFFF000000000000000000000000FFFFFFFFFFFF*)
(*FFFFFF000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000FFFF000000000000000000FF0000000000000000FFFF*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000000000000000000000000000FFFFFFFFFF*)
(*FFFFFF000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000000000000000FF0000000000FFFFFFFFFF*)
(*FF0000000000000000000000000000000000000000000000*)
(*0000000000000000000000FF000000000000000000FFFFFF*)
(*FF0000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000FFFF00000000000000000000FF0000000000FFFFFFFF*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000000000000000000000000000000000000000FF*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000FFFFFFFF000000FF00000000FFFF00000000FFFFFFFF*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000FF00000000000000000000FF*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000FFFFFFFF00FFFFFF00000000FFFF0000FFFFFFFFFF*)
(*000000000000000000000000000000000000000000000000*)
(*0000FF000000000000000000000000000000000000FFFFFF*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000FFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFF0000*)
(*000000000000000000000000000000000000000000000000*)
(*000000FF000000000000000000FF00000000000000FFFF00*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000FFFFFFFFFFFFFF00000000FFFFFFFFFFFFFF0000*)
(*000000000000000000000000000000000000000000000000*)
(*0000FFFFFFFF00FFFFFF0000000000FF0000000000FFFF00*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000FFFFFFFF0000000000000000FFFFFFFF000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000FFFFFFFFFFFFFF00000000FFFF00FF00FFFFFF0000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000FF00FF000000FF00000000000000FF00000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000FFFFFFFFFFFF000000000000FFFFFFFFFFFFFF0000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000FF0000000000FFFF00000000FF0000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000FFFFFFFFFFFF000000000000FFFFFFFFFF000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000FFFFFF0000FFFFFFFF000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000FF00000000000000000000FFFFFFFF000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000FFFFFFFFFFFFFFFFFFFFFFFFFF00000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000000000000000000000000000FF00000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000FFFFFFFFFFFFFFFFFFFFFFFF0000000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000000000000000FFFF0000000000FF0000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000FFFFFFFFFFFFFFFFFF000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000FFFF000000FFFFFF0000FFFF000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000000000000000FFFFFFFFFFFF00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000FFFFFFFFFFFFFFFFFFFFFFFF0000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000FFFFFFFFFFFFFFFFFFFFFF000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000000000FFFFFFFF00FFFFFFFFFF000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000FFFFFFFFFF00000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*0000000000000000000000FFFFFF00000000000000000000*)
(*000000000000000000000000000000000000000000000000*)
(*00000000000000*)
(*pop*)
(*P*)
(*% End of image*)
(*% End of Graphics*)
(*MathPictureEnd*)
(*\*)
(*\>"]                                                           (Revised) 16 May 2001*)


(* ::Title:: *)
(*Physical Constants, Notations and Units for Accelerator Physics*)


(* ::Author:: *)
(*Rachel T. Burgess,  John M. Jowett, James Jones*)


(* ::Section 1:: *)
(*What's new in Version 6.0?*)


(* ::Text::RGBColor[1, 0, 0]:: *)
(*Updated for Mathematica Version 6*)
(*Tools for symbol management and tracking of physical dimensions.*)
(*DimensionCheck much simplified to work with internal database, the constant symbols defined in the package are included in the database.*)


(* ::Subsection:: *)
(*New in Version 6.1*)


(* ::Text::RGBColor[1, 0, 0]:: *)
(*In Mathematica Version 4.1, the source file of the Miscellaneous`ConstantsUnits` package contains the comment*)


(* ::Text::RGBColor[1, 0, 0]::Italic:: *)
(*As of CODATA 1998,some conventions used for the electron and muon g-factors,and for the electron,muon and neutron magnetic moments,are different than before;they are all expressed as a negative number in CODATA 1998,and a factor of two that was previously divided out of the electron g-factor is present.*)


(* ::Text::RGBColor[1, 0, 0]:: *)
(*The value of the constant ElectronGFactor has been re-defined.  This has been taken account of here by adjusting the definition of the symbol Subscript[G, e]to reflect common usage in accelerator physics and so that it has the same value as before.  This is done by testing on the version number.*)
(*N.B. There were changes to other things (such as the muon g factor - they do not seem to affect this package (?).*)


(* ::Section::Closed:: *)
(*Introduction*)


(* ::Text:: *)
(*This note is the documentation for a Mathematica [1,2] package designed to provide symbols for physical constants,  such as  Subscript[r, e], the classical radius of the electron, commonly occurring in accelerator physics (and other branches of physics!).  The properties of these symbols include their values and units in a very natural way.   In addition the package provides capabilities for painless conversions between many systems of units and for checking that the dimensions of expressions are consistent.*)


(* ::Text:: *)
(*The package also load the Utilities`Notation` package that is distributed with Mathematica.  This allows you to define compound symbols like Subscript[\[Beta], x] which will not evaluate to Subscript[\[Beta], 63] if there happens to be a variable x with the value 63.  See the documentation of that package for further information.  *)


(* ::Text:: *)
(*The present package adds additional functionality by making it very simple to register new symbols with their meaning and physical units, compound or otherwise, when you introduce them.  It maintains an internal database of the symbols that makes it easy to check the physical dimensions of any expression containing them.*)


(* ::Text:: *)
(*Basic use of the package is via a palette of buttons that will appear on your screen when you load it.  *)


(* ::Text:: *)
(*An additional feature is a 2-D plotting function (similar to Mathematica's Plot) that will take account the physical units of a function and independent variable and label the plot axes accordingly.*)


(* ::Text:: *)
(*Our motivation in writing this package was to simplify common sorts of manipulations of physical formulas:  in the past, these involved retrieving values of physical constants (e.g., from a reference book),  plugging in numbers and making sure that the units come out right.  *)


(* ::Text:: *)
(*Mathematica's standard packages for dealing with units and physical constants go a long way to solving these problems.  However we found that we could enhance their functionality considerably.  For example, we found that the packages lacked functions to reduce any expression to the (conventionally) fundamental SI units and for checking the dimensional consistency of any expression.  Our package fills these gaps.   It also provides robust instant conversion between different systems of units (thus it is as easy to express energies in GeV as in joules).*)


(* ::Text:: *)
(*The physical constants include most of those listed in Section 1.3 of [3];  values were cross-checked with [4].*)


(* ::Text:: *)
(*To make the package available, you need only copy a command from the "Setup" section into a Mathematica notebook of your own.  The "Examples" section illustrates basic use of the package and is intended to provide sufficient documentation.  *)


(* ::Text:: *)
(*The latest version should always be available on-line at*)


(* ::Program:: *)
(*http://home.cern.ch/jowett/Madtomma/*)


(* ::Text:: *)
(*This notebook is based on the template for package and notebook development by R. Maeder  and supplied with Mathematica 3.0.*)


(* ::Text:: *)
(*This notebook adheres to the conventions for Mathematica package structure and documentation set out in [2].  As such it serves as the development medium for the package itself.  For this reason , some sections of the printed versions of this document are hidden.  They contain the definitions ("code") of the functions.  The visible sections contain the documentation and examples of interest to users.*)


(* ::Section::Closed:: *)
(*Reference*)


(* ::Subsubsection::Closed:: *)
(*Title*)


(* ::Text:: *)
(*Physical Constants and Notations for Accelerator Physicste*)


(* ::Subsubsection::Closed:: *)
(*Author*)


(* ::Text:: *)
(*Rachel T. Burgess, John M. Jowett.*)


(* ::Subsubsection::Closed:: *)
(*Summary*)


(* ::Text:: *)
(*Provide notations and values for constants occurring in accelerator physics.*)


(* ::Subsubsection::Closed:: *)
(*Copyright*)


(* ::Text:: *)
(*\[Copyright] Copyright CERN.1999*)
(**)
(*The copyright and all other rights relating to this computer software, in whatever form, including but not limited to the source code, the object code and user documentation, are vested in CERN. *)
(**)
(*CERN, on a royalty-free and non-exclusive basis, hereby grants permission to use, copy, change, modify, translate, display, distribute and make available this computer software, subject to the following conditions:*)
(**)
(*(1) this computer software is provided on an as-is basis and CERN provides no express or implied warranties of any kind, including but not limited to those of merchantability, fitness for a particular purpose and non-infringement of the proprietary rights, such as copyrights, patents and trade secrets, of third parties. CERN accepts no liability whatsoever for or in connection with the use of this computer software; *)
(**)
(*(2) all copies made of this computer software or of parts thereof shall include  his copyright statement in full; *)
(**)
(*(3) however, if this computer software or parts thereof are made available in any other form than their original form, or are included in any other computer software, the following short acknowledgement only must be mentioned in the copyright statement and in the user documentation (or, in the absence thereof, in any other appropriate place) concerning the computer software thus made available or created: *)
(**)
(*"This product includes computer software created and made available by CERN. This acknowledgement shall be mentioned in full in any product which includes the CERN computer software included herein or parts thereof." *)


(* ::Subsubsection::Closed:: *)
(*Notebook Version*)


(* ::Text:: *)
(*23.1*)


(* ::Subsubsection::Closed:: *)
(*Mathematica Version*)


(* ::Text:: *)
(*6.0*)


(* ::Subsubsection::Closed:: *)
(*History*)


(* ::Text:: *)
(*Version 1.0 released as Beam Physics note 33, 16 July 1999.*)


(* ::Text:: *)
(*Version 2.0 released with addition of PhysicalUnits, PhysicalUnitsPlot etc. as requested by J.P. Koutchouk, 26 August 1999.*)


(* ::Text:: *)
(*Version 3.0 released with addition of IntroduceSymbol, SymbolsUnits, etc. DimensionCheck much simplified to use internal database, 15 January 2001.*)


(* ::Text:: *)
(*Version 3.1 released to take account of CODATA change to ElectronGFactor in Mathematica 4.1.  Pavillon Brasserie, Vevey, 16 May 2001.*)


(* ::Subsubsection::Closed:: *)
(*Keywords*)


(* ::Text:: *)
(*Physical, fundamental, constants, notation, accelerator*)


(* ::Subsubsection::Closed:: *)
(*Source*)


(* ::Text:: *)
(*[3],[4] and other standards.*)


(* ::Subsubsection::Closed:: *)
(*Warnings*)


(* ::Text:: *)
(*Note: all cells marked as "InitializationCell" will be written to the Auto-Save package. This package can then be read in programs that use it with Needs["Accelerator`ConstantsUnits`"]. Cells not intended to belong to the package should not have this property.*)


(* ::Subsubsection::Closed:: *)
(*Requirements*)


(* ::Text:: *)
(*This package uses the following package, documented here more fully than it is in the Help Browser.  In fact the usage is fairly simple, mainly of the Symbolize function.  *)


(* ::Text:: *)
(*Utilities`Notation`*)


(* ::Text:: *)
(*Note that while working on this package notebook, it is necessary to evaluate *)


(* ::InputOnly:: *)
(*Needs["Notation`"]*)


(* ::Text:: *)
(*to make the corresponding palette available.  The Symbolize command must never be typed directly.  Enter it via the palette.*)


(* ::Text:: *)
(*It also uses the standard packages*)


(* ::Text:: *)
(*Miscellaneous`Units`, Miscellaneous`PhysicalConstants`*)


(* ::Text:: *)
(*and actually modifies some of their content.*)


(* ::Section::Closed:: *)
(*Setup*)


(* ::Text:: *)
(*This section explains how to load the package file.  The contents of this file are equivalent to the following sections (Interface, Implementation, Epilog) in which the package is developed.  These sections are hidden when this notebook is used as the package documentation but may be inspected in the online copy of this notebook that can be found in the appropriate  sub-directory of the directory added to the $Path variable below.*)


(* ::Subsection:: *)
(*Search Path (ESSENTIAL!)*)


(* ::Text:: *)
(*To have access to this and other packages, you may need to add our packages directory to your search path.  This is system-dependent and the latest information about arranging it on CERN computer systems can be found at*)


(* ::Program:: *)
(*http://home.cern.ch/jowett/Madtomma/AboutFiles.html*)


(* ::Text:: *)
(*and is not reproduced here.  I strongly recommend that you modify your kernel initialisation file once and for all as explained on this page.  Then all our packages will be found as easily as the Standard Packages that come with Mathematica.*)


(* ::Subsection:: *)
(*Loading the Package*)


(* ::Text:: *)
(*To load the package, just evaluate the expression*)


(* ::Text:: *)
(*Needs["Accelerator`ConstantsUnits`"]*)


(* ::Text:: *)
(*This is all you need to start using the package in your own applications.*)


(* ::Section:: *)
(*Interface*)


(* ::Subsection:: *)
(*Set up the package context, including public imports*)


BeginPackage["Accelerator`ConstantsUnits`",{"Notation`","Units`","PhysicalConstants`"}]


(* ::Text:: *)
(*We get basic values of fundamental constants and units from the standard packages.  The function Convert is also very useful.*)


(* ::Subsection:: *)
(*Define symbols*)


(* ::Text:: *)
(*It is necessary to define the symbols before declaring their usage messages.  We do not need to do this for \[HBar] since it is not a composite symbol.  If we do, it creates problems when the package loads. The following cells must be created with the Notation Palette.*)


(* ::Text:: *)
(*Since plain \[Alpha] is used too often, add a subscript to the notation*)


Symbolize[\!\(\*
TagBox[
SubscriptBox["\[Alpha]", "s"],
"NotationTemplateTag"]\)]


Symbolize[\!\(\*
TagBox[
SubscriptBox["r", "e"],
NotationBoxTag,
Editable->True]\)]


Symbolize[\!\(\*
TagBox[
SubscriptBox["\[Lambda]", "e"],
NotationBoxTag,
Editable->True]\)]


Symbolize[\!\(\*
TagBox[
SubscriptBox[
OverscriptBox["\[Lambda]", "_"], "e"],
NotationBoxTag,
Editable->True]\)]


Symbolize[\!\(\*
TagBox[
SubscriptBox["G", "e"],
NotationBoxTag,
Editable->True]\)]


Symbolize[\!\(\*
TagBox[
SubscriptBox["\[Mu]", "0"],
NotationBoxTag,
Editable->True]\)]


Symbolize[\!\(\*
TagBox[
SubscriptBox["\[Epsilon]", "0"],
NotationBoxTag,
Editable->True]\)]


Symbolize[\!\(\*
TagBox[
SubscriptBox["m", "e"],
NotationBoxTag,
Editable->True]\)]


Symbolize[\!\(\*
TagBox[
SubscriptBox["m", "p"],
NotationBoxTag,
Editable->True]\)]


Symbolize[\!\(\*
TagBox[
SubscriptBox["m", "n"],
NotationBoxTag,
Editable->True]\)]


Symbolize[\!\(\*
TagBox[
SubscriptBox["m", "d"],
NotationBoxTag,
Editable->True]\)]


Symbolize[\!\(\*
TagBox[
SubscriptBox["m", "\[Mu]"],
NotationBoxTag,
Editable->True]\)]


Symbolize[\!\(\*
TagBox[
SubscriptBox["m", "Z"],
NotationBoxTag,
Editable->True]\)]


Symbolize[\!\(\*
TagBox[
SubscriptBox["m", "W"],
NotationBoxTag,
Editable->True]\)]


Symbolize[\!\(\*
TagBox[
SubscriptBox["a", "\[Infinity]"],
NotationBoxTag,
Editable->True]\)]


Symbolize[\!\(\*
TagBox[
SubscriptBox["\[Mu]", "B"],
NotationBoxTag,
Editable->True]\)]


Symbolize[\!\(\*
TagBox[
SubscriptBox["\[Mu]", "N"],
NotationBoxTag,
Editable->True]\)]


Symbolize[\!\(\*
TagBox[
SubscriptBox["r", "p"],
NotationBoxTag,
Editable->True]\)]


Symbolize[\!\(\*
TagBox[
SubscriptBox["Z", "0"],
NotationBoxTag,
Editable->True]\)]


Symbolize[\!\(\*
TagBox[
SubscriptBox["\[Sigma]", "T"],
NotationBoxTag,
Editable->True]\)]


Symbolize[\!\(\*
TagBox[
SubscriptBox["\[Sigma]", "SB"],
NotationBoxTag,
Editable->True]\)]


(* ::Subsection:: *)
(*Usage messages for the exported functions and the context itself*)


ConstantsUnits::usage ="ConstantsUnits.m is a package that provides notations and values for constants occurring in accelerator physics."


TeV::usage="TeV is a unit of energy.";
GeV::usage="GeV is a unit of energy.";
MeV::usage="MeV is a unit of energy.";
keV::usage="keV is a unit of energy.";


c::usage="c is a symbol for the speed of light in vacuum; it evaluates numerically with N[ ].";


\[HBar]::usage="\[HBar] is a symbol for the reduced Planck constant; it evaluates numerically with N[ ].";


Subscript[\[Alpha], s]::usage="\!\(\*SubscriptBox[\"\[Alpha]\", \"s\"]\) is a symbol for the fine structure constant; it evaluates numerically with N[ ].";


e::usage="e is a symbol for the electron charge; it evaluates numerically with N[ ].";


Subscript[r, e]::usage="\!\(\*SubscriptBox[\"r\", \"e\"]\) is a symbol for the classical radius of the electron; it evaluates numerically with N[ ].";


Subscript[\[Lambda], e]::usage="\!\(\*SubscriptBox[\"\[Lambda]\", \"e\"]\) is a symbol for the Compton wavelength of the electron; it evaluates numerically with N[ ].";


Subscript[
\!\(\*OverscriptBox["\[Lambda]", "_"]\), e]::usage="\!\(\*SubscriptBox[OverscriptBox[\"\[Lambda]\", \"_\"], \"e\"]\) is a symbol for the reduced Compton wavelength of the electron; it evaluates numerically with N[ ].";


Subscript[G, e]::usage="\!\(\*SubscriptBox[\"G\", \"e\"]\) is a symbol for the anomalous magnetic moment of the electron; it evaluates numerically with N[ ].";


Subscript[\[Mu], 0]::usage="\\ \ \ TagBox[\!\(\*SubscriptBox[\"\[Mu]\", \"0\"]\),\ NotationBoxTag,\ Editable->True] is a symbol for the permeability of the vacuum; it evaluates numerically with N[ ].";


Subscript[\[Epsilon], 0]::usage="\ TagBox[\!\(\*SubscriptBox[\"\[Epsilon]\", \"0\"]\),NotationBoxTag,Editable->True] is a symbol for the permittivity of the vacuum; it evaluates numerically with N[ ].";


Subscript[m, e]::usage="\!\(\*SubscriptBox[\"m\", \"e\"]\) is a symbol for the mass of the electron; it evaluates numerically with N[ ].";


Subscript[m, p]::usage="\!\(\*SubscriptBox[\"m\", \"p\"]\) is a symbol for the mass of the proton; it evaluates numerically with N[ ].";


Subscript[m, n]::usage="\!\(\*SubscriptBox[\"m\", \"n\"]\) is a symbol for the mass of the neutron; it evaluates numerically with N[ ].";


Subscript[m, d]::usage="\!\(\*SubscriptBox[\"m\", \"d\"]\) is a symbol for the mass of the deuteron; it evaluates numerically with N[ ].";


Subscript[m, \[Mu]]::usage="SubscriptBox[m,\[Mu] \ ] is a symbol for the mass of the muon; it evaluates numerically with N[ ].";


Subscript[m, Z]::usage="\!\(\*SubscriptBox[\"m\", \"Z\"]\) is a symbol for the mass of the Z-particle; it evaluates numerically with N[ ].";


Subscript[m, W]::usage="SubscriptBox[m,W \ \ ]is a symbol for the mass of the W-particle; it evaluates numerically with N[ ].";


Subscript[a, \[Infinity]]::usage="\:f3aais a symbol for the Bohr radius; it evaluates numerically with N[ ].";


Subscript[\[Mu], B]::usage="\:f3aais a symbol for the Bohr magneton; it evaluates numerically with N[ ].";


Subscript[\[Mu], N]::usage="\!\(\*SubscriptBox[\"\[Mu]\", \"N\"]\) is a symbol for the nuclear magneton; it evaluates numerically with N[ ].";


Subscript[r, p]::usage="\!\(\*SubscriptBox[\"r\", \"p\"]\) is a symbol for the classical radius of the proton; it evaluates numerically with N[ ].";


Subscript[Z, 0]::usage="\!\(\*SubscriptBox[\"Z\", \"0\"]\) is a symbol for the impedance of free space; it evaluates numerically with N[ ].";


Subscript[\[Sigma], T]::usage="\!\(\*SubscriptBox[\"\[Sigma]\", \"T\"]\) is a symbol for the Thomson cross section; it evaluates
numerically with N[ ].";


Subscript[\[Sigma], SB]::usage="\!\(\*SubscriptBox[\"\[Sigma]\", \"SB\"]\) is a symbol for the Stefan-Boltzmann constant; it evaluates numerically with N[ ].";


ToFundamentalSI::usage="toFundamentalSI[f] converts the quantity f to fundamental SI units.  Generally this helps to simplify the expressions of the units.";


ClassicalProtonRadius::usage="ClassicalProtonRadius is the classical radius of the proton."


DimensionCheck::usage="DimensionCheck[f] returns an expression showing the dimensional consistency of f, based on the internal database of symbols and units maintained by the ConstantsUnits package.\nThe alternative form DimensionCheck[f,symbolsUnits] uses a list of {symbol,unit} pairs given as second argument instead of the internal database.";


NumericalValueUnits::usage="NumericalValueUnits[f] interprets f as the product of a numerical value fn and symbolic units fu and returns {fn,fu}.";


PhysicalUnits::usage="PhysicalUnits[f] interprets f as the product of a numerical value fn and symbolic units fu and returns fu.";


NumericalValue::usage="NumericalValue[f] interprets f as the product of a numerical value fn and symbolic units fu and returns fn.";


IntroduceSymbol::usage="IntroduceSymbol[symbol,usagetext,units] introduces a symbol, registers its units for purposes of dimensional analysis and defines a usage message for it.";


SymbolsUnits::usage="SymbolsUnits[] returns a list of all symbols and units registered in the internal database.";


PhysicalUnitsPlot::usage="PhysicalUnitsPlot[f,{x,xmin,xmax}] works like Plot but removes the physical units of f and x before plotting.  Further, it creates labels for the axes from the symbolic forms of f and x and indicates their units.  It has all options of Plot except AxesLabel.";


(* ::Subsection:: *)
(*Error messages for the exported objects*)


ConstantsUnits::badarg = "You called `1` with argument `2`!"


(* ::Subsection:: *)
(*Modifications of standard package content*)


(* ::Text:: *)
(*Fix these as they are exact values.  It seems we should not do the following in the Private context of this package.*)


SpeedOfLight=299792458 Meter/Second


ThomsonCrossSection=0.66524616/10^28Meter^2


ClassicalProtonRadius=Convert[ElectronCharge^2/((4\[Pi] VacuumPermittivity) ProtonMass SpeedOfLight^2),Meter]


(* ::Section:: *)
(*Implementation*)


(* ::Text:: *)
(*This part contains the actual definitions and any auxiliary functions that should not be visible outside.*)


(* ::Subsection:: *)
(*Begin the private context (implementation part)*)


Begin["`Private`"]


(* ::Subsection:: *)
(*Definition of auxiliary functions and local (static) variables*)


(* ::Subsubsection:: *)
(*Starting prime number for DimensionCheck*)


minGodelPrimeIndex = 10;


(* ::Subsection:: *)
(*Definition of the exported functions*)


(* ::Text:: *)
(*Use a conventional notation for common constants and set up its numerical evaluation to the values given in the Miscellaneous`PhysicalConstants` package or others derived here.*)


(* ::Subsubsection:: *)
(*Conversion to basic SI units*)


(* ::Text:: *)
(*This seems to be lacking in the Units package.  It allow you to cancel units.  See examples*)


ToFundamentalSI[f_]:=SI[f]//.Units`Private`$ToFundamental


(* ::Subsubsection:: *)
(*Checking consistency of dimensions*)


(* ::Text:: *)
(*The list symbolsWithUnits should be of the form {{<symbol>,<units>},...}. This function builds up a rule that assigns values of the form <prime number><units> to each symbol appearing in the expression f.  The prime numbers are distinct and start with the Prime[minGodelPrimeIndex+1].  This rule is then applied to f.*)


DimensionCheck[f_,symbolsWithUnits_List]:=Expand[f//.MapIndexed[(#1[[1]]->Prime[minGodelPrimeIndex+First[#2]] #1[[2]]&),Union[symbolsWithUnits]]];
DimensionCheck[f_]:=DimensionCheck[f,Accelerator`ConstantsUnits`Private`$SymbolsUnits]


(* ::Subsubsection:: *)
(*Further convenient units*)


(* ::Text:: *)
(*It would be better to have these units inside the Units package.  But this works quite well nevertheless.*)


TeV= Tera ElectronVolt;GeV=Giga ElectronVolt;
MeV=Mega ElectronVolt;keV=Kilo ElectronVolt;eV=ElectronVolt;


(* ::Subsubsection:: *)
(*Speed of light*)


N[c]=SpeedOfLight


(* ::Subsubsection:: *)
(*Planck constant*)


N[\[HBar]]=PlanckConstantReduced


(* ::Subsubsection:: *)
(*Fine structure constant*)


N[Subscript[\[Alpha], s]]=FineStructureConstant


(* ::Subsubsection:: *)
(*Electron charge*)


N[e]=ElectronCharge


(* ::Subsubsection:: *)
(*Electron classical radius*)


N[Subscript[r, e]]=ClassicalElectronRadius


(* ::Subsubsection:: *)
(*Electron Compton wavelength*)


N[Subscript[\[Lambda], e]]=ElectronComptonWavelength


N[Subscript[
\!\(\*OverscriptBox["\[Lambda]", "_"]\), e]]=N[ElectronComptonWavelength/(2 \[Pi])]


(* ::Subsubsection:: *)
(*Electron anomalous magnetic moment*)


N[Subscript[G, e]]=If[$VersionNumber>=4.1,(-ElectronGFactor-2)/2,ElectronGFactor-1]


(* ::Text:: *)
(*This takes account of changes in definitions in Mathematica Version 4.1.  In any case the symbol Subscript[G, e] should have the value *)


0.00115965670000006682`


(* ::Subsubsection:: *)
(*Permeability of vacuum*)


N[Subscript[\[Mu], 0]]=Convert[VacuumPermeability,Henry/Meter]


(* ::Subsubsection:: *)
(*Permittivity of  vacuum*)


N[Subscript[\[Epsilon], 0]]=Convert[VacuumPermittivity,Farad/Meter]


(* ::Subsubsection:: *)
(*Electron mass*)


N[Subscript[m, e]]=ElectronMass


(* ::Subsubsection:: *)
(*Proton mass*)


N[Subscript[m, p]]=ProtonMass


(* ::Subsubsection:: *)
(*Neutron mass*)


N[Subscript[m, n]]=NeutronMass


(* ::Subsubsection:: *)
(*Deuteron mass*)


N[Subscript[m, d]]=DeuteronMass


(* ::Subsubsection:: *)
(*Muon mass*)


N[Subscript[m, \[Mu]]]=MuonMass


(* ::Subsubsection:: *)
(*Z-particle mass*)


N[Subscript[m, Z]]=Convert[N[91.187GeV/(SpeedOfLight^2)],Kilogram]


(* ::Subsubsection:: *)
(*W-particle mass*)


N[Subscript[m, W]]=Convert[N[80.4GeV/(SpeedOfLight^2)],Kilogram]


(* ::Subsubsection:: *)
(*Bohr radius*)


N[Subscript[a, \[Infinity]]]=BohrRadius



(* ::Subsubsection:: *)
(*Bohr magneton*)


N[Subscript[\[Mu], B]]=Convert[N[(ElectronCharge PlanckConstantReduced)/(2 ProtonMass)],Joule/Tesla]


(* ::Subsubsection:: *)
(*Nuclear magneton*)


N[Subscript[\[Mu], N]]=Convert[N[(ElectronCharge PlanckConstantReduced)/(2 ProtonMass)],Joule/Tesla]


(* ::Subsubsection:: *)
(*Proton classical radius*)


N[Subscript[r, p]]=ClassicalProtonRadius


(* ::Subsubsection:: *)
(*Impedance of free space*)


N[Subscript[Z, 0]]=Convert[N[VacuumPermeability SpeedOfLight],Ohm]


(* ::Subsubsection:: *)
(*Thomson cross section*)


N[Subscript[\[Sigma], T]]=ThomsonCrossSection


(* ::Subsubsection:: *)
(*Stefan-Boltzmann constant*)


N[Subscript[\[Sigma], SB]]=StefanConstant


(* ::Subsubsection:: *)
(*Separating numerical values and units*)


NumericalValueUnits[Times[a_/;NumericQ[a],b__]]:={a,Times@b};
NumericalValueUnits[a_/;NumericQ[a]]:={a,1};
NumericalValueUnits[a_]:={1,a}


NumericalValue[f_]:=First[NumericalValueUnits[f]]


PhysicalUnits[f_]:=Last[NumericalValueUnits[f]]


(* ::Subsubsection:: *)
(*Plotting with the units removed*)


(* ::Text:: *)
(*This function only works when it can be verified that the units of the upper and lower limits of the range are equivalent when reduced to fundamental SI units.  So it is possible to express the two limits in different units provided the physical dimensions are the same.*)


(* ::Text:: *)
(*The definition of this function is tricky and may not be very robust (see the examples).  However it only produces graphical results so the risk of transmitting errors to other calculations is small.*)


(* ::Text:: *)
(*For simplicity, implement options by direct inheritance from Plot, it is hardly worth setting up an options filter.  Note that the AxesLabel option will just be ignored.  Maybe it should allow override of the default?*)


SetAttributes[PhysicalUnitsPlot,HoldAll];
Options[PhysicalUnitsPlot]=Options[Plot];
PhysicalUnitsPlot[f_,{var_,varmin_,varmax_},opts___?OptionQ]/;PhysicalUnits[ToFundamentalSI[varmin]]==PhysicalUnits[ToFundamentalSI[varmax]]:=
	Module[{vunits,funits,nvar},
		vunits=PhysicalUnits[N[varmin]];funits=PhysicalUnits[N[f/.var->varmin]];
		fnew=f/.var->nvar vunits;
		If[FreeQ[funits,Plus],Plot[Evaluate[fnew/funits],{nvar,ToFundamentalSI[varmin/vunits],ToFundamentalSI[varmax/vunits]},AxesLabel->{StandardForm[HoldForm[var] [vunits]],StandardForm[HoldForm[f][ funits]]},opts],Print["Units of ordinate appear to be inconsistent."]]]


(* ::Subsubsection:: *)
(*Analogue of ListPlot (NOT WRITTEN)*)


(* ::Text:: *)
(*An analogue of ListPlot does not seem to make so much sense.*)


(* ::Subsubsection:: *)
(*Analogue of Plot3D and others (NOT WRITTEN)*)


(* ::Text:: *)
(*Exercise for the student*)


(* ::Subsubsection:: *)
(*Database of symbols and dimensions*)


(* ::Text:: *)
(*Build a list of symbols and the units they come in.  Start by taking everything that exists in this package.*)


$SymbolsUnits=({#1,PhysicalUnits[N[#1]]}&)/@ToExpression[Names["Accelerator`ConstantsUnits`*"]]


(* ::Text:: *)
(*Functions like DimensionCheck will produce two copies of their symbol.  A few constants defined like ClassicalProtonRadius are eliminated by the second test.*)


$SymbolsUnits=Select[$SymbolsUnits,First[#1]=!=Last[#1]&&!(NumericQ[First[#1]/Last[#1]])&]


(* ::Text:: *)
(*From the outside we can access this database as Accelerator`NewConstantsUnits`Private`$SymbolsUnits*)


(* ::Subsubsection:: *)
(*Function for symbol management*)


(* ::Text:: *)
(*Should do better than this: what if the symbol is already in the database and we want to change its dimensions (e.g. to correct an error)?  *)


IntroduceSymbol[sym_Symbol,usagetext_String,unit_]:=($SymbolsUnits=Append[Select[$SymbolsUnits,(First[#1]=!=sym)&],
{sym,unit}];
sym::"usage"=ToString[sym]<>" "<>usagetext<>" (units: "<>ToString[unit]<>")")


SymbolsUnits[]:=$SymbolsUnits


(* ::Subsection:: *)
(*Definitions for system functions*)


(* Sin/: Sin[x_]^2 := 1 - Cos[x]^2 *)


(* ::Subsection:: *)
(*Restore protection of system symbols*)


(* Protect[ Evaluate[protected] ] *)


(* ::Subsection:: *)
(*End the private context*)


End[ ]


(* ::Section:: *)
(*Epilog*)


(* ::Text:: *)
(*This section protects exported symbols and ends the package.*)


(* ::Subsection:: *)
(*Protect exported symbol*)


(* ::Text:: *)
(*Need to think about what to protect.  Note that the standard PhysicalConstants package does note protect its objects.  However it might be good for us to protect symbols that might easily be used by accident for another purpose, like c and e.  ? ?  *)


Protect[c,e]


(* ::Text:: *)
(*Alternative: protect all exported symbols*)


Protect[Evaluate[$Context <> "*"]]


(* ::Subsection:: *)
(*End the package context*)


EndPackage[ ]


(* ::Text:: *)
(*Open the palette to make it easy.  This has to be done outside the package context.*)


(*If[$Remote,Null,NotebookOpen["\\\\srdserve1\\astec\\software\\mathematica\\accelerator\\ConstantsUnitsPalette.nb"]]*)


(* ::Section:: *)
(*Examples and Tests*)


(* ::Subsection:: *)
(*Formulas involving physical constants*)


(* ::Text:: *)
(*The basic function of the Accelerator`ConstantsUnits` package is to let you use conventional symbols such as *)


(* ::Input:: *)
(*Subscript[*)
(*\!\(\*OverscriptBox["\[Lambda]", "_"]\), e]*)


(* ::Text:: *)
(*In fact, these compound symbols are best entered from the palette of buttons that appears when you load the package.  It is possible, however, to type them from the keyboard if you know what you are doing. See below.*)


(* ::Text:: *)
(*Like all properly defined objects in Mathematica, each has a usage message*)


(* ::Input:: *)
(*?Subscript[*)
(*\!\(\*OverscriptBox["\[Lambda]", "_"]\), e]*)


(* ::Input:: *)
(*?\[HBar]*)


(* ::Input:: *)
(*?keV*)


(* ::Text:: *)
(*But these symbols are more than just symbols.  They have the properties that you would expect under numerical evaluation*)


(* ::Input:: *)
(*N[Subscript[*)
(*\!\(\*OverscriptBox["\[Lambda]", "_"]\), e]]*)


(* ::Text:: *)
(*It is therefore easy to "plug in numbers" in symbolic formulas*)


(* ::Input:: *)
(*N[Subscript[*)
(*\!\(\*OverscriptBox["\[Lambda]", "_"]\), e]/Subscript[r, e]]*)


(* ::Text:: *)
(*Here is a table of some symbols from the package, together with their numerical evaluations.  It is constructed with the help of a pure function [1].*)


(* ::Input:: *)
(*TableForm[*)
(*	({#,N[#]}&)/@{c,e,Subscript[r, e],Subscript[m, e],\[HBar],Subscript[\[Lambda], e],Subscript[*)
(*\!\(\*OverscriptBox["\[Lambda]", "_"]\), e],Subscript[\[Alpha], s],Subscript[G, e],Subscript[Z, 0],Subscript[\[Sigma], T]}*)
(*]*)


(* ::Subsection:: *)
(*Unit conversions*)


(* ::Text:: *)
(*The distance (in energy) between integer spin resonances in an electron storage ring is*)


(* ::Input:: *)
(*N[(Subscript[m, e] c^2)/Subscript[G, e]]*)


(* ::Text:: *)
(*With the Convert function, this can be converted to the units you prefer*)


(* ::Input:: *)
(*Convert[N[(Subscript[m, e] c^2)/Subscript[G, e]],ChevalVapeur Fortnight]*)


(* ::Input:: *)
(*Convert[N[(Subscript[m, e] c^2)/Subscript[G, e]],GeV]*)


(* ::Text:: *)
(*This can be converted to SI units with another function*)


(* ::Input:: *)
(*SI[%]*)


(* ::Text:: *)
(*As a further example, we show how easy it is to convert units of integrated luminosity.  Suppose that the average luminosity of LEP is 0.3*10^32 cm^-2 s^-1, how much luminosity will be accumulated in a day?  The answer should be expressed in inverse pico-barns.*)


(* ::Input:: *)
(*Convert[( 0.3*10^32/((Centi Meter)^2 Second))*(1 Day),1/(Pico Barn)]*)


(* ::Text:: *)
(*This expression was formatted for readability rather than brevity!*)


(* ::Subsection:: *)
(*Reserved symbols*)


(* ::Text:: *)
(*Following tradition in physics, some fundamental constants are denoted by simple letters which thereby become unavailable for other purposes.*)


(* ::Input:: *)
(*?c*)


(* ::Text:: *)
(*The symbols defined by the package are protected because you will not normally want to change the values of the fundamental constants.  So the following assignment will fail:*)


(* ::Input:: *)
(*c=22*)


(* ::Input:: *)
(*N[c]*)


(* ::Subsection:: *)
(*Standard packages made available*)


(* ::Text:: *)
(*Most of the values of fundamental physical constants are actually obtained from the standard package Miscellaneous`PhysicalConstants`.  Everything defined by this package, together with Miscellaneous`Units`, is therefore available as described in the documentation for these packages. In a few cases,  values of physical constants are corrected by the present package.  For example, the speed of light is defined exactly,*)


(* ::Input:: *)
(*SpeedOfLight*)


(* ::Input:: *)
(*Precision[SpeedOfLight]*)


(* ::Text:: *)
(*but is often converted to "floating point" *)


(* ::Input:: *)
(*Precision[N[SpeedOfLight]]*)


(* ::Text:: *)
(*The Convert function comes from Miscellaneous`Units`.  It is useful for converting quantities to different units provided the dimensions are right.*)


(* ::Input:: *)
(*Convert[21 Joule,MeV]*)


(* ::Input:: *)
(*Convert[21. Joule, Foot/Second]*)


(* ::Text:: *)
(*The function Symbolize from the package Utilities`Notation` is used to define compound symbols such as Subscript[*)
(*\!\(\*OverscriptBox["\[Lambda]", "_"]\), e].  It's palette will usually appear when the package is loaded.  Consult its documentation for how to define additional symbols and notations.*)


(* ::Subsection:: *)
(*New units defined by the package*)


(* ::Text:: *)
(*Note that the package defines units that are commonly used in accelerator physics for ease of input.  However they usually reduce immediately to symbols defined in the standard package Miscellaneous`Units`*)


(* ::Input:: *)
(*?GeV*)


(* ::Input:: *)
(*GeV*)


(* ::Subsection:: *)
(*Reduction to a fundamental set of units*)


(* ::Text:: *)
(*It is often useful to reduce quantities to the so-called fundamental SI units:*)


(* ::Input:: *)
(*ToFundamentalSI[ 120 MeV]*)


(* ::Text:: *)
(*Without this function, we would not be able to recognise equivalent units*)


(* ::Input:: *)
(*ToFundamentalSI[Volt/Meter]*)


(* ::Input:: *)
(*ToFundamentalSI[Volt/Meter==Newton/Coulomb]*)


(* ::Input:: *)
(*ToFundamentalSI[Newton /(Meter Ampere)==Tesla]*)


(* ::Subsection:: *)
(*Registering symbols *)


(* ::Text:: *)
(*We can introduce a compound symbol Subscript[\[Lambda], Q] as follows (this input is easily constructed using the palette that comes with the package):*)


(* ::Input:: *)
(*Notation[\!\(\**)
(*TagBox[*)
(*SubscriptBox["\[Lambda]", "Q"],*)
(*NotationBoxTag,*)
(*Editable->True]\) \[DoubleLongLeftRightArrow] \!\(\**)
(*TagBox["lq",*)
(*NotationBoxTag,*)
(*Editable->True]\)];*)
(*IntroduceSymbol[lq,"is the length of our quadrupole magnet.",Meter]*)


(* ::Text:: *)
(*The Notation function makes it easier to input the symbol.  We just need to type lq instead of Subscript[\[Lambda], Q] but the latter form will appear once notebook cells are converted to standard form (e.g. in the output of an evaluation). The IntroduceSymbol function (whose first argument must be identical to the alias) defines a usage message for the symbol that can be accessed by typing*)


(* ::Input:: *)
(*?lq*)


(* ::Text:: *)
(*and registers that it should have units of length (Meter) in the package database. The IntroduceSymbol function's value is just the usage message.  *)


(* ::Text:: *)
(*The use of this will be explained in the next section.  First, let's introduce some more symbols to make the demonstrations non-trivial:*)


(* ::Input:: *)
(*Notation[\!\(\**)
(*TagBox[*)
(*SubscriptBox["E", "b"],*)
(*NotationBoxTag,*)
(*Editable->True]\) \[DoubleLongLeftRightArrow] \!\(\**)
(*TagBox["EGeV",*)
(*NotationBoxTag,*)
(*Editable->True]\)];*)
(*IntroduceSymbol[EGeV,"is the beam energy.",GeV]*)


(* ::Input:: *)
(*Notation[\!\(\**)
(*TagBox[*)
(*SubscriptBox["a", "\[Theta]"],*)
(*NotationBoxTag,*)
(*Editable->True]\) \[DoubleLongLeftRightArrow] \!\(\**)
(*TagBox["a",*)
(*NotationBoxTag,*)
(*Editable->True]\)];*)
(*IntroduceSymbol[a,"is the dimensionless scaling parameter.",1]*)


(* ::Input:: *)
(*Notation[\!\(\**)
(*TagBox["\[Rho]",*)
(*NotationBoxTag,*)
(*Editable->True]\) \[DoubleLongLeftRightArrow] \!\(\**)
(*TagBox["rho",*)
(*NotationBoxTag,*)
(*Editable->True]\)];*)
(*IntroduceSymbol[rho,"is the bending radius.",Meter]*)


(* ::Input:: *)
(*Notation[\!\(\**)
(*TagBox[*)
(*SubscriptBox["\[Rho]", "y"],*)
(*NotationBoxTag,*)
(*Editable->True]\) \[DoubleLongLeftRightArrow] \!\(\**)
(*TagBox["rhoy",*)
(*NotationBoxTag,*)
(*Editable->True]\)];*)
(*IntroduceSymbol[rhoy,"is the bending radius.",Meter];*)


(* ::Subsection:: *)
(*Checking dimensions*)


(* ::Text:: *)
(*The function DimensionCheck provides a simple method for checking the dimensions in  formulas   *)


(* ::Text:: *)
(*Applying the function should give an expression with correct, homogeneous units. Note, however, that you should not assume that the result has anything in common with the original expression except its dimensions.  In particular it is not numerically equal to it.*)


(* ::Input:: *)
(*DimensionCheck[Subscript[\[Lambda], Q]]*)


(* ::Text:: *)
(*Each symbol is actually replaced by its unit multiplied by a unique prime number. Prime factorisations of the result will be useful in certain cases for reconstructing the formula (this was inspired, somewhat whimsically, by the proof of  G\[ODoubleDot]del's Theorem).  To take a slightly more complicated expression that is dimensionless overall, we find*)


(* ::Input:: *)
(*DimensionCheck[Subscript[\[Lambda], Q]/(Subscript[\[Lambda], Q]/Subscript[a, \[Theta]]+Subscript[\[Rho], y])]*)


(* ::Text:: *)
(*which is a dimensionally homogeneous expression, showing that the expression is dimensionally consistent.*)


(* ::Text:: *)
(*If the expression contains symbols that are not known to the package database*)


(* ::Input:: *)
(*DimensionCheck[Subscript[\[Lambda], Q]/(Subscript[\[Rho], y]+(Sin[(\[Pi] \!*)
(*\*SubsuperscriptBox[\(a\), \(\[Theta]\), \(2\)] s)/Subscript[\[Lambda], Q]] Subscript[\[Lambda], Q])/Subscript[a, \[Theta]])]*)


(* ::Text:: *)
(*then they can always be added*)


(* ::Input:: *)
(*IntroduceSymbol[s,"is the azimuth.",Meter];*)


(* ::Input:: *)
(*DimensionCheck[Subscript[\[Lambda], Q]/(Subscript[\[Rho], y]+(Sin[(\[Pi] \!*)
(*\*SubsuperscriptBox[\(a\), \(\[Theta]\), \(2\)] s)/Subscript[\[Lambda], Q]] Subscript[\[Lambda], Q])/Subscript[a, \[Theta]])]*)


(* ::Text:: *)
(*Sometimes further simplification is helpful or necessary to make the results of DimensionCheck completely transparent.  In this case, applying N, to force numerical evaluation, will often simplify the expression further and make it very easy to see if the expression is dimensionally consistent*)


(* ::Input:: *)
(*N[%]*)


(* ::Text:: *)
(*If the expression is not dimensionally consistent, then this will be quite obvious*)


(* ::Input:: *)
(*DimensionCheck[(Subscript[\[Lambda], Q] (1-s))/(Subscript[\[Rho], y]+(Sin[(\[Pi] Subscript[a, \[Theta]] s^2)/Subscript[\[Lambda], Q]] Subscript[\[Lambda], Q])/Subscript[a, \[Theta]])]*)


(* ::Input:: *)
(*Simplify[%]*)


(* ::Input:: *)
(*N[%]*)


(* ::Text:: *)
(*If the expression involves symbolic constants, numerical evaluation may be mandatory*)


(* ::Input:: *)
(*DimensionCheck[(lq/c EGeV+\[HBar])/(rhoy+Sin[\[Pi] a^2 s/lq]lq/a)]//Simplify*)


(* ::Input:: *)
(*N[%]*)


(* ::Text:: *)
(*In cases where the units are mixed, as here, a conversion has to be carried out before the dimensional consistency is completely obvious*)


(* ::Input:: *)
(*ToFundamentalSI[%]*)


(* ::Subsubsection:: *)
(*Alternative form of DimensionCheck *)


(* ::Text:: *)
(*The function DimensionCheck can take an optional second argument. This should be a list of all symbols that may appear in the expression, together with their units.  It is often convenient to prepare this list in advance and store it in a variable, e.g., *)


(* ::Input:: *)
(*otherUnits={{lb,Meter},{Eb,GeV},{\[Phi],1},{\[Rho],Meter}}*)


(* ::Input:: *)
(*DimensionCheck[(lb +\[Rho])/Eb Sin[\[Phi]],otherUnits]*)


(* ::Input:: *)
(*N[%]*)


(* ::Subsubsection:: *)
(*Access to the internal database*)


(* ::Text:: *)
(*The internal database which is used by default can be accessed by evaluating*)


(* ::Input:: *)
(*SymbolsUnits[]*)


(* ::Text:: *)
(* However the only way to change it is via the IntroduceSymbol function.  This can overwrite a previous definition.*)


(* ::Subsection:: *)
(*Keyboard entry of compound symbols*)


(* ::Text:: *)
(*Here are the results of two attempts to enter a symbol defined by the package directly from the keyboard:*)


(* ::Input:: *)
(*{*)
(*\!\(\*OverscriptBox[*)
(*SubscriptBox["\[Lambda]", "e"], "_"]\),Subscript[*)
(*\!\(\*OverscriptBox["\[Lambda]", "_"]\), e]}//N*)


(* ::Text:: *)
(*Only the second was successful.   Simpler symbols are easier*)


(* ::Input:: *)
(*{c,Subscript[r, e]}//N*)


(* ::Text:: *)
(*but it is safer to use the palette of buttons (see below) unless you are sure of what you are doing.*)


(* ::Subsection:: *)
(*Separating numerical values and units*)


(* ::Text:: *)
(*The following function attempts to split a physical quantity in the product of a purely numerical value and some physical units:*)


(* ::Input:: *)
(*NumericalValueUnits[5.2 Meter/Second]*)


(* ::Text:: *)
(*Clearly there are many expressions for which this does not make much sense so it is up to the user to use it appropriately.*)


(* ::Input:: *)
(*NumericalValueUnits[(5+x) Meter/Second]*)


(* ::Input:: *)
(*NumericalValueUnits[(5+x) Meter/Second/.x->4]*)


(* ::Input:: *)
(*NumericalValueUnits[2+x]*)


(* ::Subsection:: *)
(*Plotting physical quantities with units*)


(* ::Text:: *)
(*Suppose that you want to plot a physical quantity, say Eb^2/(Subscript[m, p ]c^2), with beam energy Subscript[E, b] given in units of GeV in the range 2 to 5 GeV.  Since Plot can only plot numerical quantities, it is necessary to determine the units of the expression and then divide them out.  Worse it is sometimes necessary to do unit conversions so that plot can recognise the result as a number.  Thus*)


(* ::Input:: *)
(*Plot[ToFundamentalSI[((Eb GeV)^2/(Subscript[m, p ]c^2))/GeV],{Eb,2,5 }]*)


(* ::Text:: *)
(*The function PhysicalUnitsPlot can simplify this.  See the following examples.*)


(* ::Subsubsection:: *)
(*Tests with explicit units*)


(* ::Text:: *)
(*Consider the example above.   Note that units can now be present in the range specification.*)


(* ::Input:: *)
(*PhysicalUnitsPlot[Eb^2/(Subscript[m, p]c^2),{Eb,2 GeV,5 GeV}]*)


(* ::Text:: *)
(*Inconsistent units will not plot.*)


(* ::Input:: *)
(*PhysicalUnitsPlot[Evaluate[Eb^2],{Eb,2  Pascal Meter,5 GeV}]*)


(* ::Input:: *)
(*PhysicalUnitsPlot[Eb^2,{Eb,2 Pascal Meter,5 GeV}]*)


(* ::Text:: *)
(*but consistent units will*)


(* ::Input:: *)
(*PhysicalUnitsPlot[Eb^2,{Eb,.5 Nano Pascal Meter^3,5 GeV}]*)


(* ::Text:: *)
(*Constants and units from the package work in many ways*)


(* ::Input:: *)
(*PhysicalUnitsPlot[Eb^2/(Subscript[m, p ]c^2),{Eb,N[Subscript[m, p]c^2],5 GeV}]*)


(* ::Text:: *)
(*Note that the units of the abscissa are taken from the evaluation of the lower limit of the range.  This can be changed by forcing a conversion.*)


(* ::Input:: *)
(*PhysicalUnitsPlot[Eb^2/(Subscript[m, p ]c^2),{Eb,Convert[N[ Subscript[m, p]c^2],MeV],3 GeV}]*)


(* ::Text:: *)
(*Since the literal form in which the function is specified is used for the label of the vertical axis, another approach may be needed to convert the units of the function itself*)


(* ::Input:: *)
(*PhysicalUnitsPlot[Convert[Eb^2/(Subscript[m, p ]c^2),GeV],{Eb,Convert[N[ Subscript[m, p]c^2],MeV],3 GeV}]*)


(* ::Text:: *)
(*One possibility is*)


(* ::Input:: *)
(*Subscript[M, p]=Convert[N[Subscript[m, p]],GeV/c^2];*)
(*PhysicalUnitsPlot[Eb^2/(Subscript[M, p ]c^2),{Eb,Convert[N[ Subscript[m, p]c^2],GeV],3 GeV}]*)


(* ::Text:: *)
(*and another is to define a new notation*)


(* ::Input:: *)
(*\[CapitalGamma][Eb]=Convert[N[Eb^2/(Subscript[m, p ]c^2)],Eb^2  GeV^-1];*)
(*PhysicalUnitsPlot[\[CapitalGamma][Eb],{Eb,Convert[N[ Subscript[m, p]c^2],GeV],3 GeV}]*)


(* ::Subsubsection:: *)
(*Plotting with mixtures of units*)


(* ::Input:: *)
(*PhysicalUnitsPlot[Eb^2,{Eb,1 GeV, 5000 MeV}]*)


(* ::Input:: *)
(*PhysicalUnitsPlot[ x^2 ,{x,1 Foot,2 Meter}]*)


(* ::Text:: *)
(*This picks up inconsistent units*)


(* ::Input:: *)
(*PhysicalUnitsPlot[ x^2 +10x,{x,1 Foot,2 Meter}]*)


(* ::Text:: *)
(*which might be fixed with*)


(* ::Input:: *)
(*PhysicalUnitsPlot[ x^2 +(10 Meter)  x,{x,1 Meter,20 Foot}]*)


(* ::Text:: *)
(*But there are still some limitations:*)


(* ::Input:: *)
(*PhysicalUnitsPlot[ x^2 +(10 Meter)  x,{x,1 Foot,2 Meter}]*)


(* ::Input:: *)
(*PhysicalUnitsPlot[x^2 ,{x,1 (Kilo Volt)/Meter,2500 Newton/Coulomb}]*)


(* ::Subsubsection:: *)
(*Tests with other options*)


(* ::Text:: *)
(*All the options of Plot work for PhysicalUnitsPlot.  The one exceptions is AxesLabel.*)


(* ::Text:: *)
(*The default graphic size may be too small so that the axes labels crowd out the plot itself.*)


(* ::Input:: *)
(*PhysicalUnitsPlot[10 Second Eb^2,{Eb,1 GeV, 5000 MeV}]*)


(* ::Text:: *)
(*One solution is to simply increase the graphics size in the Front End with the mouse. Alternatively change the ImageSize option.*)


(* ::Input:: *)
(*PhysicalUnitsPlot[10 Second Eb^2,{Eb,1 GeV, 5000 MeV},ImageSize->{400,200}]*)


(* ::Text:: *)
(*As usual, this can be arranged permanently with *)


(* ::Input:: *)
(*SetOptions[PhysicalUnitsPlot,ImageSize->{400,200}];*)


(* ::Input:: *)
(*PhysicalUnitsPlot[ x^2 ,{x,1 Meter,20 Foot}]*)


(* ::Text:: *)
(*Other options are used in the usual way.*)


(* ::Input:: *)
(*\[Alpha]=1.2;*)
(*PhysicalUnitsPlot[\[Alpha] Subscript[E, z]^2 ,{Subscript[E, z],1 (Kilo Volt)/Meter,2500 Newton/Coulomb},Background->RGBColor[1,1,.9],GridLines->Automatic]*)


(* ::Text:: *)
(*As expected the AxesLabel  option is simply ignored.*)


(* ::Input:: *)
(*PhysicalUnitsPlot[Subscript[E, z]^2 ,{Subscript[E, z],1 (Kilo Volt)/Meter,2500 Newton/Coulomb},Background->RGBColor[1,1,.9],AxesLabel->{"x","y"}]*)


(* ::Subsection:: *)
(*Finding out about everything defined by the package*)


(* ::Text:: *)
(*You can list all the symbols defined by the package with*)


(* ::Input:: *)
(*TableForm[Names["Accelerator`ConstantsUnits`*"]]*)


(* ::Text:: *)
(*Note that this actually displays the FullForm versions of the compound symbols available on the palette.  However it lets you see the names of the other symbols that are not visible on the palette.*)


(* ::Text:: *)
(*It does not list the many physical constants and units available from the standard packages, only the ones we gave special treatment to.   This list may be changed in future.  Your feedback is welcome.   The constants and units defined by the standard packages can be listed with*)


(* ::Input:: *)
(*TableForm[Names["Miscellaneous`PhysicalConstants`*"]]*)


(* ::Input:: *)
(*TableForm[Names["Miscellaneous`Units`*"]]*)


(* ::Section:: *)
(*Input Palette*)


(* ::Text:: *)
(*Mathematica's palettes provide a convenient way to input commands without having to remember their names or  syntax. They also help considerably to reduce syntax errors when you build up complex expressions. By selecting it and then using the File/Generate Palette from Selection command, the following input cell can be transformed into a palette containing templates for the most useful commands in this package.  *)


(* ::Input:: *)
(*{*)
(* {Button[Accelerator`ConstantsUnits`r\[UnderBracket]Subscript\[UnderBracket]e, Inherited], Button[Accelerator`ConstantsUnits`c, Inherited], Button[Accelerator`ConstantsUnits`e, Inherited], Button[Accelerator`ConstantsUnits`\[HBar], Inherited], Button[Accelerator`ConstantsUnits`\[Alpha]\[UnderBracket]Subscript\[UnderBracket]s, Inherited], Button[Accelerator`ConstantsUnits`\[Lambda]\[UnderBracket]Subscript\[UnderBracket]e, Inherited], Button[$CellContext`\[Lambda]\[UnderBracket]Overscript\[UnderBracket]Underscore\[UnderBracket]Subscript\[UnderBracket]e, Inherited], Button[Accelerator`ConstantsUnits`Z\[UnderBracket]Subscript\[UnderBracket]0, Inherited]},*)
(* {Button[Accelerator`ConstantsUnits`r\[UnderBracket]Subscript\[UnderBracket]p, Inherited], Button[Accelerator`ConstantsUnits`\[Mu]\[UnderBracket]Subscript\[UnderBracket]0, Inherited], Button[Accelerator`ConstantsUnits`\[Epsilon]\[UnderBracket]Subscript\[UnderBracket]0, Inherited], Button[Accelerator`ConstantsUnits`G\[UnderBracket]Subscript\[UnderBracket]e, Inherited], Button[Accelerator`ConstantsUnits`a\[UnderBracket]Subscript\[UnderBracket]Infinity, Inherited], Button[Accelerator`ConstantsUnits`\[Mu]\[UnderBracket]Subscript\[UnderBracket]B, Inherited], Button[Accelerator`ConstantsUnits`\[Mu]\[UnderBracket]Subscript\[UnderBracket]N, Inherited], Button[Accelerator`ConstantsUnits`\[Sigma]\[UnderBracket]Subscript\[UnderBracket]T, Inherited]},*)
(* {Button[Accelerator`ConstantsUnits`m\[UnderBracket]Subscript\[UnderBracket]e, Inherited], Button[Accelerator`ConstantsUnits`m\[UnderBracket]Subscript\[UnderBracket]p, Inherited], Button[Accelerator`ConstantsUnits`m\[UnderBracket]Subscript\[UnderBracket]n, Inherited], Button[Accelerator`ConstantsUnits`m\[UnderBracket]Subscript\[UnderBracket]d, Inherited], Button[Accelerator`ConstantsUnits`m\[UnderBracket]Subscript\[UnderBracket]\[Mu], Inherited], Button[Accelerator`ConstantsUnits`m\[UnderBracket]Subscript\[UnderBracket]Z, Inherited], Button[Accelerator`ConstantsUnits`m\[UnderBracket]Subscript\[UnderBracket]W, Inherited], Button[Accelerator`ConstantsUnits`\[Sigma]\[UnderBracket]Subscript\[UnderBracket]SB, Inherited]}*)
(*}*)
(*{*)
(* {{*)
(*   {Button[Units`Convert[$CellContext`\[SelectionPlaceholder], $CellContext`\[Placeholder]], Inherited],  , Button[Units`SI[$CellContext`\[SelectionPlaceholder]], Inherited]}*)
(*  }},*)
(* {Button[Accelerator`ConstantsUnits`ToFundamentalSI[$CellContext`\[SelectionPlaceholder]], Inherited]},*)
(* {Button[Accelerator`ConstantsUnits`DimensionCheck[$CellContext`\[SelectionPlaceholder]], Inherited]},*)
(* {Button[(Notation`Notation[DoubleLongLeftRightArrow[Notation`ParsedBoxWrapper["\[SelectionPlaceholder]"], Notation`ParsedBoxWrapper["\[Placeholder]"]]]; Null) (Accelerator`ConstantsUnits`IntroduceSymbol[$CellContext`\[Placeholder], "is the \[Placeholder].", $CellContext`\[Placeholder]]; Null), Inherited]},*)
(* {Button[Accelerator`ConstantsUnits`SymbolsUnits[], Inherited]}*)
(*}*)


(* ::Text:: *)
(*The Notation and IntroduceSymbol functions are combined in a single button for convenience.  Remember that the same alias (e.g. rhoy for Subscript[\[Rho], y] must be entered in both the red slots.*)


(* ::Text:: *)
(*The package is normally set up to open a palette file called ConstantsUnitsPalette.nb in its source directory when the package is loaded.  Normally this palette is generated from the above cell.*)


(* ::Text:: *)
(*The option ShowGroupOpenCloseIcon->True is useful in palettes.  Note that the palette buttons for functions are most useful if you first select a part of an expression on your screen to which you want to apply them. *)


(* ::Text:: *)
(*Generating your own palette from this notebook has the advantage that you can modify it to your taste.  Otherwise, the default ready-made palette will appear automatically on your screen when you load the package (if you don't want it, just close it).*)


(* ::Section::Closed:: *)
(*Bibliography*)


(* ::Text:: *)
(*[1] Stephen Wolfram, The Mathematica Book, 3rd ed., Wolfram Media/Cambridge University Press, 1996.*)


(* ::Text:: *)
(*[2]  Roman Maeder, Programming in Mathematica, 3rd ed. Addison-Wesley, 1996*)


(* ::Text:: *)
(*[3] A.W. Chao, M. Tigner (Eds.), Handbook of Accelerator Physics and Engineeering, World Scientific, Singapore, 1999.*)


(* ::Text:: *)
(*	http://www.wspc.com/books/physics/3818.html*)


(* ::Text:: *)
(*[4] Stephen G. Benka (Ed.), Physics Today, Vol. 51, No. 8, Part 2, Buyers Guide, American Institute of Physics, New York, August 1998*)
