(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
BeginPackage["HDF5Interpret`"];


(* ::Input::Initialization:: *)
HDF5Interpret::usage="HDF5Interpret[\"filename\"] interprets an HDF5 SimFrame Formatted File";


(* ::Input::Initialization:: *)
Begin["`Private`"]


(* ::Input::Initialization:: *)
HDF5Interpret[filename_,opts___Rule]:=Block[{unrotate,verbose,cols,startposition,rotation,prepend,append,beamdata,paramnames},
unrotate=Global`HDF5Normalise/.{opts}/.{Global`HDF5Normalise->True};
verbose=Global`HDF5Verbose/.{opts}/.{Global`HDF5Verbose->False};
prepend = Global`HDF5Prefix /. {opts} /. {Global`HDF5Prefix -> ""};
append = Global`HDF5Postfix /. {opts} /. {Global`HDF5Postfix -> ""};
cols=prepend<>ToString[#]<>append&/@Import[filename,"/beam/columns"];
Clear[Evaluate[#]]&/@cols;
beamdata=Transpose[Import[filename,"/beam/beam"]];
startposition=Import[filename,"/Parameters/Starting_Position"];
rotation=Import[filename,"/Parameters/Rotation"];
If[unrotate,
beamdata[[{1,2,3}]]=Transpose[(#-startposition&/@Transpose[beamdata[[{1,2,3}]]]).RotationMatrix[rotation,{0,1,0}]];
beamdata[[{4,5,6}]]=Transpose[((#&/@Transpose[beamdata[[{4,5,6}]]]).RotationMatrix[rotation,{0,1,0}])];
];
MapThread[(Evaluate[Symbol@#1]=#2)&,{cols,beamdata}];
params=Import[filename,"/Parameters"];
paramnames=prepend<>ToString[#]<>append&/@Keys[params];
Clear[Evaluate[StringReplace[#1,{"_"->"\[Sterling]","-"->"$"}]]]&/@paramnames;
MapThread[(Evaluate[Symbol@StringReplace[#1,{"_"->"\[Sterling]","-"->"$"}]]=#2)&,{paramnames,Values[params]}];
If[verbose,
Print["Parameter(s) Assigned: ",paramnames];
Print["Variables(s) Assigned: ",cols];
];
]


(* ::Input::Initialization:: *)
End[]


(* ::Input::Initialization:: *)
EndPackage[]
